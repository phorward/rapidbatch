template.html§0TITLE§1CONTENT
rb5_en_userdialogs_1.html§Implementing user-defined dialog windows§With RapidBATCH 5, implementing user-defined dialog windows is now possible for the first time! RapidBATCH uses a simple, but very efficient, elaborated and easy to use system, making it possibile to create dialog window elements and change and read out their behavior, appeareance and contents.<br><br><!-- br --><!-- br -->With only five different instructions and functions, you're able to develop and design completely individual Windows-applications of any kind by yourself!<br><br><!-- br --><!-- br -->When implementing own dialogs using the RapidBATCH scripting platform, you have to implement your applications by following these four steps:<!-- br --><!-- br --><ul><!-- br -->	<li>Creating the dialog widgets</li><!-- br -->	<li>Setting up the dialog widget's attributes and behavior</li><!-- br -->	<li>Making the dialog window visible</li><!-- br -->	<li>Runing the dialog, react on events</li><!-- br --></ul><!-- br --><!-- br -->The following script does exactly these four steps. It creates a dialog with an input-field and a button. If the user clicks the button, the text, that was inserted into the input-field, is displayed in a messagebox.<!-- br --><br><!-- br --><br><!-- br --><!-- br -->[code]<font color="#808080">rem creating the dialog widgets</font><br /><!-- br -->newdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'DIALOG'</font>, <font color="#0000ff">'1|1|300|80'</font><br /><!-- br -->newdialog <font color="#0000ff">'myDialog:Input'</font>, <font color="#0000ff">'INPUT'</font>, <font color="#0000ff">'10|1|273|25'</font><br /><!-- br -->newdialog <font color="#0000ff">'myDialog:Go'</font>, <font color="#0000ff">'BUTTON'</font>, <font color="#0000ff">'80|27|140|25'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem setting up the dialog widget's attributes and behavior</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'CAPTION'</font>, <font color="#0000ff">'Hello World'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Input'</font>, <font color="#0000ff">'TEXT'</font>, <font color="#0000ff">'This is a text you can edit!'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Go'</font>, <font color="#0000ff">'CAPTION'</font>, <font color="#0000ff">'Click me!'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem make the dialog window visible</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'VISIBLE'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><b>repeat</b><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem run the dialog</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;rundialog <font color="#000080">[event]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem evaluate the event</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[event]</font> = <font color="#0000ff">'click_myDialog:Go'</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem get the text from the input field</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[text]</font> = <font color="#0000ff">'myDialog:Input'</font>, <font color="#0000ff">'TEXT'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The value in the input field is: '</font> # <font color="#000080">[text]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><b>until</b> <font color="#000080">[event]</font> = <font color="#0000ff">'close_myDialog'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><!-- br --><div class="image"><img src="img/dlgapp_01.gif" alt="User-defined dialog window" title="Screenshot" /><br /><!-- br -->Script with an individually designed dialog window</div><!-- br --><!-- br -->I will now introduce you step-by-step into this world of the nearly unlimited possibilites, because this new, very effective feature lifts RapidBATCH up to a powerful, high-level Windows programming language enabling you to build and develop your own user interfaces and powerful software-applications for the Windows&reg; operating system.<!-- br --><!-- br --><div class="remark">Note: In the following, I will use the word &quot;Widget&quot; for many times. As widget, a abbreviation for &quot;Window Gadget&quot;, I both mean dialog windows themselves as well as the so called dialog elements like buttons or input-fields, that are positioned and displayed on the dialog. The difference between dialog windows and dialog elements is described later.</div><!-- br --><!-- br --><div class="remark"><!-- br -->Tip: If you're using RapidBATCH Professional Edition, you have the possibility of creating dialogs very easily using the &quot;RapidBATCH Visual Dialog Designer&quot;, a very useful utility that allows the real-time creation, positioning and editing of widgets in a WYSIWYG-environment (What You See Is What You Get). When you finished your design, the program generates the complete RapidBATCH script source code that is necessary to show and set-up the whole dialog you designed. Only the events for the different widgets need to be implemented into this generated script. But anyway, when you decide to use the Visual Dialog Designer to create your dialogs, please continue reading this chapter to understand how user-defined dialog programming is performed manually in the RapidBATCH scripting language.</div><!-- br --><!-- br -->To create widgets, the instruction NEWDIALOG is used. As it appears in the above example, NEWDIALOG expects as parameter values a so called widget-label, which can be seen as a &quot;name&quot; for the window object. This label must be unique, it is not possible to manage different widgets under the same label. Next to the widget-label, NEWDIALOG expects the type of the widget that should be created, for example a dialog, an input-field or a button, etc.. As the third parameter, the coordinates where the widget should be placed at, is specified. These coordinates, in pixels, are specified in the format &quot;X-Position|Y-Position|Width|Height&quot;, where each coordinate is separated by the standard list separation character (by default, the pipe-character, &quot;|&quot;): <!-- br --><!-- br --><br><!-- br --><br><!-- br --><!-- br -->With the line<!-- br --><br><br><!-- br -->[code]newdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'DIALOG'</font>, <font color="#0000ff">'1|1|300|80'</font>[/code]<!-- br --><br><!-- br --><!-- br -->from our example-script, we're creating a new widget of the type &quot;DIALOG&quot; (which defines a dialog-basic window) with a width of 300 pixels and a height of 80 pixels, that is placed in the upper-left corner of the screen (X- and Y-coordinates 1|1). This dialog-window is associated with the name &quot;myDialog&quot;, to access it for later purposes.<br><!-- br --><br><!-- br -->The following, two NEWDIALOG-instructions<br><!-- br --><br><!-- br --><!-- br -->[code]newdialog <font color="#0000ff">'myDialog:Input'</font>, <font color="#0000ff">'INPUT'</font>, <font color="#0000ff">'10|1|273|25'</font><br /><!-- br -->newdialog <font color="#0000ff">'myDialog:Go'</font>, <font color="#0000ff">'BUTTON'</font>, <font color="#0000ff">'80|27|140|25'</font>[/code]<!-- br --><!-- br --><br><!-- br --><!-- br -->are creating a single-line input-field (widget-type: &quot;INPUT&quot;) and a button (widget-type: &quot;BUTTON&quot;) on the dialog window &quot;myDialog&quot;. That these elements are placed and hold on the dialog-window &quot;myDialog&quot; can be seen on the prefixed &quot;myDialog:&quot;; The colon (:) advises RapidBATCH to create the widget as a child-element of &quot;myDialog&quot;. The widget will be created and associated with this label, for example &quot;myDialog:Input&quot;, that means that the parent window identifier &quot;myDialog&quot;, seperated by the colon from the proper widget name, &quot;Input&quot;, are building the unique labeling of the child-widget.<br><!-- br --><br><!-- br -->The pixel positions that are specified at the child-elements being created are relative to the parent window, that means the objects are located on the specified coordinates, where position 1|1 is the upper-left corner of the parent-dialog's client area. Only the parent-dialog itself is located on the screen via screen-coordinates.<br><!-- br --><br><!-- br --><!-- br -->After creating the widgets now, different values are set to them. In our case, the parent-dialog's caption is getting the caption &quot;Hello World&quot; in its title bar, the button gets the caption &quot;Click me!&quot; and the input-field gets the text &quot;This is a text you can edit!&quot;.<!-- br --><!-- br --><br><!-- br --><!-- br -->[code]<font color="#808080">rem setting up the dialog widget's attributes and behavior</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'CAPTION'</font>, <font color="#0000ff">'Hello World'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Input'</font>, <font color="#0000ff">'TEXT'</font>, <font color="#0000ff">'This is a text you can edit!'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Go'</font>, <font color="#0000ff">'CAPTION'</font>, <font color="#0000ff">'Click me!'</font>[/code]<!-- br --><!-- br --><br><!-- br -->Each value is set using the LETDIALOG-instruction. LETDIALOG expects as parameter values the target widget's identifying label, the attribute-identifier of the attribute that should be changed or set-up and at least the related value. This last parameter sometimes must be specified in a formatted order which is based on the attribute that is specified.<br><!-- br -->The attribute identifier &quot;CAPTION&quot; sets the labeling of a widget, for example the dialog-window's title bar or the text displayed on the button. &quot;TEXT&quot; is used to set the text of an &quot;INPUT&quot;, &quot;EDIT&quot;, or &quot;COMBO&quot;-typed widget. Which attributes a widget provides is different from widget to widget. There is no widget supporting all attributes that are possible, e.g. a listbox has no caption, but a button having a caption can not store or display a list of items, which is the case at the listbox. More of these attributes will be discussed later.<!-- br --><!-- br --><br><!-- br --><br><!-- br --><!-- br -->At least, by using the line<br><!-- br --><br><!-- br -->[code]letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'VISIBLE'</font>, <font color="#000080">[true]</font>[/code]<!-- br --><br><!-- br --><!-- br -->the parent-dialog widget is made visible, by setting the VISIBLE-attribute of the dialog to [true] or '0'.<br><!-- br -->Only at parent-dialog widgets, the VISIBLE-attribute is set to '-1' or [false] (which means: Not visible) by default, when they are created. Child-widgets are automatically set to visible when they are created with NEWDIALOG. The reason for this is, that it is recommended to first create all dialog widgets and then make the parent-widget, which is the dialog-window itself, visible. If you make the dialog immediatelly visible after its creation, there may be a short flickering for some milliseconds when the other widgets are created on your dialog, and this does not look that nice. On smaller dialogs, this phenomen will not appear, but if you create greater dialogs, maybe based on dynamic data, this possibility is advantageous. You should always perform this, even more professional way.<!-- br --><!-- br --><div class="remark">Important: When you're creating dialogs in RapidBATCH by your own, make sure that the window really is visible before you execute the RUNDIALOG-function (which is discussed next). If no dialog window is visible and RUNDIALOG is executed without a timeout-value, the script waits for user events that can appear on the invisible dialog. And this will never be the case, because how should the user click e.g. a button that is not visible?<!-- br --></div><!-- br --><!-- br -->When all widget creations and their attribute-settings are done, the RapidBATCH-script calls the so called RUNDIALOG-function. This function starts an internal waiting loop that is executed until the user initiates a so called event with the existing dialog child-widgets or the dialog-window itself.<!-- br --><!-- br --><br><!-- br --><br><!-- br -->[code]rundialog <font color="#000080">[event]</font> = <font color="#0000ff">'0'</font>[/code]<!-- br --><br><!-- br --><!-- br -->When this line is executed, the dialog can be used. When the user hits, for example, the button on our dialog, the function generates and returns a so called event-string, that is formatted in the order &quot;Event_Widget-IdentLabel&quot;. So if the user hits the &quot;Click me!&quot; button in our above example, RUNDIALOG returns the event-string &quot;click_myDialog:Go&quot;.<br><!-- br --><!-- br -->The numerical parameter that is specified at RUNDIALOG is an optional timeout value. If this value is set to '0' or a negative value, RUNDIALOG has no timeout and waits, until an event is initiated by the user (like in our current example). If this timeout is specified, e.g. the value '10000' (a timeout of 10 seconds), RUNDIALOG will wait for events only for these 10 seconds. If the user clicks the button within this time, an event-string is returned by RUNDIALOG, if nothing happens and the timeout is reached, RUNDIALOG returns an empty-string and continues the script execution.<br><!-- br --><br><!-- br --><!-- br -->In the following IF-block, our script checks if the button was pressed, by comparing the event-string returned by RUNDIALOG with the constant verification string &quot;click_myDialog:Go&quot;. If this condition results true, the text from the input-field is determined, using the GETDIALOG-function, and displayed to the user over an ECHO-messagebox.<!-- br --><!-- br -->[code]<!-- br --><b>repeat</b><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem run the dialog</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;rundialog <font color="#000080">[event]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem evaluate the event</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[event]</font> = <font color="#0000ff">'click_myDialog:Go'</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem get the text from the input field</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[text]</font> = <font color="#0000ff">'myDialog:Input'</font>, <font color="#0000ff">'TEXT'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The value in the input field is: '</font> # <font color="#000080">[text]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><b>until</b> <font color="#000080">[event]</font> = <font color="#0000ff">'close_myDialog'</font><!-- br -->[/code]<!-- br --><!-- br -->GETDIALOG is the opposite of LETDIALOG. It does not set a widget's attribut, but reads it out and returns it. GETDIALOG expects the widget's label that should be read and the particular attribute. The return string is (not in all, but in the most cases) the same as specified at LETDIALOG.<!-- br --><!-- br --><br><br><!-- br --><!-- br -->Now, I think you had understood the basics of individual, user-defined dialog creation in RapidBATCH. The concept RapidBATCH uses is very simple, but also very dynamic together. You can create a dynamic number of widgets and evenly work with them. In the next chapter, the different widgets RapidBATCH provides to create your individual dialog windows are discussed more detailed.<br><br><!-- br --><!-- br -->The best way to get familar with these new possibilities, take a look to the numerous example scripts the RapidBATCH scripting package comes with, using user-defined dialogs and interfaces.
rb5_en_userdialogs_2.html§A widget overview§To program scripts with completely individual dialog windows, RapidBATCH provides more than 15 different widgets with lots of attributes and events that can be used to construct powerful applications and user-interfaces. In this chapter, each available widget is introduced and discribed shortly.<br /><br /><!-- br --><!-- br --><!-- br --><table><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_dialog.gif" alt="Screenshot of a Dialog" title="DIALOG" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>DIALOG</b><br /><br /><!-- br -->A dialog-window is a widget that acts as a parent-widget for any other widgets, the so called child-widgets. This dialog-window can obtain different, pre-defined window-styles and has a title-bar on its top, displaying a freely definable text.<br><!-- br -->Additionally, these widgets are able to provide a menu-bar and a statusbar.<br><!-- br -->It is possible to show and manage multiple dialog widgets at the same time.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_button.gif" alt="Screenshot of a Button" title="BUTTON" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>BUTTON</b><br /><br /><!-- br -->			A button is an area on a dialog-widget that can be visually &quot;pressed&quot; to initiate an operation that is described by the labelling text the button displays. The caption of a button can be set using the CAPTION-attribute.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_imagebutton.gif" alt="Screenshot of an Imagebutton" title="IMAGEBUTTON" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>IMAGEBUTTON</b><br /><br /><!-- br -->			An IMAGEBUTTON-widget has the same purpose as a BUTTON-widget with the difference, that this widget is able to display an externally saved image instead of a labelling text. The image is specified by setting the IMAGE- or IMAGE_TRANSPARENT-attributes to a valid, external bitmap-filename (with .BMP file extension).<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_label.gif" alt="Screenshot of a Label" title="LABEL" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>LABEL</b><br /><br /><!-- br -->			LABEL-widgets (Labels) are static fields that are displaying text. Labels are mostly used to describe the purpose of input- or edit-fields by positioning it in front of the widget that should be described. The displayed text is set using the CAPTION-attribute.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_input.gif" alt="Screenshot of an Input" title="INPUT" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>INPUT</b><br /><br /><!-- br -->			An INPUT-widget provides a single-line text edit field. For example, these widgets are used to let the user enter smaller values, like names, addresses, phone numbers and much more. The text can be read and changed using the TEXT-attribute, same as the cursor's position within the text-field, which can be read or set using the SELPOS-attribute. Using the SELECTION-attribute, the selected text in the edit-field can be determined and replaced.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_pwd.gif" alt="Screenshot of a PWD input field" title="PWD" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>PWD</b><br /><br /><!-- br -->			A PWD-widget provides a single-line password prompting field. These widget-type is used to read or display masked values, as it is the case in RapidBATCH's pre-defined PWDBOX-dialog. The user can not see the widget's content, which is masked by &quot*&quot;-characters.<br><!-- br -->This widget supports the same attributes like INPUT-widgets.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_edit.gif" alt="Screenshot of an Edit" title="EDIT" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>EDIT, EDIT_LINEWRAP</b><br /><br /><!-- br -->			An EDIT-typed widget provides a multi-line text input field. These widgets can be seen as small text-editors to edit and display greater amounts of texts on a dialog. EDIT- and EDIT_LINEWRAP-typed widgets are both supporting the same input-field-specific attributes like TEXT, SELPOS and SELECTION.<br /><!-- br --><br /><!-- br --><!-- br -->When creating an EDIT_LINEWRAP-typed widget, the function and usage of the widget is the same, but text is not scolled horizontally. The widget automatically breaks its content text when its longer than the widget's width. This feature is very helpful and ergonomic, especially when the user should edit higher amounts of text that do not expect manual line breaks.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_option.gif" alt="Screenshot of an Option-widget with checkmark" title="OPTION" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>OPTION</b><br /><br /><!-- br -->			An OPTION-typed widget provides a so called &quot;check box&quot;. A check box is a small, labbeled box that can be switched active or inactive, using a checkmark, by single-clicking the widget. OPTION-widgets are used to let the user switch options on or off, e.g. for an operation that is performed when the dialog is confirmed. The state of the checkmark can be set and determined using the CHECKED-attribute (0 = checked, -1 = not checked). The labelling text can be accessed using the CAPTION-attribute.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_radio.gif" alt="Screenshot of an activated Radio-widget" title="RADIO" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>RADIO</b><br /><br /><!-- br -->			A RADIO-widget provides a so called radio-button. A radio-button is a small, round area that looks like a round version of the OPTION-widget. In principle, radio-buttons nearly have the same purpose like OPTION-widgets, with the difference, that a set of radio-buttons is put together to a group of buttons, where only one button can be checked. If another button is clicked, the previously checked one will be get unchecked again. If a radio-button is checked or not can be recongized with the small dot in the middle of the round area. Radio-buttons are named according to the usage of old portable radios, where only one of the buttons could be pressed, and the previous button automatically became released.<br><!-- br --><!-- br -->To define such a group, create all RADIO-typed widgets that should belong to a group directly  in a row, using NEWDIALOG. To begin another group of RADIO-widgets, any other widget needs to be created first, e.g. a GROUP-typed widget that visually groups the RADIO-typed widgets together to one unit.<br><!-- br --><!-- br -->The state of the checkmark can be, same way like at OPTION-typed widgets, set and determined using the CHECKED-attribute (0 = checked, -1 = not checked). The labelling text can be accessed using the CAPTION-attribute.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_list.gif" alt="Screenshot of a List-widget" title="LIST" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED</b><br /><br /><!-- br --><!-- br -->			LIST-widgets, and their derivative widgets LIST_SORTED, LIST_MULTI and LIST_MULTISORTED, are providing a form of widget displaying a list of entries (a so called listbox), like the build-in dialog LISTBOX uses to display a list of entries. LIST-typed widgets are displaying their entries in the same order they are specified, a LIST_SORTED-typed widget automatically sorts its entries alphabetically. Entries are specified and determined using the ITEMS-attribute by specifying a list of entries, where each item is sperated by the RapidBATCH standard list separation character, by default pipe (|). Which entry is selected in the widget can be determined and also specified using the SELECTION-attribute (to get the selected item's value itself) or the SELINDEX-attribute, that contains the selected item's index(es) in the widget.<!-- br --><br><!-- br --><br><!-- br --><!-- br -->LIST_MULTI- and LIST_MULTISORT-typed widgets are the multi-selectable versions of LIST- and LIST_SORTED-typed widgets. A LIST_MULTI- or LIST_MULTISORTED-typed widget allows the multiple selection of entries, so that one, four or even all entries displayed in the widget can be selected. In case of a LIST_MULTI- or LIST_MULTISORTED-typed widget, the attributes SELINDEX and SELECTION are both returning and accepting lists of item-values that are selected or should be selected.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_combo.gif" alt="Screenshot of a Combo-Widgets" title="COMBO" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>COMBO</b><br /><br /><!-- br -->			COMBO-typed widgets are a mix of INPUT- and LIST-typed widget. COMBO-widgets are displaying an input field whose content can be changed or edited, and a listbox that appears if the user clicks a tiny button at the left of the input field. From this drop-down box, the user can select a pre-defined text from a list, that is taken over to the edit field when selected. The list is specified and determined over the ITEMS-attribute that is also used in LIST-typed widgets and their derivatives. Aditionally, input-field specific attributes like TEXT, SELPOS or SELECTION can be used with COMBO-typed widget.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_static_combo.gif" alt="Screenshot of a Static-Combo-Widget" title="STATIC_COMBO" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>STATIC_COMBO</b><br /><br /><!-- br -->			STATIC_COMBO-Widgets are looking like COMBO-widgets, but with the only difference that STATIC_COMBOs do only offer a static amount of values - it is not possible for the user to enter text into a provided input field.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_image.gif" alt="Screenshot of an Image-widget" title="IMAGE" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>IMAGE</b><br /><br /><!-- br -->			An IMAGE-widget displays an externally saved bitmap-image on the dialog window. The image's filename that should be shown is specified over the IMAGE- or IMAGE_TRANSPARENT-attribute, whereas the IMAGE_TRANSPARENT-attribute makes all pixels that have the same color like the pixel in the upper-right corner of the displayed image transparent, that means each of these pixel will be replace by the dialog's background color.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_progress.gif" alt="Screenshot of a Progress-Widget" title="PROGRESS" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>PROGRESS</b><br /><br /><!-- br -->			PROGRESS-Widgets (progress bar) are used to show the percentage progress of a operation. The status bar can visually be set to an amount between 0 and 100 percent.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_group.gif" alt="Screenshot of a Group-widget" title="GROUP" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>GROUP</b><br /><br /><!-- br -->			This is the only widget-type that doesn't support any event, and has a pure visual function. The GROUP-widget draws a frame that is used as the border to group functional crowds of widgets visually to one separate unit.<br><br><!-- br -->The caption of a GROUP-widget is set using the CAPTION-attribute.<!-- br -->		</td><!-- br -->	</tr><!-- br --></table>
rb5_en_userdialogs_3.html§Creating an example application§As a demonstration on an implementation of a small, complete application using customized dialog windows in RapidBATCH, we will now write a number system converter. This small utility, let's call it the &quot;Bin/Oct/Hex Converter&quot;, should be able to convert values from the decimal number system into the binary, the octal and the hexadecimal number system and backward.<br><br><!-- br --><!-- br -->To calculate the numbers of the different number systems, we use the functions &quot;base_to_decimal&quot; and &quot;decimal_to_base&quot;, defined in the RapidBATCH function library MATH.RB, because the focal point of this chapter is not the conversion of values into different number systems, but the usage and handling of the dialog-widgets, how they are merged together to a complete software application.<br><br><!-- br --><!-- br -->First of all, however, I try to explain you the method of converting a decimal value into a binary value, to get you more involved in the purpose of our program. The decimal number system is the number system we daily use. It has 10 digits, (0,1,2,3,4,5,6,7,8,9), so we say, the decimal number system is hold to the base of 10. In contrast to this, there is the binary number system. The binary number system, that is used by every computer, has only two digits, 0 and 1, and is hold to the base of 2. We can store any number we have in decimal also in binary, but here, we need more digits to display one number. E.g. the decimal number &quot;1234&quot; is in binary &quot;10011010010&quot;. The calculation of this value is very easy: The base value, 1234, needs to be divided by the base of the target number system each time, until the rest value is completely 0. If you get a rest-value with a decimal place, the digit in the binary number system will be a 1. If there is no decimal place in your rest-value, you set a 0. Perform these steps with the integer rest of your rest-number only, until you reach a value of 0. Then, the entire number is converted into a binary number. By reversing this resulting string of digits you received (because the binary number is established from right to left), you're getting the desired number in the binary number system.<br><!-- br -->The other number systems are calculated the same way, but with other bases. The octal number system is hold to the base of 8, the hexadecimal number system is hold to the base of 16, where the digits 10, 11, 12, 13, 14 and 15 are replaced by A, B, C, D, E and F.<!-- br --><!-- br --><br><br><!-- br -->Our converter program's user interface should now be made up as follows: A dialog-window with two input fields, where the upper one is to input and display the decimal number and the lower one is to input and display the value of the currently activated number system (binary, octal, hexadecimal). The target system should be changed over a menubar provided by the dialog, where the currently set conversion mode should be marked by a checkmark at the appropriate menu item. The conversion should be possible in both ways - that means when the user inputs a value in the decimal field, the value will be converted in the target number system or, when the user inputs a value (using the digits of the target system) into the target-system input field, it is converted into decimal. The conversion should be performed directly and &quot;live&quot; each time the user enters a digit in the particular input field.<!-- br --><!-- br --><br><!-- br --><br><!-- br --><!-- br -->All these requirements to the program we want to create are no problem for RapidBATCH. For an experienced programmer, such an application is developed and finished in less than 15 minutes and a script file length of only 120 lines (including all commentars and empty lines ;)).<!-- br --><!-- br --><br><!-- br --><br><!-- br --><!-- br -->As the first step in the development phase of this script we write a prototype. A prototype is a programmed and runable version of the user interface, but with no functionalities. Such a prototype is also a proven method to place and arrange the different widgets on the dialog window, making the user interface looking ergonomic and integrative.<!-- br --><br><br><!-- br --><!-- br -->[code]<!-- br --><font color="#808080">rem PROTOTYPE: NO FUNCTIONALITY!!!</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- creating and setting up the main window ---</font><br /><!-- br -->newdialog <font color="#0000ff">'converter'</font>, <font color="#0000ff">'dialog'</font>, <font color="#0000ff">'1|1|270|100'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem set the dialog's title bar text and style</font><br /><!-- br -->letdialog <font color="#0000ff">'converter'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Bin/Oct/Hex Converter'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter'</font>, <font color="#0000ff">'style'</font>, <font color="#0000ff">'single'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem assign menu tree</font><br /><!-- br --><font color="#000080">[menu]</font> = <font color="#0000ff">'&Mode:Decimal -&gt; &Binary|Decimal -&gt; &Octal|Decimal -&gt; &Hexadecimal;;'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter'</font>, <font color="#0000ff">'menu'</font>, <font color="#000080">[menu]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- creating input fields and labels ---</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem label and input-field for the decimal number</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:l_decimal'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|8|100|22'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:l_decimal'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Decimal value:'</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|4|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem label and input-field for the number in the target number system</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:l_target'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|34|100|22'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:l_target'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Binary value:'</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|30|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- making the dialog visible ---</font><br /><!-- br -->letdialog <font color="#0000ff">'converter'</font>, <font color="#0000ff">'visible'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br -->rundialog <font color="#000080">[event]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><b>end</b><!-- br -->[/code]<!-- br --><!-- br --><div class="image"><img src="img/conv_proto.gif" alt="Image of the running prototype" title="Screenshot" /><br /><!-- br -->The already running prototype of the converter.</div><!-- br --><!-- br -->So let's go step-by-step trough the prototype script.<br><br><!-- br --><!-- br -->First of all, we create a dialog basis window with a size of 270x100 pixels. In the following LETDIALOG-instructions we first set-up the dialog-title using the CAPTION-attribute, and then we set a so called dialog style using the STYLE-attribute. The &quot;SINGLE&quot;-style we are setting to the window in this case, changes the appeareance of the window insofar, that only a minimize-button and a close-button is available, because a maximize-button is not recommended to such a tiny application in this case. To get information on other style values, take a look to the RapidBATCH language reference.<!-- br --><!-- br --><br><!-- br --><br><!-- br -->Last but not least, we assign a menu to the dialog, using the MENU-attribute at LETDIALOG. To create a menu, RapidBATCH uses a so called &quot;Menu-Descriptor&quot;, that describes the menu, the different items and levels. In this case, we create one menu-item &quot;Mode&quot; in the main menu bar, providing three selectable sub menu items (&quot;Decimal -> Binary&quot;, &quot;Decimal -> Octal&quot; and &quot;Decimal -> Hexadecimal&quot;). For more informations on menu bar descriptors and their definition, take a look at the RapidBATCH language reference.<!-- br --><!-- br --><div class="remark">Note: The RapidBATCH Visual Dialog Designer, as mentioned also in the introducion of the individual dialog development chapter, enables you to build such a menu in a comfort dialog window, where you can move and change the items. The Visual Dialog Designer then generates the necessary menu descriptor for the desired menu-tree.</div><!-- br --><br><br><!-- br --><!-- br -->In the second part of the prototype script, we create four new widgets, in each case two input fields and two static text fields, displaying a description in front of the input-fields. By using the FONT-attribute at the followed LETDIALOG-instruction call, we set an alternative font type and size, here &quot;Sans Serif, 10 Pixels, Bold&quot; to each of the input-fields.<!-- br --><!-- br --><br><br><br><!-- br --><!-- br -->On the base of this prototype, we can now implement the functionalities to our script.<!-- br --><br><br><!-- br --><!-- br -->First of all, we import the RapidBATCH library MATH.RB, providing the conversion routines &quot;decimal_to_base&quot; and &quot;base_to_decimal&quot;. Also, DIALOG.RB is imported, providing useful help functions for user defined dialog development, e.g. the &quot;centerdialog&quot;-procedure, centering a dialog on the screen. The import of these libraries is done as the first step in our script, using the INCLUDE-instruction.<!-- br --><!-- br --><br><br><!-- br --><!-- br -->[code]<!-- br --><font color="#808080">rem --- importing library help functions ---</font><br /><!-- br --><font color="#008000">include 'math.rb'</font><br /><!-- br --><font color="#008000">include 'dialog.rb'</font><!-- br -->[/code]<!-- br --><!-- br -->The functions decimal_to_base and base_to_decimal, provided by the MATH.RB library, do each expect, as the second parameter, a string containing all digits of the number system the value should be calculated to or from; The amount of these digits automatically defines the number system's base that should be used. To define the three number systems for binary, octal and hexadecimal, we declare three global variables, containing these digits for each of the number system. The fourth variable, [current_base], is used to store the digits of the currently used number system, and is needed later when we implement event handling procedures.<!-- br --><br><br><!-- br --><!-- br -->[code]<!-- br --><font color="#808080">rem --- global variables (bases and digits of the number systems) ---</font><br /><!-- br --><b>dec</b> <font color="#000080">[bin]</font>, <font color="#000080">[oct]</font>, <font color="#000080">[hex]</font>, <font color="#000080">[current_base]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem basis 2 (binary number system)</font><br /><!-- br --><font color="#000080">[bin]</font> = <font color="#0000ff">'01'</font><br /><!-- br --><font color="#808080">rem basis 8 (octal number system)</font><br /><!-- br --><font color="#000080">[oct]</font> = <font color="#0000ff">'01234567'</font><br /><!-- br --><font color="#808080">rem basis 16 (hexadecimal number system)</font><br /><!-- br --><font color="#000080">[hex]</font> = <font color="#0000ff">'0123456789ABCDEF'</font><!-- br -->[/code]<!-- br --><!-- br -->Before we implement the event handling now for the menu and the automatic &quot;live&quot; conversion of values, let's write two procedures, where each is reading out the corresponding input field, converts the value using the particular function to or from the currently set number system, and update this converted value in the corresponding text field. To keep up the simplicity, we call these two procedures &quot;calc_target_value&quot;, converting the value of the decimal field to the currently set number system, and &quot;calc_decimal_value&quot;, converting the number entered in the value field of the currently set number system to decimal again. In case of a calculation error (e.g. if a value contains invalid digits), both conversion functions base_to_decimal and decimal_to_base) return '-1'. In this case, we output the message &quot;Error&quot; in the particular conversion field, to let the user know that he entered a wrong digit or value.<!-- br --><br><br><!-- br --><!-- br -->[code]<!-- br --><font color="#808080">rem --- implementation of the procedure "calc_target_value" ---</font><br /><!-- br --><b>proc</b> calc_target_value<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>dec</b> <font color="#000080">[decimal]</font>, <font color="#000080">[convert]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem calculate value in the target number system from the decimal value</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[decimal]</font> = <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'text'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[decimal]</font> ! <font color="#0000ff">''</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem calculating the value</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem (using the decimal_to_base-library function)</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decimal_to_base <font color="#000080">[target]</font> = <font color="#000080">[decimal]</font>, <font color="#000080">[current_base]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[target]</font> = <font color="#0000ff">'-1'</font> <font color="#000080">[target]</font> = <font color="#0000ff">'Error'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem set the calculated value to the target field</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'text'</font>, <font color="#000080">[target]</font><br /><!-- br --><b>endproc</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- implementation of the procedure "calc_decimal_value" ---</font><br /><!-- br --><b>proc</b> calc_decimal_value<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>dec</b> <font color="#000080">[decimal]</font>, <font color="#000080">[target]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem calculating the decimal value from the currently activated number system</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[target]</font> = <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'text'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[target]</font> ! <font color="#0000ff">''</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem calculating the decimal value</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem (using the base_to_decimal-library function)</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base_to_decimal <font color="#000080">[decimal]</font> = <font color="#000080">[target]</font>, <font color="#000080">[current_base]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[decimal]</font> = <font color="#0000ff">'-1'</font> <font color="#000080">[decimal]</font> = <font color="#0000ff">'Error'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem set the calculated value to the decimal field</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'text'</font>, <font color="#000080">[decimal]</font><br /><!-- br --><b>endproc</b><br /><!-- br --><br /><!-- br -->[/code]<!-- br --><!-- br -->Before we now begin to write nearly the same event handling steps that need to be done when the number system should be changed for about three times, we simply implement another, third procedure performing these steps. This procedure, let's call it &quot;set_number_system&quot;, expects as parameter one of the three number system definitions we created as global variables later, when we use it in the event handling for the menu. The first step set_number_system performs is to remove the checkmarks from all menu items (only one menu item really has one!).<br><!-- br -->Menu attributes can be accessed and changed by using the widget-labels in the format &quot;<i>Dialog-Label</i>:Menu_<i>Menu-Item-Text</i>&quot;, that are automatically created by RapidBATCH when a menu-descriptor is assigned to a dialog-window. Please note, that these widget-labels that allow to access and change menu item attributes are only created to those items that are selectable in the menubar. Parenting menu-items, providing sub-menus, can't be selected or modified.<br><!-- br --><!-- br -->After the checkmark is removed from all items, it is set again to the particular menu item in the corresponding block of the IF-construction. Here, the static text in front of the input field of the target number system to be converted in, is also set to the particular number system name.<!-- br --><br><br><!-- br --><!-- br -->At the end of the procedure, we assign the variable [current_base], that we defined above, to the new number system definition to be used for the following conversions, and directly call calc_decimal_value to update the value to the just changed number system. <!-- br --><br><br><!-- br --><!-- br -->[code]<font color="#808080">rem --- implementation of the procedure "set_number_system" ---</font><br /><!-- br --><b>proc</b> set_number_system: <font color="#000080">[number_system]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem removing the checkmarks from the menu items</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Octal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Hexadecimal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Binary'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem updating the label in front of the target fields, check the</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem particular menu item again</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[number_system]</font> = <font color="#000080">[bin]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:l_target'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Binary value:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Binary'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[number_system]</font> = <font color="#000080">[oct]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:l_target'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Octal value:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Octal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[number_system]</font> = <font color="#000080">[hex]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:l_target'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Hexadecimal value:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Hexadecimal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem update the currently used base to the assigned value</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[current_base]</font> = <font color="#000080">[number_system]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem recalculate the target value</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;calc_target_value<br /><!-- br --><b>endproc</b>[/code]<!-- br --><!-- br -->Now, our nice little application is nearly finished. The only thing that is missing now is an event handling routine.<br><br><!-- br --><!-- br -->For this, we first modify the section where we're creating the input fields for the values to a LETDIALOG call, switching the CHANGE-event for each input-field on. When the CHANGE-event is switched on, RUNDIALOG recognizes if anything in a text input-field is changed, e.g. when the user presses a key, so RUNDIALOG returns a corresponding event string. By default, the CHANGE event is turned of when a new widget with the INPUT-type is created. By using the value EVENT_&lt;Event-Name&gt; as attribute identifier, we can switch all events of a widget on or off (on = [true] or '0', off = [false] or '-1').<br><br><!-- br --><!-- br -->After creating the input- and label-widgets and switching on the events, we perform a call of set_number_system with the [bin] variable as parameter, to the script directly switches to the binary number system as default conversion mode when the converter starts.<!-- br --><br><br><!-- br --><!-- br -->[code]<font color="#808080">rem --- creating input fields and labels ---</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem label and input-field for the decimal number</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:l_decimal'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|8|100|22'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:l_decimal'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Decimal value:'</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|4|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'event_change'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem label and input-field for the number in the target number system</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:l_target'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|34|100|22'</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|30|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'event_change'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem by default, use binary number system</font><br /><!-- br -->set_number_system <font color="#000080">[bin]</font><!-- br -->[/code]<!-- br --><!-- br -->For the sake of completeness, we center the dialog window on the screen, using the procedure &quot;centerdialog&quot; provided by the above imported DIALOG.RB library, and set the input-focus to the decimal input field and make the dialog window visible.<!-- br --><br><br><!-- br --><!-- br -->In the event handling routine, that we realize here again as in our first script with a customized dialog window using a REPEAT...UNTIL loop, the script performs a leading RUNDIALOG call waiting for events first, and then verifies the corresponding of the only six possible events, that can occur, using an IF...ELSEIF...ENDIF-construction. Because of our excellent implementation of the three procedures calc_target_value, calc_decimal_value and set_number_system, we just need to call them - in case of set_number_system with the particular number system as parameter - in each event.<br><br><!-- br --><!-- br --><div class="image"><img src="img/converter.gif" alt="The finished converter program in action!" title="Screenshot" /><br /><!-- br -->The finished version of the Hex/Oct/Bin Converter.</div><!-- br --><!-- br --><!-- br -->Now, nothing more needs to be done, and our number system converter is finished:<!-- br --><!-- br --><br><br><!-- br -->[code]<!-- br --><font color="#808080">rem ********************************************</font><br /><!-- br --><font color="#808080">rem ** Bin/Oct/Hex Converter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**</font><br /><!-- br --><font color="#808080">rem ** Number systems conversation utility&nbsp;&nbsp;&nbsp;&nbsp;**</font><br /><!-- br --><font color="#808080">rem ********************************************</font><br /><!-- br --><font color="#808080">rem ** Copyright (C) 2005 by J.M. Meyer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**</font><br /><!-- br --><font color="#808080">rem ********************************************</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem *************</font><br /><!-- br --><font color="#808080">rem ** GLOBALS **</font><br /><!-- br --><font color="#808080">rem *************</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- importing library help functions ---</font><br /><!-- br --><font color="#008000">include 'math.rb'</font><br /><!-- br --><font color="#008000">include 'dialog.rb'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- global variables (bases and digits of the number systems) ---</font><br /><!-- br --><b>dec</b> <font color="#000080">[bin]</font>, <font color="#000080">[oct]</font>, <font color="#000080">[hex]</font>, <font color="#000080">[current_base]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem basis 2 (binary number system)</font><br /><!-- br --><font color="#000080">[bin]</font> = <font color="#0000ff">'01'</font><br /><!-- br --><font color="#808080">rem basis 8 (octal number system)</font><br /><!-- br --><font color="#000080">[oct]</font> = <font color="#0000ff">'01234567'</font><br /><!-- br --><font color="#808080">rem basis 16 (hexadecimal number system)</font><br /><!-- br --><font color="#000080">[hex]</font> = <font color="#0000ff">'0123456789ABCDEF'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem *********************</font><br /><!-- br --><font color="#808080">rem ** IMPLEMENTATIONS **</font><br /><!-- br --><font color="#808080">rem *********************</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- implementation of the procedure "calc_target_value" ---</font><br /><!-- br --><b>proc</b> calc_target_value<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>dec</b> <font color="#000080">[decimal]</font>, <font color="#000080">[convert]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem calculate value in the target number system from the decimal value</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[decimal]</font> = <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'text'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[decimal]</font> ! <font color="#0000ff">''</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem calculating the value</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem (using the decimal_to_base-library function)</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decimal_to_base <font color="#000080">[target]</font> = <font color="#000080">[decimal]</font>, <font color="#000080">[current_base]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[target]</font> = <font color="#0000ff">'-1'</font> <font color="#000080">[target]</font> = <font color="#0000ff">'Error'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem set the calculated value to the target field</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'text'</font>, <font color="#000080">[target]</font><br /><!-- br --><b>endproc</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- implementation of the procedure "calc_decimal_value" ---</font><br /><!-- br --><b>proc</b> calc_decimal_value<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>dec</b> <font color="#000080">[decimal]</font>, <font color="#000080">[target]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem calculating the decimal value from the currently activated number system</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[target]</font> = <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'text'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[target]</font> ! <font color="#0000ff">''</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem calculating the decimal value</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem (using the base_to_decimal-library function)</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base_to_decimal <font color="#000080">[decimal]</font> = <font color="#000080">[target]</font>, <font color="#000080">[current_base]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[decimal]</font> = <font color="#0000ff">'-1'</font> <font color="#000080">[decimal]</font> = <font color="#0000ff">'Error'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem set the calculated value to the decimal field</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'text'</font>, <font color="#000080">[decimal]</font><br /><!-- br --><b>endproc</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- implementation of the procedure "set_number_system" ---</font><br /><!-- br --><b>proc</b> set_number_system: <font color="#000080">[number_system]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem removing the checkmarks from the menu items</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Octal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Hexadecimal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Binary'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem updating the label in front of the target fields, check the</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem particular menu item again</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[number_system]</font> = <font color="#000080">[bin]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:l_target'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Binary value:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Binary'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[number_system]</font> = <font color="#000080">[oct]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:l_target'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Octal value:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Octal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[number_system]</font> = <font color="#000080">[hex]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:l_target'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Hexadecimal value:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'converter:Menu_Decimal -&gt; &Hexadecimal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem update the currently used base to the assigned value</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[current_base]</font> = <font color="#000080">[number_system]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem recalculate the target value</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;calc_target_value<br /><!-- br --><b>endproc</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem *****************</font><br /><!-- br --><font color="#808080">rem ** MAIN SCRIPT **</font><br /><!-- br --><font color="#808080">rem *****************</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- creating and setting up the main window ---</font><br /><!-- br -->newdialog <font color="#0000ff">'converter'</font>, <font color="#0000ff">'dialog'</font>, <font color="#0000ff">'1|1|270|100'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem set the dialog's title bar text and style</font><br /><!-- br -->letdialog <font color="#0000ff">'converter'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Bin/Oct/Hex Converter'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter'</font>, <font color="#0000ff">'style'</font>, <font color="#0000ff">'single'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem assign menu tree</font><br /><!-- br --><font color="#000080">[menu]</font> = <font color="#0000ff">'&Mode:Decimal -&gt; &Binary|Decimal -&gt; &Octal|Decimal -&gt; &Hexadecimal;;'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter'</font>, <font color="#0000ff">'menu'</font>, <font color="#000080">[menu]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- creating input fields and labels ---</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem label and input-field for the decimal number</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:l_decimal'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|8|100|22'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:l_decimal'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Decimal value:'</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|4|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'event_change'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem label and input-field for the number in the target number system</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:l_target'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|34|100|22'</font><br /><!-- br -->newdialog <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|30|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:target'</font>, <font color="#0000ff">'event_change'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem by default, use binary number system</font><br /><!-- br -->set_number_system <font color="#000080">[bin]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- centering the dialog on the screen and makeing it visible ---</font><br /><!-- br -->centerdialog <font color="#0000ff">'converter'</font><br /><!-- br -->letdialog <font color="#0000ff">'converter'</font>, <font color="#0000ff">'visible'</font>, <font color="#000080">[true]</font><br /><!-- br -->letdialog <font color="#0000ff">'converter:decimal'</font>, <font color="#0000ff">'focus'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- start the dialog event handling loop ---</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;rundialog <font color="#000080">[event]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[event]</font> = <font color="#0000ff">'change_converter:decimal'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;calc_target_value<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[event]</font> = <font color="#0000ff">'change_converter:target'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;calc_decimal_value<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[event]</font> = <font color="#0000ff">'click_converter:Menu_Decimal -&gt; &Binary'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_number_system <font color="#000080">[bin]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[event]</font> = <font color="#0000ff">'click_converter:Menu_Decimal -&gt; &Octal'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_number_system <font color="#000080">[oct]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[event]</font> = <font color="#0000ff">'click_converter:Menu_Decimal -&gt; &Hexadecimal'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_number_system <font color="#000080">[hex]</font>&nbsp;&nbsp;&nbsp;&nbsp;<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><br /><!-- br --><b>until</b> <font color="#000080">[event]</font> = <font color="#0000ff">'close_converter'</font><br /><!-- br --><b>end</b>[/code]
