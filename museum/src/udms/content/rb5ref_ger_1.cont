template_ref.html§0TITLE§1SYNTAX§1DESCRIPTION§1EXAMPLE§1REMARKS
rb5ref_ger_1_dec_reset.html§DEC, RESET§DEC variable1 [,variable2 [ ... variable<sup/>n</sup/>] ]<br><!-- br -->RESET variable1 [,variable2 [ ... variable<sup/>n</sup/>] ]§DEC deklariert eine oder mehrere neue Variablen im Script.<br><!-- br -->Wird DEC innerhalb einer Prozedur aufgerufen, so werden alle Variablen lokal deklariert. Bei einem Aufruf von DEC ausserhalb einer Prozedur sind die Variablen global im gesamten Script verfügbar. DEC kann auch zum Vordimensionieren eines Arrays verwendet werden.<br><!-- br --><br><!-- br -->RESET entleert oder löscht alle Elemente (oder eine Dimension mit allen Unter-Dimensionen) einer oder mehrerer Variablen/Arrays. Wird bei RESET ein Variablenname angegeben, so wird diese Variable komplett geleert (aber nicht aus dem Speicher entfernt). Ist die Variable ein Array, so werden alle Elemente und alle Dimensionen  dieses Arrays freigegeben und können neu zugewiesen werden.§<!-- CODE BEGIN --><b>dec</b> <font color="#000080">[a]</font>, <font color="#000080">[zahlen:'5']</font><br><!-- br --><br><!-- br --><font color="#000080">[a]</font> = <font color="#0000ff">'Ein Wert'</font><br><!-- br --><font color="#000080">[zahlen:'1']</font> = <font color="#0000ff">'5'</font><br><!-- br --><font color="#000080">[zahlen:'2']</font> = <font color="#0000ff">'13'</font><br><!-- br --><font color="#000080">[zahlen:'3']</font> = <font color="#0000ff">'21'</font><br><!-- br --><font color="#000080">[zahlen:'4']</font> = <font color="#0000ff">'79'</font><br><!-- br --><font color="#000080">[zahlen:'5']</font> = <font color="#0000ff">'2005'</font><br><!-- br --><br><!-- br -->echo <font color="#0000ff">'[a] hat den Wert '</font> # <font color="#000080">[a]</font><br><!-- br -->echo <font color="#0000ff">'Das Array hat '</font> # <font color="#000080">[zahlen:'0']</font> # <font color="#0000ff">' Einträge'</font><br><!-- br --><br><!-- br --><b>reset</b> <font color="#000080">[a]</font><br><!-- br --><b>reset</b> <font color="#000080">[zahlen]</font><br><!-- br --><br><!-- br -->echo <font color="#0000ff">'[a] hat jetzt den Wert '</font> # <font color="#000080">[a]</font><br><!-- br -->echo <font color="#0000ff">'Das Array hat jetzt '</font> # <font color="#000080">[zahlen:'0']</font> # <font color="#0000ff">' Einträge'</font><br><!-- br --><b>end</b><br><!-- br --><!-- CODE END -->§Es ist nicht mehr unbedingt notwendig, Variablen zu deklarieren, da diese automatisch deklariert werden sobald ihnen ein Wert zugewiesen wird. Die Verwendung von DEC ist allerdings in Prozeduren und bei der sauberen Script-Programmierung unerlässlich.<br><!-- br --><br><!-- br -->RESET dient rein zur manuellen Speicherverwaltung. Bei der Beendigung eines RapidBATCH-Scripts gibt RapidBATCH automatisch den reservierten Speicher wieder frei.
rb5ref_ger_1_if_elseif_else_endif.html§IF...ELSEIF...ELSE...ENDIF§IF Bedingung Anweisung<br><!-- br --><br><!-- br -->IF Bedingung<br><!-- br -->&nbsp;&nbsp;{Anweisungsblock}<br><!-- br -->[ELSEIF Bedingung<br><!-- br -->&nbsp;&nbsp;{Anweisungsblock}]<br><!-- br -->[ELSE<br><!-- br -->&nbsp;&nbsp;{Anweisungsblock}]<br><!-- br -->ENDIF§Die IF-Anweisung ermöglicht es, Anweisungen bedingt auszuführen. Sie prüft, ob eine Bedingung das Ergebnis TRUE (wahr) zurückliefert. Ist dies der Fall, kann eine nachfolgende Anweisung oder ein so genannter Anweisungsblock ausgeführt werden. Soll nur eine Anweisung ausgeführt werden, so schreibt man diese direkt hinter die Bedingung, bei mehreren Anweisungen schreibt man den Anweisungsblock zwischen dem IF und einem ENDIF oder einem ELSE oder ELSEIF, wobei das ENDIF immer den gesamten IF-Block abschliesst. Wird ein ELSE angegeben, lassen sich alternativ Anweisungen ausführen, wenn die Bedingung des IFs das Ergebnis FALSE (falsch) liefert. Wird ein ELSEIF angegeben, lassen sich mehrere Bedingungen prüfen, wenn die erste Bedingung das Ergebnis FALSE liefert.<br><!-- br -->Es können beliebig viele ELSEIF-Blöcke in einem IF-Block vorkommen, jedoch ist nur ein IF und ein ELSE je Block erlaubt. Anweisungsblöcke können weitere IF-Blöcke beinhalten (verschachtelte IF-Blöcke).<br><!-- br --><br><!-- br -->Eine Bedingung ist ein Vergleich zweier Werte, wobei diese Werte auf gleich (=), ungleich (!), grösser-als (&gt;) und kleiner-als (&lt;) geprüft werden können. Zudem sind die Operatoren größer-gleich (&gt;=) und kleiner-gleich (&lt;=) möglich.<br><!-- br -->Um mehr als zwei Bedingungen bei einer IF-Anweisung zu überpüfen, lassen sich mehrere Bedingungen mit den logischen Operatoren UND (&) und ODER (|) verknüpfen, wobei der &-Operator nur TRUE zurückgibt, wenn alle mit diesem Operator verknüpften Bedingungen erfolgreich geprüft wurden. Beim |-Operator muss eine der beiden Bedingungen (oder auch beide) das Ergebnis TRUE liefern.§<!-- CODE BEGIN --><b>if</b> <font color="#000080">[a]</font> = <font color="#000080">[b]</font> echo <font color="#0000ff">'A ist gleich B!'</font><br><!-- br --><br><!-- br --><b>if</b> <font color="#000080">[a]</font> &gt;= <font color="#000080">[b]</font> echo <font color="#0000ff">'A ist größer oder gleich B!'</font><br><!-- br --><br><!-- br --><b>if</b> <font color="#000080">[password]</font> = <font color="#0000ff">'swordfish'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Login erfolgreich.'</font><br><!-- br --><b>else</b><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Falsches Passwort.'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br><!-- br --><b>endif</b><br><!-- br --><br><!-- br --><b>if</b> <font color="#000080">[a]</font> &lt; <font color="#0000ff">'10'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Fehler!'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br><!-- br --><b>elseif</b> <font color="#000080">[b]</font> &lt;= <font color="#0000ff">'5'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Alles in Ordnung!'</font><br><!-- br --><b>endif</b><br><!-- br --><br><!-- br --><font color="#808080">rem Logisches UND, liefert nur wahr, wenn beide Variablen den Wert 10 enthalten.</font><br><!-- br --><font color="#000080">[a]</font> = <font color="#0000ff">'10'</font><br><!-- br --><font color="#000080">[b]</font> = <font color="#000080">[a]</font><br><!-- br --><b>if</b> <font color="#000080">[a]</font> = <font color="#0000ff">'10'</font> & <font color="#000080">[b]</font> = <font color="#0000ff">'10'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'A und B haben beide den Wert 10!'</font><br><!-- br --><b>endif</b><br><!-- br --><br><!-- br --><font color="#808080">rem Logisches ODER, liefert nur wahr, wenn eine oder beide Variablen den Wert 10 enthalten.</font><br><!-- br --><font color="#000080">[a]</font> = <font color="#0000ff">'11'</font><br><!-- br --><font color="#000080">[b]</font> = <font color="#0000ff">'10'</font><br><!-- br --><b>if</b> <font color="#000080">[a]</font> = <font color="#0000ff">'10'</font> | <font color="#000080">[b]</font> = <font color="#0000ff">'10'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'A oder B hat den Wert 10!'</font><br><!-- br --><b>endif</b><br><!-- br --><br><!-- br --><font color="#808080">rem Komplexeres Beispiel zur Anwendung von logischen Operatoren</font><br><!-- br --><b>if</b> <font color="#000080">[a]</font> = <font color="#0000ff">'10'</font> & <font color="#000080">[b]</font> = <font color="#0000ff">'10'</font> | <font color="#000080">[a]</font> = <font color="#0000ff">'9'</font> & <font color="#000080">[b]</font> = <font color="#0000ff">'12'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Starte Taschenrechner...'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;call <font color="#0000ff">'c:\windows\calc.exe'</font>, <font color="#0000ff">'show'</font><br><!-- br --><b>endif</b><br><!-- br --><!-- CODE END -->§IF-Blöcke können beliebig ineinander verschachtelt werden.
rb5ref_ger_1_repeat_until_break_cont.html§REPEAT...[CONT] ... [BREAK] ... UNTIL§REPEAT<br><!-- br -->&nbsp;&nbsp;{Anweisungsblock}<br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;[CONT]<br><!-- br -->&nbsp;&nbsp;{Anweisungsblock}<br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;[BREAK]<br><!-- br -->&nbsp;&nbsp;{Anweisungsblock}<br><!-- br -->UNTIL Abbruchbedingung§Mit REPEAT ... UNTIL lässt sich eine fussgesteuerte Schleife programmieren. Diese Möglichkeit gestattet es, bestimmte Anweisungen wiederholt auszuführen, bis die bei UNTIL gegebene Bedingung erfolgreich geprüft wird.<br><!-- br --><br><!-- br -->Eine Bedingung (in diesem Fall eine Abbruchbedingung) ist ein Vergleich zweier Werte, wobei diese Werte auf gleich (=), ungleich (!), grösser-als (&gt;) und kleiner-als (&lt;) geprüft werden können. Zudem sind die Operatoren größer-gleich (&gt;=) und kleiner-gleich (&lt;=) möglich.<br><!-- br -->Um mehr als zwei Bedingungen bei einer UNTIL-Anweisung zu überpüfen, lassen sich mehrere Bedingungen mit den logischen Operatoren UND (&) und ODER (|) verknüpfen, wobei der &-Operator nur TRUE zurückgibt, wenn alle mit diesem Operator verknüpften Bedingungen erfolgreich geprüft wurden. Beim |-Operator muss eine der beiden Bedingungen (oder auch beide) das Ergebnis TRUE liefern.<br><!-- br --><br><!-- br -->Wird die Abbruchbedingung nicht erreicht, endet die Ausführung des Scripts in einer Endlos-Schleife.<br><!-- br --><br><!-- br -->Um eine Schleife vorzeitig zu verlassen, verwenden Sie die Anweisung BREAK.<br><!-- br -->Die Anweisung CONT bewirkt, dass die Schleife ohne vorherige Prüfung der bei UNTIL angegebenen Bedingung wiederholt wird (CONT bewirkt damit einen Rücksprung zum REPEAT der Schleife).§<!-- CODE BEGIN --><font color="#000080">[i]</font> = 0<br><!-- br --><b>repeat</b><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Durchlauf: '</font> # <font color="#000080">[i]</font><br><!-- br --><b>until</b> <font color="#000080">[i]</font> = <font color="#0000ff">'10'</font><br><!-- br --><br><!-- br --><font color="#808080">rem Schleifenbedingung mit Bedingungsverknüpfung</font><br><!-- br --><font color="#000080">[a]</font> = <font color="#0000ff">'0'</font><br><!-- br --><font color="#000080">[b]</font> = <font color="#0000ff">'0'</font><br><!-- br --><b>repeat</b><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[a]</font> + <font color="#0000ff">'1'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[b]</font> + <font color="#0000ff">'2'</font><br><!-- br --><b>until</b> <font color="#000080">[a]</font> &gt; <font color="#0000ff">'10'</font> & <font color="#000080">[b]</font> &gt; <font color="#0000ff">'20'</font><br><!-- br --><br><!-- br --><font color="#808080">rem Schleife mit BREAK-Anweisung</font><br><!-- br --><font color="#000080">[i]</font> = 0<br><!-- br --><b>repeat</b><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Verlassen der Schleife wenn [i] größer 5 ist</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[i]</font> &gt; <font color="#0000ff">'5'</font> <b>break</b><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Durchlauf: '</font> # <font color="#000080">[i]</font><br><!-- br --><b>until</b> <font color="#000080">[i]</font> = <font color="#0000ff">'10'</font><br><!-- br --><br><!-- br --><font color="#808080">rem Schleife mit CONT-Anweisung</font><br><!-- br --><font color="#000080">[i]</font> = 0<br><!-- br --><b>repeat</b><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Wenn [i] den Wert 5 enthält, Schleife wiederholen</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[i]</font> = <font color="#0000ff">'5'</font> <b>cont</b><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Durchlauf: '</font> # <font color="#000080">[i]</font><br><!-- br --><b>until</b> <font color="#000080">[i]</font> = <font color="#0000ff">'10'</font><br><!-- br --><!-- CODE END -->§REPEAT...UNTIL-Schleifen können beliebig ineinander verschachtelt werden.<br><!-- br --><br><!-- br -->Die Anweisungen BREAK und CONT dürfen nur innerhalb von Schleifen verwendet werden.
rb5ref_ger_1_goto.html§GOTO§GOTO label<br><!-- br -->.<br><!-- br -->.<br><!-- br -->.<br><!-- br -->%label§GOTO springt zu einem dort spezifizierten Label im Script. Dies ermöglicht äusserst komplexe Programme, da Anweisungen wiederholt ausgeführt oder übersprungen werden können. Ein Label ist durch ein vorangestelltes %-Zeichen im Code gekennzeichnet.<br><br><!-- br --><!-- br -->Seit RapidBATCH 5.0 ist es auch möglich, variable Werte an GOTO zu übergeben, d.h. der Name des Labels, welches angesprungen werden soll, kann eine Variable oder auch ein aus variablen und statischen Werten zusammengesetzter Label-Name sein.§<font color="#008000">include 'dialog.rb'</font><br><!-- br --><br><!-- br --><font color="#808080">rem Einfaches, statisches GOTO</font><br /><!-- br -->echo <font color="#0000ff">'Willkommen im GOTO-Testscript!'</font><br /><!-- br --><b>goto</b> <font color="#0000ff">'weiter1'</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'Diese Meldung wird niemals ausgegeben :('</font><br /><!-- br --><br /><!-- br -->%weiter1<br /><!-- br --><br /><!-- br --><font color="#808080">rem Ein dynamisches GOTO</font><br /><!-- br -->btnmenu <font color="#000080">[geschwindigkeit]</font> = <font color="#0000ff">'Wählen Sie eine Geschwindigkeit!'</font>, <font color="#0000ff">'30 km/h|60 km/h|120 km/h'</font><br /><!-- br --><br /><!-- br --><b>goto</b> <font color="#000080">[geschwindigkeit]</font><br /><!-- br --><br /><!-- br -->%30 km/h<br /><!-- br -->echo <font color="#0000ff">'Das ist aber sehr langsam!'</font><br /><!-- br --><b>goto</b> <font color="#0000ff">'weiter2'</font><br /><!-- br --><br /><!-- br -->%60 km/h<br /><!-- br -->echo <font color="#0000ff">'Das ist ganz okay!'</font><br /><!-- br --><b>goto</b> <font color="#0000ff">'weiter2'</font><br /><!-- br --><br /><!-- br -->%120 km/h<br /><!-- br -->echo <font color="#0000ff">'SEHR SCHNELL! Wollen Sie ein Rennen fahren?'</font><br /><!-- br --><br /><!-- br -->%weiter2<br /><!-- br -->echo <font color="#0000ff">'Weiterhin gute Fahrt mit Ihren '</font> # <font color="#000080">[geschwindigkeit]</font> # <font color="#0000ff">' ...'</font><!-- br -->§Der Name des Labels muss bei GOTO ohne das &quot;%&quot;-Zeichen angegeben werden!<br><!-- br -->Es ist nicht erlaubt, mit einem GOTO-Sprung aus einer oder in eine Prozedur zu springen. Ist dies der Fall, bricht die Scriptausführung mit einer entsprechenden Fehlermeldung ab. GOTO-Sprünge in andere Include-Dateien sind möglich. Sprünge können in alle Richtungen (ob vorwärts oder rückwärts) im Script durchgeführt werden.<br><br><!-- br -->Verwenden Sie die <a href="rb5ref_ger_1_gosub_resume.html">GOSUB-Anweisung</a>, um eine Sprungmarke als Unterprozedur aufzurufen.
rb5ref_ger_1_gosub_resume.html§GOSUB, RESUME§GOSUB label<br><!-- br -->.<br><!-- br -->.<br><!-- br -->.<br><!-- br -->%label<!-- br -->.<br><!-- br -->.<br><!-- br -->.<br><!-- br -->RESUME§GOSUB arbeitet ähnlich wie GOTO. Hier wird zu einem Label gesprungen, welches hier als Unterprogramm (Sub) angesehen wird. Sobald eine RESUME-Anweisung auftritt, wird das Script hinter dem letzten GOSUB-Aufruf fortgesetzt. Dies ermöglicht äusserst komplexe Programmkonstruktionen. GOSUB...RESUME-Konstruktionen lassen sich beliebig ineinander verschachteln (z.B. lassen sich aus Subs wiederum andere GOSUB-Sprünge durchführen).<br><br><!-- br --><!-- br -->Seit RapidBATCH 5.0 ist es auch möglich, variable Werte an GOSUB zu übergeben, d.h. der Name des Labels, welches angesprungen werden soll, kann eine Variable oder auch ein aus variablen und statischen Werten zusammengesetzter Label-Name sein.§<font color="#008000">include 'dialog.rb'</font><br><!-- br --><br><!-- br --><font color="#808080">rem Ein statischer GOSUB-Aufruf</font><br /><!-- br --><font color="#000080">[i]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>gosub</b> <font color="#0000ff">'square'</font><br /><!-- br --><b>until</b> <font color="#000080">[i]</font> = <font color="#0000ff">'10'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Auf zum nächsten Beispiel...</font><br /><!-- br --><b>goto</b> <font color="#0000ff">'weiter'</font><br /><!-- br --><br /><!-- br -->%square<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#000080">[i]</font> # <font color="#0000ff">' * '</font> # <font color="#000080">[i]</font> # <font color="#0000ff">' = '</font> # (<font color="#000080">[i]</font> * <font color="#000080">[i]</font>)<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>resume</b><br /><!-- br --><br /><!-- br -->%weiter<br /><!-- br --><font color="#808080">rem Ein dynamischer GOSUB-Aufruf mit einer Variablen</font><br /><!-- br --><font color="#808080">rem (Zur Laufzeit sieht dieses Beispiel genauso aus wie das von GOTO,</font><br /><!-- br --><font color="#808080">rem allerdings ist die Umsetzung hier komplett anders)</font><br /><!-- br --><br /><!-- br -->btnmenu <font color="#000080">[geschwindigkeit]</font> = <font color="#0000ff">'Wählen Sie eine Geschwindigkeit!'</font>, <font color="#0000ff">'30 km/h|60 km/h|120 km/h'</font><br /><!-- br --><br /><!-- br --><b>gosub</b> <font color="#000080">[geschwindigkeit]</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'Weiterhin gute Fahrt mit Ihren '</font> # <font color="#000080">[geschwindigkeit]</font> # <font color="#0000ff">' ...'</font><br /><!-- br --><b>halt</b><br /><!-- br --><br /><!-- br -->%30 km/h<br /><!-- br -->echo <font color="#0000ff">'Das ist aber sehr langsam!'</font><br /><!-- br --><b>resume</b><br /><!-- br --><br /><!-- br -->%60 km/h<br /><!-- br -->echo <font color="#0000ff">'Das ist ganz okay!'</font><br /><!-- br --><b>resume</b><br /><!-- br --><br /><!-- br -->%120 km/h<br /><!-- br -->echo <font color="#0000ff">'SEHR SCHNELL! Wollen Sie ein Rennen fahren?'</font><br /><!-- br --><b>resume</b><!-- br -->§Ein RESUME muss nicht gegeben sein. In solch einem Fall ist GOSUB äquivalent zu GOTO. Wird ein RESUME ohne ein vorheriges GOSUB angegeben, wird dieses ignoriert und die Scriptausführung hinter RESUME fortgesetzt.<br><br><!-- br -->In RapidBATCH 5 wird von GOSUB...RESUME-Konstruktionen abgeraten, da man hier Zugriff auf die weitaus professionelleren Möglichkeiten der modernen prozeduralen Programmierung mit Hilfe der Anweisungen <a href="rb5ref_ger_1_proc_endproc.html">PROC...ENDPROC</a> oder <a href="rb5ref_ger_1_func_endfunc.html">FUNC...ENDFUNC</a> hat.<br>GOSUB...RESUME-Konstruktionen können aber bei der Implementierung von Ereignis-Routinen von eigenen Dialogen sehr von Nutzen sein.
rb5ref_ger_1_proc_endproc.html§PROC...ENDPROC§PROC Prozedurname [: Parameter-Liste]<br><!-- br -->&nbsp;&nbsp;{Anweisungsblock}<br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;[RET]<br><!-- br -->&nbsp;&nbsp;{Anweisungsblock}<br><!-- br -->ENDPROC§Definiert eine benutzerdefinierte Prozedur.<br><!-- br --><br><!-- br -->Prozeduren werden implementiert, um mehrere RapidBATCH-Anweisungen zu einem neuen Befehl zusammenzufassen, der im Script verwendet werden kann. Eine Prozedur kann einen beliebigen Namen sowie eine optionale und beliebige Anzahl an Parametervariablen besitzen, die beim Aufruf der Prozedur als lokale Prozedurvariablen behandelt werden. Mit Hilfe der Pointerfunktionalität können auch Zeiger auf Arrays und Variablen an die Prozedur als lokale Variablen übergeben und verarbeitet werden.<br><!-- br --><br><!-- br -->Mit der RET-Anweisung kann eine Prozedur vorzeitig beendet werden; Hingegen zu Funktionen ist bei in Prozeduren verwendeten RET-Anweisungen kein Rückgabewert erlaubt.<br><!-- br --><br><!-- br -->Eine Prozedur kann wiederum andere Prozeduren/Funktionen oder sich selbst rekursiv aufrufen. Funktions-/Prozedurdeklarationen in Prozeduren sind nicht erlaubt.§<!-- CODE BEGIN --><font color="#808080">rem Implementation der Prozedur "berechne"</font><br><!-- br --><b>proc</b> berechne: <font color="#000080">[a]</font>, <font color="#000080">[b]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>dec</b> <font color="#000080">[text]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[text]</font> # <font color="#000080">[a]</font> # <font color="#0000ff">' + '</font> # <font color="#000080">[b]</font> # <font color="#0000ff">' = '</font> # (<font color="#000080">[a]</font> + <font color="#000080">[b]</font>) # <font color="#000080">[new_line]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[text]</font> # <font color="#000080">[a]</font> # <font color="#0000ff">' - '</font> # <font color="#000080">[b]</font> # <font color="#0000ff">' = '</font> # (<font color="#000080">[a]</font> - <font color="#000080">[b]</font>) # <font color="#000080">[new_line]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[text]</font> # <font color="#000080">[a]</font> # <font color="#0000ff">' * '</font> # <font color="#000080">[b]</font> # <font color="#0000ff">' = '</font> # (<font color="#000080">[a]</font> * <font color="#000080">[b]</font>) # <font color="#000080">[new_line]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[text]</font> # <font color="#000080">[a]</font> # <font color="#0000ff">' / '</font> # <font color="#000080">[b]</font> # <font color="#0000ff">' = '</font> # (<font color="#000080">[a]</font> / <font color="#000080">[b]</font>) # <font color="#000080">[new_line]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[text]</font> # <font color="#000080">[a]</font> # <font color="#0000ff">' ~ '</font> # <font color="#000080">[b]</font> # <font color="#0000ff">' = '</font> # (<font color="#000080">[a]</font> ~ <font color="#000080">[b]</font>)<br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#000080">[text]</font><br><!-- br --><b>endproc</b><br><!-- br --><br><!-- br --><font color="#808080">rem Aufruf der Prozedur "berechne"</font><br><!-- br -->berechne <font color="#0000ff">'10'</font>, <font color="#0000ff">'5'</font><br><!-- br --><br><!-- br --><font color="#808080">rem Implementation der Prozedur "ausgabe_array" mit Übergabe eines Array-Pointers</font><br><!-- br --><b>proc</b> ausgabe_array: <font color="#000080">[*array]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>dec</b> <font color="#000080">[i]</font>,<font color="#000080">[text]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[array:'0']</font> = <font color="#0000ff">'0'</font> <b>ret</b> <br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>repeat</b><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[text]</font> # <font color="#0000ff">'Index '</font> # <font color="#000080">[i]</font> # <font color="#0000ff">': '</font> # <font color="#000080">[array[i]</font>] # <font color="#000080">[new_line]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>until</b> <font color="#000080">[i]</font> = <font color="#000080">[array'0']</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#000080">[text]</font><br><!-- br --><b>endproc</b><br><!-- br --><br><!-- br --><font color="#000080">[test:'1']</font> = <font color="#0000ff">'Array Wert 1'</font><br><!-- br --><font color="#000080">[test:'2']</font> = <font color="#0000ff">'Array Wert 2'</font><br><!-- br --><font color="#000080">[test:'3']</font> = <font color="#0000ff">'Array Wert 3'</font><br><!-- br --><font color="#000080">[test:'4']</font> = <font color="#0000ff">'Array Wert 4'</font><br><!-- br --><br><!-- br --><font color="#808080">rem Aufruf der Prozedur "ausgabe_array"</font><br><!-- br -->ausgabe_array <font color="#000080">[test]</font><br><!-- br --><b>end</b><br><!-- br --><!-- CODE END -->§Um eine Funktion zu implementieren, verwenden Sie <a href="rb5ref_ger_1_func_endfunc.html">FUNC...ENDFUNC</a>.<br><!-- br --><br><!-- br -->Mehrere Prozeduren und Funktionen können als Bibliothek in eine Script-Datei implementiert werden, die dann mit Hilfe der <a href="rb5ref_ger_1_include.html">INCLUDE</a>-Anweisung in andere RapidBATCH-Scripts, die diese Prozeduren verwenden, eingebunden wird.<br><!-- br --><br><!-- br -->Eine Prozedur kann nicht vor ihrer Definition aufgerufen werden.<br><!-- br --><br><!-- br -->RET kann nicht ausserhalb einer Prozedur oder Funktion verwendet werden.
rb5ref_ger_1_func_endfunc.html§FUNC...ENDFUNC§FUNC Funktionsname [:Parameter-Liste]<br><!-- br -->&nbsp;&nbsp;{Anweisungsblock}<br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;[RET [Rückgabewert] ]<br><!-- br -->&nbsp;&nbsp;{Anweisungsblock}<br><!-- br -->ENDFUNC§Definiert eine benutzerdefinierte Funktion.<br><!-- br --><br><!-- br -->Funktionen werden implementiert, um mehrere RapidBATCH-Anweisungen zu einer neuen Funktion zusammenzufassen, die im Script verwendet werden kann. Eine Funktion kann einen beliebigen Namen sowie eine optionale und beliebige Anzahl an Parametervariablen besitzen, die beim Aufruf der Funktion als lokale Funktionsvariablen behandelt werden. Mit Hilfe der Pointerfunktionalität können auch Zeiger auf Arrays und Variablen an die Funktion als lokale Variablen übergeben und verarbeitet werden.<br><!-- br -->Funktionen haben Grundsätzlich einen Rückgabewert, d.h. beim Aufruf einer benutzerdefinierten Funktion muss eine Rückgabevariable (Return-Variable) äquivalent Funktionsaufrufen von RapidBATCH build-in Funktionen angegeben werden.<br><!-- br -->Um einen Wert zurückzugeben, verwenden Sie die RET-Anweisung, die als Parameter den zurückzugebenden Wert erwartet. Wird in einer Funktion eine RET-Anweisung ohne Parameter verwendet, so gibt die Funktion einen Leerstring an die Rückgabevariable zurück.<br><!-- br --><br><!-- br -->Eine Funktion kann wiederum andere Funktionen/Prozeduren oder sich selbst rekursiv aufrufen. Funktions-/Prozedurdeklarationen in Funktionen sind nicht erlaubt.§<!-- CODE BEGIN --><font color="#808080">rem Definition der Funktion "quadrat"</font><br><!-- br --><b>func</b> quadrat: <font color="#000080">[wert]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>ret</b> <font color="#000080">[wert]</font> * <font color="#000080">[wert]</font><br><!-- br --><b>endfunc</b><br><!-- br --><br><!-- br --><font color="#808080">rem Aufruf der Funktion "quadrat"</font><br><!-- br -->quadrat <font color="#000080">[ergebnis]</font> = <font color="#0000ff">'4'</font><br><!-- br -->echo <font color="#0000ff">'Ergebnis: '</font> # <font color="#000080">[ergebnis]</font><br><!-- br --><br><!-- br --><font color="#808080">rem Definition der Funktion "fakultaet"</font><br><!-- br --><b>func</b> fakultaet: <font color="#000080">[x]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>dec</b> <font color="#000080">[res]</font><br><!-- br --><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[x]</font> = <font color="#0000ff">'0'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[res]</font> = <font color="#0000ff">'1'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem Rekursiver Aufruf von "fakultaet"</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fakultaet <font color="#000080">[res]</font> = <font color="#000080">[x]</font> - <font color="#0000ff">'1'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[res]</font> * <font color="#000080">[x]</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br><!-- br --><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>ret</b> <font color="#000080">[res]</font><br><!-- br --><b>endfunc</b><br><!-- br --><br><!-- br --><font color="#808080">rem Aufruf der Funktion "fakultaet"</font><br><!-- br -->fakultaet <font color="#000080">[ergebnis]</font> = <font color="#0000ff">'4'</font><br><!-- br --><br><!-- br -->echo <font color="#0000ff">'Die Fakultät von 4 ist '</font> # <font color="#000080">[ergebnis]</font><br><!-- br --><b>end</b><br><!-- br --><!-- CODE END -->§Um eine Prozedur zu definieren, verwenden Sie <a href="rb5ref_ger_1_proc_endproc.html">PROC...ENDPROC</a>.<br><!-- br --><br><!-- br -->Mehrere Prozeduren und Funktionen können als Bibliothek in eine Script-Datei implementiert werden, die dann mit Hilfe der <a href="rb5ref_ger_1_include.html">INCLUDE</a>-Anweisung in andere RapidBATCH-Scripts, die diese Prozeduren/Funktionen verwenden, eingebunden wird.<br><!-- br --><br><!-- br -->Eine Funktion kann nicht vor ihrer Definition aufgerufen werden.<br><!-- br --><br><!-- br -->RET kann nicht ausserhalb einer Prozedur oder Funktion verwendet werden.
rb5ref_ger_1_halt.html§HALT§HALT§Beendet das Script sofort und gibt alle verwendeten Speicher- und Systemressourcen frei.§<!-- CODE BEGIN -->chdir <font color="#0000ff">'C:\Test'</font><br><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#0000ff">'-1'</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'C:\Test existiert nicht!'</font><br><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Script beenden</font><br><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br><!-- br --><b>endif</b><br><!-- br --><!-- CODE END -->§keine
rb5ref_ger_1_wait.html§WAIT§WAIT Millisekunden§Unterbricht die Scriptausführung für die angegebene Zeit an Millisekunden. 1000 Millisekunden entsprechen einer Sekunde.§<!-- CODE BEGIN -->shell <font color="#0000ff">'C:\windows\calc.exe'</font>, <font color="#0000ff">'show'</font><br><!-- br --><font color="#808080">rem Zwei Sekunden warten...</font><br><!-- br -->wait <font color="#0000ff">'2000'</font><br><!-- br -->echo <font color="#0000ff">'Viel Spass mit dem Calculator ;)'</font><br><!-- br --><b>end</b><br><!-- br --><!-- CODE END -->§keine
rb5ref_ger_1_rem.html§REM§REM Kommentar§REM markiert eine Kommentarzeile im Code, mit der das Script kommentiert werden kann. REM führt keine Aktion aus, sie teilt dem Compiler/Interpreter lediglich mit, dass diese Zeile ignoriert werden soll.§<!-- CODE BEGIN --><font color="#808080">rem Ausgabe des Textes "Hello World"</font><br><!-- br -->echo <font color="#0000ff">'Hello World'</font><br><!-- br --><b>end</b><br><!-- br --><!-- CODE END -->§Im mitgelieferten Scripteditor &quot;RapidBATCH Builder&quot; können größere Codeblöcke schnell und einfach mit der Tastenkombination Strg+R aus- und einkommentiert werden.
rb5ref_ger_1_include.html§INCLUDE, INCLUDE_ONCE§INCLUDE Includedatei<br><!-- br -->INCLUDE_ONCE Includedatei§INCLUDE ermöglicht die Importierung einer RapidBATCH-Scriptdatei in ein RapidBATCH-Script. Diese inkludierte Datei wird komplett an der Stelle, wo das INCLUDE steht, ausgeführt, d.h. es werden entsprechende Funktionen verfügar gemacht und Variablen zum aktuell ausgeführten Script hinzudeklariert.<br><!-- br --><br><!-- br -->Sinn und Zweck von Include-Dateien ist die Aufteilung eines Projektes in mehrere kleine Dateien und die Implementierung von Prozedur- und Funktionsbibliotheken. Man kann daher einmal eine Bibliothek schreiben und alle Funktionen und Prozeduren dieser Bibliothek mittels INCLUDE in jedem Script, wo die Funktionen gebraucht werden, verfügbar machen.<br><!-- br --><br><!-- br -->INCLUDE_ONCE hat denselben Zweck wie INCLUDE, nur wird hier das zu inkludierende Script wirklich nur ein mal ausgeführt. Kommt der Interpreter/Compiler ein weiteres Mal über solch eine Zeile mit selbem Dateinamen, so wird das Script nicht noch einmal importiert.§<!-- CODE BEGIN --><font color="#808080">rem Inkludieren der Array-Bibliothek</font><br><!-- br --><font color="#008000">include 'array.rb'</font><br><!-- br --><br><!-- br --><font color="#808080">rem Array füllen</font><br><!-- br --><font color="#000080">[test:'1']</font> = <font color="#0000ff">'Hello World'</font><br><!-- br --><font color="#000080">[test:'2']</font> = <font color="#0000ff">'Hello World'</font><br><!-- br --><font color="#000080">[test:'3']</font> = <font color="#0000ff">'Hello World'</font><br><!-- br --><br><!-- br --><font color="#808080">rem Aufruf der Bibliotheksprozedur "viewarray"</font><br><!-- br -->viewarray <font color="#000080">[test]</font><br><!-- br --><b>end</b><br><!-- br --><!-- CODE END -->§Als Dateiname kann keine Variable mit dem Dateinamen als Inhalt angegeben werden.<br><br><!-- br --><!-- br -->Wenn bei INCLUDE oder INCLUDE_ONCE ein relativer Pfad angegeben wurde, der vom Scriptverzeichnis aus nicht existiert, sucht RapidBATCH automatisch im Library-Verzeichnis (im RapidBATCH Installationsverzeichnis das Unterverzeichnis \LIB). Darin befinden sich einige Standardbibliotheken, die RapidBATCH als erweiterte Sprachbasis mitführt. Durch Kopieren einer Library in dieses Verzeichnis kann sie von allen Scripts auf dem System durch einfache Angabe des Dateinamens (ohne absoluten Pfad) importiert werden.<br><br><!-- br --><!-- br -->Wenn Sie automatisch bei jedem Script, welches von RapidBATCH ausgeführt wird, bereits vorab einige Libraries inkludieren möchten, tragen Sie einfach den entsprechenden Sourcecode in die Datei default.rb im \LIB-Verzeichnis ein. Diese Datei wird vom Interpreter und vom Compiler automatisch für jedes Script inkludiert, ohne einen expliziten Aufruf von INCLUDE oder INCLUDE_ONCE.
rb5ref_ger_1_ext.html§EXT§EXT Rückgabewert = DLL-Datei, Funktionsname [, Parameter<sup>1</sup> [ ..., Parameter<sup>n</sup>] ]§Ruft eine externe Funktion aus einer DLL-Bibliotheksdatei auf.<br /><br /><!-- br --><!-- br -->Mit EXT können daher selbst-entwickelte und spezielle Funktionalitäten in RapidBATCH verwendet und genutzt werden. Diese Funktionen werden in Programmiersprachen wie C, C++, Pascal oder Delphi realisiert.<br /><br /><!-- br --><!-- br -->Über EXT aufgerufene Funktionen müssen dem EXT-Schnittstellenformat entsprechen, ansonsten sind sie nicht korrekt aufrufbar. Das Format für eine Funktion (hier in der Programmiersprache C unter Verwendung des Visual C++ Compilers realisiert) ist wiefolgt definiert:<!-- br --><!-- br --><pre>int __declspec( dllexport ) _cdecl<br /><!-- br -->	FunctionToCallFromRapidBATCH( char** ret, char** parms )<br /><!-- br -->{<br /><!-- br -->	/*<br /><!-- br -->	Hier folgt der ausführbare Code ...<br /><!-- br -->	*/<br /><br /><!-- br --><!-- br -->	return 0;<br /><!-- br -->}</pre><!-- br --><!-- br -->Die Parameter, die einer externen Funktion übergeben werden, werden wiefolgt gehandhabt:<!-- br --><ul><!-- br --><li><b>char** ret</b><br /><!-- br -->Hierbei handelt es sich um einen Pointer, der entsprechend mit Speicher allokiert werden muß, wenn die Funktion einen Wert an eine RapidBATCH-Variable zurückgeben soll.</li><!-- br --><li><b>char** parms</b><br /><!-- br -->Bei diesem Pointer handelt es sich um ein Array-of-Char, in der jeder Eintrag einem Parameterwert entspricht, der beim Aufruf von EXT im RapidBATCH-Script übergeben wurde.</li><!-- br --></ul><!-- br --><!-- br -->Beispielcode für eine komplette DLL:<!-- br --><!-- br --><pre><!-- br -->Folgt...<!-- br --></pre>
