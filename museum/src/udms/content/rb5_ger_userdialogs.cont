template.html§0TITLE§1CONTENT
rb5_ger_userdialogs_1.html§Erstellung von Dialogfenstern§Mit RapidBATCH 5 ist es auch erstmals möglich, eigene Dialogfenster direkt in RapidBATCH zu implementieren. RapidBATCH verwendet dazu ein sehr einfaches, aber augeklügeltes System, welches es möglich macht, Dialogfenster zu erstellen und Dialogfensterelemente zu verändern und auszulesen.<br><!-- br --><br><!-- br -->Mit nur ingesamt fünf verschiedenen Anweisungen bzw. Funktionen haben Sie somit die Entwicklung eigener Windows-Programme mit und in RapidBATCH voll im Griff, und können so gut wie jede Art von Dialog und damit echte Windows-Anwendungen in RapidBATCH selber implementieren.<br><!-- br --><br><!-- br -->Im Grunde ist die Entwicklung von eigenen Dialogen in RapidBATCH eine simple und unkomplizierte Angelegenheit:<br><!-- br --><!-- br --><ul><!-- br -->	<li>Dialogelemente erzeugen</li><!-- br -->	<li>Werte-/Eigenschaften der Dialogelemente setzen</li><!-- br -->	<li>Dialogfenster anzeigen</li><!-- br -->	<li>Dialog starten, auf Ereignisse reagieren und Werte-/Eigenschaften der Dialogelemente auswerten</li><!-- br --></ul><!-- br --><!-- br -->Folgend dargestelltes Beispielscript führt genau diese Schritte durch; Es erstellt einen Dialog mit einem einzeiligen Eingabefenster und einem Button. Klickt der Benutzer den Button, so wird der im Textfeld eingegebene Text in einem Meldungsfenster ausgegeben.<br><!-- br --><br><!-- br --><!-- br -->[code]<font color="#808080">rem Widgets erzeugen</font><br /><!-- br -->newdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'DIALOG'</font>, <font color="#0000ff">'1|1|300|80'</font><br /><!-- br -->newdialog <font color="#0000ff">'myDialog:Eingabe'</font>, <font color="#0000ff">'INPUT'</font>, <font color="#0000ff">'10|1|273|25'</font><br /><!-- br -->newdialog <font color="#0000ff">'myDialog:Los'</font>, <font color="#0000ff">'BUTTON'</font>, <font color="#0000ff">'80|27|140|25'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Setzen der Werte/Eigenschaften</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'CAPTION'</font>, <font color="#0000ff">'Hello World'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Eingabe'</font>, <font color="#0000ff">'TEXT'</font>, <font color="#0000ff">'Dies ist ein Text!'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Los'</font>, <font color="#0000ff">'CAPTION'</font>, <font color="#0000ff">'Und &los...'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Dialog anzeigen</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'VISIBLE'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><b>repeat</b><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Dialog starten</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;rundialog <font color="#000080">[event]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Ereignis auswerten</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[event]</font> = <font color="#0000ff">'click_myDialog:Los'</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem Textfeld auslesen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[text]</font> = <font color="#0000ff">'myDialog:Eingabe'</font>, <font color="#0000ff">'TEXT'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Der Wert im Textfeld lautet: '</font> # <font color="#000080">[text]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><b>until</b> <font color="#000080">[event]</font> = <font color="#0000ff">'close_myDialog'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><!-- br --><div class="image"><img src="img/dlgapp_01.gif" alt="Benutzerdefiniertes Dialogfenster" title="Screenshot" /><br /><!-- br -->Script mit individuell programmiertem Dialog</div><!-- br --><!-- br -->Ich werde Sie nun Schritt-für-Schritt in diese neue Welt der schier unbegrenzten Möglichkeiten einführen, denn dieses neue, sehr effektive Feature, eigene Dialoge und Fenster zu programmieren, macht RapidBATCH nicht nur zu einer starken Script- und Automatisierungssprache sondern auch zu einem schnellen und unkomplizierten Werkzeug zur Entwicklung von echten, individuellen Windows-Anwendungen aller Art.<br><!-- br --><!-- br --><div class="remark"><!-- br -->Anmerkung: Folgend werde ich des öfteren das Wort &quot;Widget&quot; verwenden. Als Widget (eine Abkürzung für &quot;Window Gadget&quot;, zu deutsch &quot;Fenster Ding&quot;) bezeichne ich hier sowohl Dialogfenster als auch Dialogelemente wie z.B. Buttons, Eingabefelder usw.. Die Unterschiede zwischen Dialogfenstern und Dialogelementen werden später genauer erläutert.</div><!-- br --><!-- br --><div class="remark"><!-- br -->Hinweis: Mit der RapidBATCH Professional Edition haben Sie die Möglichkeit, Dialogfenster schnell &amp; unkompliziert mit dem mitgeliefertem Werkzeug &quot;RapidBATCH Visual Dialog Designer&quot; zu erstellen. Widgets können hier in einer Echtzeitumgebung erstellt, angeordnet und bearbeitet werden. Ist der Dialog fertig entworfen, generiert der Assistent den dafür nötigen RapidBATCH Code, den Sie lediglich um die Ereignisbehandlung der einzelnen Widgets erweitern brauchen. Zum Verständnis der Programmierung eigener Dialogfenster sollten Sie aber trotzdem dieses Kapitel durcharbeiten.<br><br><!-- br --><!-- br -->Der &quot;Visual Dialog Designer&quot; selbst ist komplett zu 100% in RapidBATCH geschrieben worden!<!-- br --></div><!-- br --><!-- br -->Um Widgets zu erzeugen verwenden wir die Anweisung NEWDIALOG. NEWDIALOG benötigt, wie im Beispielscript zu sehen, als Parameter ein so genanntes Widget-Label, welches man auch als Namen für das Widget ansehen kann; Über diesen Namen kann das Widget später angesprochen werden.<br><!-- br -->Des weiteren erwartet NEWDIALOG einen Widget-Typ, der angibt, welche Art von Widget wir erzeugen möchten (z.B. Dialogfenster, Button, einzeiliges Eingabefeld, mehrzeiliges Eingabefeld, usw.) sowie die Pixelkoordinaten und -dimensionen, um das Widget zu platzieren. Die Koordinaten werden dabei durch den bereits bekannten Standard-Listenseparator (normalerweise ein &quot;|&quot;-Zeichen (Pipe)) als String in der Form &quot;X-Koordinate|Y-Koordinate|Breite|Höhe&quot; angegeben.<br><!-- br --><br><!-- br -->In unserem Beispielscript erzeugen wir also mit der Anweisung<br><!-- br --><br><!-- br -->[code]newdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'DIALOG'</font>, <font color="#0000ff">'1|1|300|80'</font>[/code]<!-- br --><br><!-- br -->ein neues Widget vom Typ &quot;DIALOG&quot; (sprich: ein Dialog-Basisfenster) mit einer Breite von 300 Pixel und einer Höhe von 80 Pixel am linken oberen Bildschirmrand (X- und Y-Koordinaten 1|1). Dieses Dialogelement wird unter dem Namen &quot;myDialog&quot; angelegt, über den wir später auf das Element zugreifen können.<br><!-- br --><br><!-- br -->Die zwei darauffolgenden NEWDIALOG-Anweisungen<br><!-- br --><br><!-- br --><!-- br -->[code]newdialog <font color="#0000ff">'myDialog:Eingabe'</font>, <font color="#0000ff">'INPUT'</font>, <font color="#0000ff">'10|1|273|25'</font><br /><!-- br -->newdialog <font color="#0000ff">'myDialog:Los'</font>, <font color="#0000ff">'BUTTON'</font>, <font color="#0000ff">'80|27|140|25'</font>[/code]<!-- br --><!-- br --><br><!-- br -->erstellen ein einzeiliges Eingabefeld (Typ: &quot;INPUT&quot;) und einen Button (Typ: &quot;BUTTON&quot;) auf unserem Dialog-Basisfenster &quot;myDialog&quot;.<br><!-- br -->Dass diese Widgets auf dem Basisdialog &quot;myDialog&quot; platziert werden, ist an der Voranstellung von &quot;myDialog:&quot; beim Widget-Label erkennbar. Die Widgets werden daher unter genau diesem Dialoglabel angelegt; Sinn und Zweck des ganzen ist, dass jedes Dialogelement auf einem Dialog einmalig (d.h. mit einem einmaligen Namen) sein muss, denn es können auch zwei oder mehr Dialogfenster zur selben Zeit angezeigt werden. Diese Dialogelemente werden als &quot;Child-Elemente&quot; bezeichnet, sie stellen so zusagen die Kinder des Dialogs &quot;myDialog&quot; dar, da sie auf &quot;myDialog&quot; angezeigt und diesem Basisfenster hierarchisch untergeordnet sind.<br><!-- br -->Die Angabe der Pixelkoordinaten ist bei allen Child-Widgets relativ zur linken oberen Ecke des Fensters.<br><!-- br --><br><!-- br -->Nachdem wir nun die Widgets erzeugt haben, setzten wir für diese verschiedene Werte, in unserem Fall bekommt das Dialogfenster den Titel &quot;Hello World&quot;, der Button die Beschriftung &quot;Und los...&quot; und das Textfeld den Text &quot;Dies ist ein Text!&quot;.<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem Setzen der Werte/Eigenschaften</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'CAPTION'</font>, <font color="#0000ff">'Hello World'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Eingabe'</font>, <font color="#0000ff">'TEXT'</font>, <font color="#0000ff">'Dies ist ein Text!'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Los'</font>, <font color="#0000ff">'CAPTION'</font>, <font color="#0000ff">'Und &los...'</font>[/code]<!-- br --><br><!-- br -->Alle Werte werden mit Hilfe der Anweisung LETDIALOG gesetzt. LETDIALOG erwartet als Parameter das Label des Widgets, bei dem eine Eigenschaft gesetzt werden soll, die Bezeichnung der Eigenschaft, die gesetzt werden soll, sowie den entsprechenden Wert. Der Eigenschaftsbezeichner &quot;CAPTION&quot; setzt die Beschriftung eines Widgets, die Eigenschaft &quot;TEXT&quot; den Text im Editierbereich von Eingabefeldern; Welche Eigenschaften unterstützt werden ist von Widget zu Widget unterschiedlich; Ein Listenfeld kann beispielsweise keine Beschriftung (CAPTION) haben, ein Dialogfenster kann keine Liste eines Listenfeldes aufnehmen. Es ist also vom Typ des Widgets abhängig, was wie gesetzt wird. Wir werden jedoch später genauer darauf eingehen.<br><!-- br --><br><!-- br -->Mit der Zeile <br><!-- br --><br><!-- br -->[code]letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'VISIBLE'</font>, <font color="#000080">[true]</font>[/code]<!-- br --><br><!-- br -->machen wir zu guter letzt noch das Fenster sichtbar; Nur Dialogfenster-Widgets sind nach ihrer Erstellung mit NEWDIALOG unsichtbar, da es nicht empfehlenswert ist, das Basisfenster schon zur Anzeige zu bringen wenn noch nicht alle Dialogelemente erzeugt und gesetzt wurden.<br><!-- br --><br><!-- br --><div class="remark">Anmerkung: Wenn Sie eigene Dialoge in RapidBATCH programmieren, stellen Sie bitte immer sicher, dass das Basisfenster auf sichtbar gesetzt wird, bevor Sie die Funktion RUNDIALOG (zu der wir gleich kommen werden) aufrufen; Ist dies nicht der Fall, wartet das Script solange, bis ein Ereignis auf dem nicht-sichtbaren Fenster geschieht; Und das wird nie der Fall sein, denn wie soll man zum Beispiel auf einem nicht-sichtbaren Fenster etwas anklicken?</div><!-- br --><br><!-- br -->Die soeben schon erörterte Funktion RUNDIALOG startet nun eine interne Warteschleife, die auf Ereignisse vom Dialogfenster wartet.<br><!-- br --><br><!-- br -->[code]rundialog <font color="#000080">[event]</font> = <font color="#0000ff">'0'</font>[/code]<!-- br --><br><!-- br -->Wenn nun beispielsweise ein Button gedrückt wurde, wird ein Ereignis (Event) ausgelöst. Die Funktion gibt in diesem Fall einen String im Format &quot;Ereignis_Widget-Label&quot; zurück. In unserem Script wird z.B. der String &quot;click_myDialog:Los&quot; zurückgegeben, wenn der &quot;Und Los...&quot;-Button, den wir zuvor definiert haben, angeklickt wurde.<br><!-- br -->Die bei RUNDIALOG als Parameter übergebene Zahl ist die Anzahl an Millisekunden, die gewartet wird, bis ein optionaler Timeout eintritt (1 Sekunde entspricht 1000 Millisekunden). Dies bedeutet, dass das Fenster nur für eine bestimmte Zeit auf Ereignisse wartet. Tritt kein Ereignis ein, wird der Timeout ausgelöst - die Funktion gibt dann einen Leerstring zurück. In unserem Fall aber ist der Millisekunden Wert 0, d.h. RUNDIALOG hat keinen Timeout und wartet solange, bis irgendetwas mit oder auf dem Dialog passiert.<br><!-- br --><br><!-- br -->Im darauffolgenden IF-Block überprüfen wir nun diesen von RUNDIALOG zurückgegebenen Event-String; Wenn also &quot;click_myDialog:Los&quot; eintrat, lesen wir mit der GETDIALOG-Funktion den Text des Textfeldes aus und geben ihn mit Hilfe der ECHO-Anweisung aus.<br><!-- br --><br><!-- br -->[code]getdialog <font color="#000080">[text]</font> = <font color="#0000ff">'myDialog:Eingabe'</font>, <font color="#0000ff">'TEXT'</font><br /><!-- br -->echo <font color="#0000ff">'Der Wert im Textfeld lautet: '</font> # <font color="#000080">[text]</font>[/code]<!-- br --><br><!-- br -->GETDIALOG ist sozusagen die umgekehrte Version von LETDIALOG: Hier lesen wir eine bestimmte Eigenschaft des ebenfalls bei der Funktion spezifizierten Dialoglabels aus, in diesem Fall die Eigenschaft &quot;TEXT&quot;.<br><!-- br --><br><!-- br -->Mit der abschließenden UNTIL-Anweisung wird gewährleistet, dass RUNDIALOG solange wieder neu aufgerufen wird, bis der Benutzer den Schließen-Button des Basisfensters klickt. Ist dies der Fall, gibt RUNDIALOG den Ereignis-String &quot;close_myDialog&quot; zurück, auf den wir entsprechend abprüfen:<br><!-- br --><br><!-- br -->[code]<b>repeat</b><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Dialog starten</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;rundialog <font color="#000080">[event]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Ereignis auswerten</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[event]</font> = <font color="#0000ff">'click_myDialog:Los'</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem Textfeld auslesen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[text]</font> = <font color="#0000ff">'myDialog:Eingabe'</font>, <font color="#0000ff">'TEXT'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Der Wert im Textfeld lautet: '</font> # <font color="#000080">[text]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><b>until</b> <font color="#000080">[event]</font> = <font color="#0000ff">'close_myDialog'</font>[/code]<!-- br --><br><!-- br -->Ich denke, dass Sie hiermit nun das grobe Verarbeitungskonzept von benutzerdefinierten Dialogen in RapidBATCH verstanden haben. Im nächsten Abschnitt werden wir genauer auf die verschiedenen Dialogelemente sowie ihre Eigenschaften und Ereignisse eingehen.
rb5_ger_userdialogs_2.html§Die Widgets im Überlick§Zur Entwicklung von individuellen Dialogfenstern mit und in RapidBATCH stehen ihnen über 15 unterschiedliche Widgets mit zahlreichen Eigenschaften und Events zur Verfügung. In diesem Abschnitt wird jedes verfügbare Widget ausführlich vorgestellt.<br /><br /><!-- br --><!-- br --><!-- <!-- br --><div class="image"><!-- br -->	<img src="img/dialog_elements.gif" alt="Ein Screenshot der Dialog-Widgets" alt="Dialog-Widgets im Überblick" /><br /><!-- br -->	Ein Dialogfenster mit allen verfügbaren Widgets	<!-- br --></div><!-- br -->--><!-- br --><!-- br --><table><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_dialog.gif" alt="Screenshot eines Dialog-Widgets" title="DIALOG" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>DIALOG</b><br /><br /><!-- br -->			Ein Dialogfenster ist ein Widget, welches als Vaterwidget für alle weiteren Widgets (z.B. Buttons, Eingabefelder, usw.) agiert. Dieses Dialogfenster kann verschiedene Fensterstyles annehmen und besitzt eine Titelleiste mit einem frei definierbaren Text. Zusätzlich stellt dieses Widget auch Status- und Menübars bereit. Es können meherere Dialogfenster zur selben Zeit angelegt und angezeigt werden.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_button.gif" alt="Screenshot eines Button-Widgets" title="BUTTON" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>BUTTON</b><br /><br /><!-- br -->			Ein Button (zu deutsch: Knopf) stellt eine Schaltfläche auf einem Dialog bereit. Buttons werden verwendet, um bestimmte Aktionen auszulösen. Sie können mit einem Text (CAPTION-Attribut) ausgestattet werden.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_imagebutton.gif" alt="Screenshot eines IMAGEBUTTON-Widgets" title="IMAGEBUTTON" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>IMAGEBUTTON</b><br /><br /><!-- br -->			Ein IMAGEBUTTON-Widget stellt eine zum Button-Widget äquivalente Schaltfläche auf einem Dialog bereit. Allerdings wird hier ein externes Bitmap-Bild (Dateiendung .BMP) anstatt eines Textes angezeigt.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_label.gif" alt="Screenshot eines Label-Widgets" title="LABEL" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>LABEL</b><br /><br /><!-- br -->			Labels (LABEL-Widgets) werden benutzt, um andere Widgets, wie z.B. Eingabefelder zu beschriften. Der jeweilige Text wird über das CAPTION-Attribut gelesen oder gesetzt.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_input.gif" alt="Screenshot eines Input-Widgets" title="INPUT" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>INPUT</b><br /><br /><!-- br -->			Ein INPUT-Widget stellt ein einzeiliges Texteingabefeld bereit. Diese Widgets werden verwendet, um beispielsweise Zahlen oder einzeilige Werte (z.B. Ortsnamen) einlesen zu können. Der Text kann über das TEXT-Attribut ausgelesen oder gesetzt werden, ebenso ist eine automatische Positionierung des Cursors bzw. des ausgewählten Textes mit dem SELPOS-Attribut möglich. Das SELECTION-Attribut gibt den selektierten Text zurück bzw. ersetzt ihn.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_pwd.gif" alt="Screenshot eines Pwd-Widgets" title="PWD" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>PWD</b><br /><br /><!-- br -->			Ein PWD-Widget stellt ein einzeiliges Passworteingabefeld bereit. Diese Widgets werden verwendet, um beispielsweise Passwörter oder Werte maskiert abzufragen, d.h. dass die Werte vom Anwender selbst bzw. auf dem Bildschirm nicht sichtbar sind. Die Benutzung dieses Widgets ist äquivalent zu der des INPUT-Widgets.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_edit.gif" alt="Screenshot eines Edit-Widgets" title="EDIT" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>EDIT, EDIT_LINEWRAP</b><br /><br /><!-- br -->			Ein EDIT-Widget stellt ein mehrzeiliges Texteingabefeld bereit. Diese Widgets können als kleine Texteditoren zur Bearbeitung und Darstellung von größeren Texten auf einem Dialog verwendet werden. Die Benutzung dieses Widgets ist äquivalent zu der des INPUT-Widgets.<!-- br --><br /><!-- br --><br /><!-- br -->Widgets vom Typ EDIT_LINEWRAP haben die Besonderheit, dass nur eine vertikale Scrollbar existiert. Alle Zeilen, die über die Breite des EDIT_LINEWRAP-Widgets hinausschießen werden dabei automatisch umgebrochen. Beim Auslesen des Widgets sind allerdings nur wirkliche Zeilenumbrüche, die der Benutzer manuell eingegeben hat, vorhanden. Vorteil von EDIT_LINEWRAP-Widgets ist, dass diese Widgets für die Eingabe von fließenden Texten, wie z.B. HTML-Code, äusserst effizient und ergonomischer sind. Der Text kann daher nur bei entsprechender Textlänge vertikal gescrollt werden.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_option.gif" alt="Screenshot eines Option-Widgets" title="OPTION" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>OPTION</b><br /><br /><!-- br -->			Ein OPTION-Widget stellt eine so genannte &quot;Checkbox&quot; bereit. Dies ist ein Kästchen, welches mit einem Häcken versehen werden kann. OPTION-Widgets werden benutzt, um die Auswahl von Optionen zu ermöglichen, die der Benutzer ein- oder ausschalten kann. Mit Hilfe des CHECKED-Attributes kann der Häkchen-Status des OPTION-Widgets gesetzt bzw. ausgelesen werden (0 = gehakt, -1 nicht gehakt).<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_radio.gif" alt="Screenshot eines Radio-Widgets" title="RADIO" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>RADIO</b><br /><br /><!-- br -->			Ein RADIO-Widget stellt einen so genannten Radio-Button bereit. Dies ist ein rundes Knöpfchen, welches mit einem Punkt &quot;gesetzt&quot; (aktiviert) werden kann. RADIO-Widgets werden meistens zu visuellen Gruppen zusammengefügt, von denen jeweils nur ein Widget gesetzt werden kann (daher auch der Name, da die Funktionsweise der Knöpfe der eines alten Kofferradios nachempfunden ist!). Das Setzen bzw. Auslesen des Status, ob das Widget &quot;gehakt&quot; ist, ist äquivalent zu der des OPTION-Widgets.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_list.gif" alt="Screenshot eines List-Widgets" title="LIST" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED</b><br /><br /><!-- br -->			LIST-Widgets sowie deren Derivate, LIST_SORTED, LIST_MULTI und LIST_MULTISORTED, stellen ein Listenauswahlfeld, wie beim build-in LISTBOX-Dialog, als Widget bereit. LIST-Widgets stellen ihre Einträge so dar wie sie angegeben wurden, LIST_SORTED-Widgets sortieren die Einträge alphabetisch. Zum Füllen bzw. Auslesen der LIST-Widgets wird das ITEMS-Attribut verwendet, welches eine Liste von Einträgen, die jeweils durch Pipe-Zeichen von einander getrennten sind, verwendet. Der ausgewählte Eintrag wird mit dem SELECTION-Attribut gelesen bzw. bestimmt.<!-- br --><br><!-- br --><br><!-- br -->LIST_MULTI- und LIST_MULTISORTED-Widgets unterscheiden sich von den LIST- und LIST_SORTED-Widgets insofern, dass anstatt eines einzelnen Listeneintrags gleich mehrere oder alle Einträge selektiert werden können. Das SELECTION- bzw. SELINDEX-Attribut gibt in diesem Fall eine Liste an selektierten Einträgen zurück.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_combo.gif" alt="Screenshot eines Combo-Widgets" title="COMBO" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>COMBO</b><br /><br /><!-- br -->			COMBO-Widgets stellen eine Mischung aus INPUT-Widget und LIST-Widget dar. Es kann ein Text in das Eingabefeld editiert werden oder aus der Dropdown-Box, die durch Drücken des kleinen Buttons rechts neben dem Eingabefeld aufklappt, ausgewählt werden. Die Übergabe der Eintragsliste erfolgt äquivalent zum LIST- und LIST_SORTED-Widget. Zudem können alle Operationen wie Text lesen/setzen, Cursor setzen oder markierten Text lesen/ersetzen genau wie beim INPUT-Widget angewandt werden.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_static_combo.gif" alt="Screenshot eines Combo-Widgets" title="COMBO" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>STATIC_COMBO</b><br /><br /><!-- br -->			STATIC_COMBO-Widgets sehen genau wie COMBO-Widgets aus, allerdings lässt sich der gewählte Wert nicht editieren oder verändert. Es kann also nur aus einer statischen und vordefinierten Menge von Werten gewählt werden.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_image.gif" alt="Screenshot eines Image-Widgets" title="IMAGE" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>IMAGE</b><br /><br /><!-- br -->			Ein IMAGE-Widget ermöglicht das Anzeigen eines Bildes auf einem Dialogfenster. Das Bild wird mit Hilfe des IMAGE-Attributes gesetzt und automatisch auf die jeweilige Größe skaliert. Es können derzeit nur extern gespeicherte Bitmap-Bilder (Dateierweiterung .BMP) verwendet werden.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_progress.gif" alt="Screenshot eines Progress-Widgets" title="PROGRESS" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>PROGRESS</b><br /><br /><!-- br -->			PROGRESS-Widgets (Progressbars) werden verwendet, den Fortschritt einer Operation visuell als einen prozentualen Anteil darzustellen. Der prozentuale Anteil des Fortschrittsbalkens kann auf einen beliebigen Wert gesetzt werden.<!-- br -->		</td><!-- br -->	</tr><!-- br -->	<!-- ITEM --------------------------------------------------------------------------------------------------------------------><!-- br -->	<tr><!-- br -->		<td valign="top"><!-- br -->			<img src="img/widget_group.gif" alt="Screenshot eines Group-Widgets" title="GROUP" /><!-- br -->		</td><!-- br -->		<td  class="widget_desc"><!-- br -->			<b>GROUP</b><br /><br /><!-- br -->			GROUP-Widgets (Groupboxes) werden verwendet, um andere Widgets visuell zu gruppieren, d.h. eine gewisse Zusammengehörigkeit einer Widget-Gruppe darzustellen. Diese Widgets haben nur eine rein visuelle Funktion. Der Titel der Groupbox wird mit Hilfe des CAPTION-Attributes gesetzt.<!-- br -->		</td><!-- br -->	</tr><!-- br --></table>
rb5_ger_userdialogs_3.html§Entwicklung einer Beispielanwendung§Um einmal die Implementierung einer kleinen, kompletten Anwendung, welche mit einem benutzerdefinierten Dialogfenster arbeitet, zu demonstieren, werden wir in diesem Kapitel einen Zahlensysteme-Rechner programmieren. Dieser &quot;Bin/Okt/Hex Umrechner&quot;, wie ich ihn nenne, soll Dezimalzahlen in Binärzahlen, Oktalzahlen und Hexadezimalzahlen und umgekehrt umrechnen können.<br><br><!-- br --><!-- br -->Zur Berechnung der Zahlensysteme verwenden wir die Funktionen &quot;base_to_decimal&quot; und &quot;decimal_to_base&quot; aus der Bibliothek MATH.RB, da der Hauptschwerpunkt dieses Beispiels nicht beim Umrechnen der Zahlen, sondern beim Umgang mit den Dialogwidgets liegt.<br><br><!-- br --><!-- br -->Vorab aber trotzdem ein wenig Theorie am Beispiel der Umrechnung vom Dezimalzahlensystem in das Binärzahlensystem. Das Dezimalzahlensystem verwenden wir in unserem täglichen Gebrauch von Zahlen. Dezimalzahlen bestehen daher aus Ziffernfolgen von 0-9, sind also zur Basis 10 gehalten. Das Binärzahlensystem kennt nur zwei Ziffern, 0 und 1, und ist zur Basis 2 gehalten (daher auch manchmal der Begriff &quot;Dualzahlensystem&quot;). Auf niederigster Ebene besteht jedes Programm, jedes Zeichen und jeder Wert, der mit oder von einem Computer verarbeitet wird, aus Millionen solcher Folgen wie z.B. &quot;10011010010&quot;, was in dezimaler Schreibweise dem Wert &quot;1234&quot; entspricht. Errechnen lässt sich dieser binäre Wert recht simpel, indem man den Ausgangswert 1234 jeweils durch die Basis des Zahlensystems teilt, bei Dualzahlen jeweils durch 2. Erhält man einen Restwert mit Nachkommastelle, so wird eine 1 als Ziffer gesetzt, andernfalls eine 0. Kommt letztendlich als Restwert 0 heraus, ist die Zahl vollständig ins andere Zahlensystem übertragen (nachdem man sie noch einmal umgedreht hat (da die berechnete Zahl von rechts nach links aufgebaut wird)).<br><br><!-- br --><!-- br -->Unser Konvertierungsprogramm soll nun wie folgt aufgebaut werden: Ein Dialogfenster mit zwei Eingabefeldern, wobei das obere für die Aus- und Eingabe von Dezimalzahlen und das untere für die Aus- und Eingabe von Zahlen im jeweiligem Zahlensystem verwendet wird. In welches Zahlensystem umgerechnet wird, wird über ein Menü im Dialogfenster festgelegt, bei dem der jeweils aktuelle Umrechnungsmodus mit einem Häckchen markiert wird. Hier kann der Benutzer den Umrechnungsmodus wechseln. Das Programm soll jeweils vom Dezimal- ins eingestellte Zahlensystem als auch vom eingestellten Zahlensystem ins Dezimalsystem konvertieren können. Die Konvertierung soll &quot;live&quot; bereits während der Eingabe automatisch im jeweils umgekehrten Eingabefeld durchgeführt werden.<!-- br --><br><!-- br --><br><!-- br -->Diese ganzen Anforderungen an unser Programm stellen aber mit RapidBATCH gar kein Problem dar. In nicht mehr als 10 Minuten und einer Scriptlänge von etwa 120 Zeilen (inklusive entsprechender Kommentare und Leerzeilen) ist das komplette Programm fertig und lauffähig, wenn man bereits die entsprechende Erfahrung hat.<!-- br --><br><!-- br --><br><!-- br -->Im ersten Schritt bei der Entwicklung dieses Scripts entwerfen wir einen Prototypen. Ein Prototyp ist eine programmierte und lauffähige Version der Eingabemaske, jedoch ohne jegliche Funktionalität. Solch ein Prototyp ist auch eine bewährte Methode, die Widgets auf dem Fenster so anzuordnen, dass die Oberfläche auch ergonomisch und einheitlich aussieht.<br><br><!-- br --><!-- br -->[code]<!-- br --><font color="#808080">rem **************************************</font><br /><!-- br --><font color="#808080">rem ** Prototyp &quot;Bin/Okt/Hex Umrechner&quot; **</font><br /><!-- br --><font color="#808080">rem **************************************</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Erzeugen und Aufsetzen des Hauptfensters ---</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner'</font>, <font color="#0000ff">'dialog'</font>, <font color="#0000ff">'1|1|270|100'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Fenstertitel und Style setzen</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Bin/Okt/Hex Umrechner'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner'</font>, <font color="#0000ff">'style'</font>, <font color="#0000ff">'single'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Menübaum erzeugen</font><br /><!-- br --><font color="#000080">[menü]</font> # <font color="#0000ff">'&Modus:Dezimal -&gt; &Binär|Dezimal -&gt; &Oktal|Dezimal -&gt; &Hexadezimal;;'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner'</font>, <font color="#0000ff">'menu'</font>, <font color="#000080">[menü]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Erzeugung von Eingabefeldern und Labels ---</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Label und Eingabefeld für Dezimalzahl</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:l_dezimal'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|8|100|22'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:l_dezimal'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Dezimalwert:'</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|4|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Label und Eingabefeld für Zahl des jew. Zahlensystems</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:l_konvert'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|34|100|22'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:l_konvert'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Binärwert:'</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|30|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Fenster sichtbar machen</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner'</font>, <font color="#0000ff">'visible'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Warten auf Ereignis (ohne Ereignisbehandlung)</font><br /><!-- br -->rundialog <font color="#000080">[null]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><b>end</b><!-- br -->[/code]<!-- br --><!-- br --><div class="image"><img src="img/conv_proto.gif" alt="Prototyp des Zahlensystemekonverters" title="Screenshot" /><br /><!-- br -->Der bereits lauffähige Prototyp unseres Bin/Okt/Hex Umrechners</div><!-- br --><!-- br -->Wir werden nun Schritt-für-Schritt die einzelnen Abschnitte, in die der Prototyp eingeteilt ist, durchgehen.<br><br><!-- br -->Zuerst wird das Dialog-Basisfenster erzeugt mit eine Größe von 270x100 Pixel. In den darauf folgenden LETDIALOG-Anweisungen wird zuerst der Fenstertitel und anschließend ein so genannter Style, in unserem Fall der Style &quot;SINGLE&quot; für das Fenster gesetzt. Dieser Style ändert das Aussehen des Fensters, so dass kein Maximieren-Button mehr in der rechten oberen Ecke gegeben ist (da eine Maximierung des Fensters bei diesem kleinen Programm keinen Sinn ergibt). Andere Stylewerte können Sie der RapidBATCH-Sprachreferenz entnehmen.<br><!-- br --><br><!-- br -->Nachdem das Fensterstyle gesetzt wurde, weisen wir dem Fenster noch ein Menü zu. Dieses Menü wird als so genannter &quot;Menu-Descriptor&quot; übergeben. Dieser Descriptor definiert das Menü in einer einfachen Definitionssprache. In unserem Fall wird ein Hauptmenü &quot;Modus&quot; mit drei Untermenüpunkten (&quot;Dezimal -> Binär&quot;, &quot;Dezimal -> Oktal&quot; und &quot;Dezimal -> Hexadezimal&quot;) erzeugt. Mehr Informationen zum MENU-Attribut von LETDIALOG können Sie ebenfalls der Sprachreferenz entnehmen.<br><br><!-- br --><!-- br -->Im zweiten Abschnitt des Scripts erzeugen wir vier weitere Widgets, jeweils zwei Eingabefelder und zwei statische Texte, welche als Bezeichnungsfelder vor den Eingabefeldern angezeigt werden. Für die Eingabefelder setzen wir durch Verwendung des FONT-Attributes über LETDIALOG eine alternative Schriftart, hier &quot;Sans Serif&quot;, 10 Punkt, Fett.<br><br><br><!-- br --><!-- br -->Auf Basis dieses Prototypen implementieren wir nun die Funktionalitäten zu unserem Programm.<br><br><!-- br -->Als erstes importieren wir die RapidBATCH Bibliotheken MATH.RB, welche die Konvertierungsfunktionen &quot;decimal_to_base&quot; und &quot;base_to_decimal&quot; bereitstellt, sowie die DIALOG.RB, welche ein paar nützliche Prozeduren beinhaltet, wie z.B. die Prozedur &quot;centerdialog&quot;, die ein Dialogfenster auf dem Bildschirm zentriert. Das Importieren der Bibliotheken erfolgt als aller erstes im Programm mit Hilfe der INCLUDE-Anweisung.<br><br><!-- br --><!-- br -->[code]<!-- br --><font color="#808080">rem --- Importieren von Bibliotheks-Hilfsfunktionen ---</font><br /><!-- br --><font color="#008000">include 'math.rb'</font><br /><!-- br --><font color="#008000">include 'dialog.rb'</font><!-- br -->[/code]<!-- br --><!-- br -->Da die Funktionen decimal_to_base und base_to_decimal jeweils als zweiten Parameter einen String mit allen Ziffern des jeweiligen Zahlensystems erwarten (wobei die Anzahl der Ziffern gleichzeitig die Basis des Zahlensystems, in welches umgerechnet werden soll, definiert), deklarieren und füllen wir ebenfalls am Anfang unseres Prototypen-Programms entsprechende Variablen, die jeweils die Ziffern aller drei Zahlensysteme (Binär &quot;01&quot;, Oktal &quot;01234567&quot; und Hexadezimal &quot;0123456789ABCDEF&quot;) beinhalten. Eine Variable [aktuelle_basis] verwenden wir später, um die jeweils aktuell umzurechnende Basis für das Umrechnungsprogramm zu setzen.<br><br><!-- br --><!-- br -->[code]<!-- br --><font color="#808080">rem --- Globale Variablen (Basen und Ziffern der Zahlensysteme) ---</font><br /><!-- br --><b>dec</b> <font color="#000080">[bin]</font>, <font color="#000080">[okt]</font>, <font color="#000080">[hex]</font>, <font color="#000080">[aktuelle_basis]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Basis: 2 (Binärsystem)</font><br /><!-- br --><font color="#000080">[bin]</font> = <font color="#0000ff">'01'</font><br /><!-- br --><font color="#808080">rem Basis: 8 (Oktalsystem)</font><br /><!-- br --><font color="#000080">[okt]</font> = <font color="#0000ff">'01234567'</font><br /><!-- br --><font color="#808080">rem Basis: 16 (Hexadezimalsystem)</font><br /><!-- br --><font color="#000080">[hex]</font> = <font color="#0000ff">'0123456789ABCDEF'</font><!-- br -->[/code]<!-- br --><!-- br -->Bevor wir nun eine entsprechende Ereignisbehandlung für das Menü sowie die Eingabe und Umrechnung der Werte implementieren, programmieren wir zuerst zwei Prozeduren, um die Werte jeweils von Dezimal in das entsprechende Konvertierungssystem oder vom Konvertierungssystem in Dezimal umzurechnen. Der Einfachheit halber heißen diese Prozeduren berechne_Zielwert und berechne_Dezimalwert. Im Falle eines Fehlers (z.B. wenn eine ungültige Ziffer gefunden wurde) geben beide Umrechnungsfunktionen (base_to_decimal, decimal_to_base) den Wert '-1' zurück. Hier schreiben wir in das jeweilige Feld den Wert &quot;Fehleingabe&quot;, um den Benutzer zu informieren, dass er einen ungültigen Wert umzurechnen versucht.<br><br><!-- br --><!-- br -->[code]<!-- br --><font color="#808080">rem --- Implementation der Prozedur "berechne_Zielwert" ---</font><br /><!-- br --><b>proc</b> berechne_Zielwert<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>dec</b> <font color="#000080">[dezimal]</font>, <font color="#000080">[konvert]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Zahlensystemwert aus Dezimalwert errechnen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[dezimal]</font> = <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'text'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[dezimal]</font> ! <font color="#0000ff">''</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem Wert berechnen (mit der decimal_to_base-Bibliotheksfunktion)</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decimal_to_base <font color="#000080">[konvert]</font> = <font color="#000080">[dezimal]</font>, <font color="#000080">[aktuelle_basis]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[konvert]</font> = <font color="#0000ff">'-1'</font> <font color="#000080">[konvert]</font> = <font color="#0000ff">'Fehleingabe'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'text'</font>, <font color="#000080">[konvert]</font><br /><!-- br --><b>endproc</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Implementation der Prozedur "berechne_Dezimalwert" ---</font><br /><!-- br --><b>proc</b> berechne_Dezimalwert<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>dec</b> <font color="#000080">[dezimal]</font>, <font color="#000080">[konvert]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Dezimalwert aus Zahlensystemwert errechnen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[konvert]</font> = <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'text'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[konvert]</font> ! <font color="#0000ff">''</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem Wert berechnen (mit der base_to_decimal-Bibliotheksfunktion)</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base_to_decimal <font color="#000080">[dezimal]</font> = <font color="#000080">[konvert]</font>, <font color="#000080">[aktuelle_basis]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[dezimal]</font> = <font color="#0000ff">'-1'</font> <font color="#000080">[dezimal]</font> = <font color="#0000ff">'Fehleingabe'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'text'</font>, <font color="#000080">[dezimal]</font><br /><!-- br --><b>endproc</b><!-- br -->[/code]<!-- br --><!-- br -->Bevor wir uns auch noch die Mühe machen und später in der Ereignisbehandlung drei mal dasselbe (für jeden Umrechnungsfall, den man im Menü setzen kann) programmieren, entwickeln wir noch eine weitere Prozedur setze_Zahlensystem, der wir als Parameter eine der drei Zahlensystemdefinitionen, die wir zuvor in einer der Variablen gespeichert haben, zuweisen. Diese Prozedur entfernt zugleich alle Häckchen aus dem Menü und setzt anschließend für den jeweils korrekten Menüpunkt das Häckchen erneut. Das Setzen eines Häckchens für einen Menüpunkt erfolgt über das bei der Menüzuweisung automatisch generierte Menülabel, welches im Format &quot;<i>Dialogname</i>:Menu_<i>Menüpunkttext</i>&quot; generiert wird, und dem CHECKED-Attribut, welches auf [true] ('0') oder [false] ('-1') gesetzt werden kann.<br><!-- br --><!-- br -->Am Ende der Prozedur rufen wir direkt nochmal die oben implementierte Prozedur berechne_Zielwert auf, um direkt beim Auswählen eines Menüpunktes die Zahl, die im Dezimalfeld steht, in das ausgewählte Zahlensystem umzurechnen.<br><!-- br -->Ausserdem setzen wir vorher noch die vorhin definierte Variable [aktuelle_basis], die wiederum von berechne_Zielwert und berechne_Dezimalwert verwendet wird, auf das entsprechend übergebene Zahlensystem.<!-- br --><br><br><!-- br --><!-- br -->[code]<font color="#808080">rem --- Implementation der Prozedur "setze_Zahlensystem" ---</font><br /><!-- br --><b>proc</b> setze_Zahlensystem: <font color="#000080">[zahlensystem]</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Häckchen aus Menüpunkten entfernen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Oktal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Hexadezimal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Binär'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Zahlensystembezeichnung vor dem Eingabefeld sowie Häckchen im Menü setzen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[zahlensystem]</font> = <font color="#000080">[bin]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:l_konvert'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Binärwert:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Binär'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[zahlensystem]</font> = <font color="#000080">[okt]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:l_konvert'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Oktalwert:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Oktal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[zahlensystem]</font> = <font color="#000080">[hex]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:l_konvert'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Hexadezimalwert:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Hexadezimal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Aktuelle Basis auf übergebenes Zahlensystem setzen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[aktuelle_basis]</font> = <font color="#000080">[zahlensystem]</font><br /><!-- br --><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;berechne_Zielwert<br /><!-- br --><b>endproc</b>[/code]<!-- br --><!-- br -->Jetzt ist die Anwendung schon fast fertig. Was jetzt noch fehlt, ist eine Ereignisbehandlungsroutine.<br><br><!-- br --><!-- br -->Dazu erweitern bzw. modifizieren wir den Bereich, in dem wir die Eingabefelder erzeugen, insoweit, dass wir das CHANGE-Ereignis, welches Auftritt, wenn sich irgendetwas an dem Inhalt des Eingabefeldes verändert hat, einschalten. Bei der Erstellung eines Widgets vom Typ INPUT ist dieses Ereignis standardmäßig ausgeschaltet. Einschalten können wir es, indem wir bei LETDIALOG als Attributbezeichner den Wert EVENT_CHANGE auf [true] ('0') setzen. Ein weiteres Setzen dieses Attributes auf [false] (oder '-1') bewirkt die erneute Ausschaltung des Ereignisses für das jeweilige Widget.<br><!-- br -->Nach der Erzeugung der Widgets sowie Einschaltung der CHANGE-Ereignisse rufen wir hier auch bereits einmal unsere Prozedur setze_Zahlensystem mit der Variablen [bin] als Parameter auf, um direkt als Default-Umrechnungssystem das Binärzahlensystem zu bestimmen.<br><br><!-- br --><!-- br -->[code]<!-- br --><font color="#808080">rem --- Erzeugung von Eingabefeldern und Labels ---</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Label und Eingabefeld für Dezimalzahl</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:l_dezimal'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|8|100|22'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:l_dezimal'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Dezimalwert:'</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|4|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'event_change'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Label und Eingabefeld für Zahl des jew. Zahlensystems</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:l_konvert'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|34|100|22'</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|30|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'event_change'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br -->setze_Zahlensystem <font color="#000080">[bin]</font><!-- br -->[/code]<!-- br --><!-- br -->Zu guter Letzt zentrieren wir das Fenster auf dem Bildschirm (mit Hilfe der Prozedur centerdialog aus der Bibliothek DIALOG.RB), setzen den Eingabefokus beim Programmstart auf das Dezimalzahlen-Eingabefeld und bringen den Dialog zur Anzeige.<br><br><!-- br --><!-- br --><!-- br --><!-- br -->In der Ereignisbehandlungsroutine, die wir, wie in unserem ersten Script mit selbst-definiertem Dialogfenster, als eine REPEAT...UNTIL-Schleife definieren, prüfen wir nun die 6 Ereignisse, die mit oder auf dem Dialog ausgelöst werden können ab und rufen die entsprechenden Prozeduren auf. Bei der Änderung eines Wertes in den Eingabefeldern wird jeweils die Prozedur berechne_Zielwert oder berechne_Dezimalwert (je nachdem in welchem Feld man sich befindet) eingegeben, bei Auswahl eines Menüpunktes wird die Prozedur setze_Zahlensystem mit dem entsprechenden Zahlensystem aufgerufen. Fertig ist unser selbstgeschriebener &quot;Bin/Okt/Hex Umrechner&quot;!<!-- br --><!-- br --><!-- br --><div class="image"><img src="img/converter.gif" alt="Der Zahlensystemekonverter in Aktion" title="Screenshot" /><br /><!-- br -->Der Bin/Okt/Hex Umrechner ist fertig!</div><!-- br --><!-- br -->Der gesamte Quellcode:<!-- br --><!-- br --><br><br><!-- br -->[code]<!-- br --><font color="#808080">rem *******************************************</font><br /><!-- br --><font color="#808080">rem ** Bin/Okt/Hex Umrechner&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**</font><br /><!-- br --><font color="#808080">rem ** Umrechnungsprogramm für Zahlensysteme **</font><br /><!-- br --><font color="#808080">rem *******************************************</font><br /><!-- br --><font color="#808080">rem ** Copyright (C) 2005 by J.M. Meyer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**</font><br /><!-- br --><font color="#808080">rem *******************************************</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Importieren von Bibliotheks-Hilfsfunktionen ---</font><br /><!-- br --><font color="#008000">include 'math.rb'</font><br /><!-- br --><font color="#008000">include 'dialog.rb'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Globale Variablen (Basen und Ziffern der Zahlensysteme) ---</font><br /><!-- br --><b>dec</b> <font color="#000080">[bin]</font>, <font color="#000080">[okt]</font>, <font color="#000080">[hex]</font>, <font color="#000080">[aktuelle_basis]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Basis: 2 (Binärsystem)</font><br /><!-- br --><font color="#000080">[bin]</font> = <font color="#0000ff">'01'</font><br /><!-- br --><font color="#808080">rem Basis: 8 (Oktalsystem)</font><br /><!-- br --><font color="#000080">[okt]</font> = <font color="#0000ff">'01234567'</font><br /><!-- br --><font color="#808080">rem Basis: 16 (Hexadezimalsystem)</font><br /><!-- br --><font color="#000080">[hex]</font> = <font color="#0000ff">'0123456789ABCDEF'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Implementation der Prozedur "berechne_Zielwert" ---</font><br /><!-- br --><b>proc</b> berechne_Zielwert<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>dec</b> <font color="#000080">[dezimal]</font>, <font color="#000080">[konvert]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Zahlensystemwert aus Dezimalwert errechnen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[dezimal]</font> = <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'text'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[dezimal]</font> ! <font color="#0000ff">''</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem Wert berechnen (mit der decimal_to_base-Bibliotheksfunktion)</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decimal_to_base <font color="#000080">[konvert]</font> = <font color="#000080">[dezimal]</font>, <font color="#000080">[aktuelle_basis]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[konvert]</font> = <font color="#0000ff">'-1'</font> <font color="#000080">[konvert]</font> = <font color="#0000ff">'Fehleingabe'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'text'</font>, <font color="#000080">[konvert]</font><br /><!-- br --><b>endproc</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Implementation der Prozedur "berechne_Dezimalwert" ---</font><br /><!-- br --><b>proc</b> berechne_Dezimalwert<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>dec</b> <font color="#000080">[dezimal]</font>, <font color="#000080">[konvert]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Dezimalwert aus Zahlensystemwert errechnen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;getdialog <font color="#000080">[konvert]</font> = <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'text'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[konvert]</font> ! <font color="#0000ff">''</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem Wert berechnen (mit der base_to_decimal-Bibliotheksfunktion)</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base_to_decimal <font color="#000080">[dezimal]</font> = <font color="#000080">[konvert]</font>, <font color="#000080">[aktuelle_basis]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[dezimal]</font> = <font color="#0000ff">'-1'</font> <font color="#000080">[dezimal]</font> = <font color="#0000ff">'Fehleingabe'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'text'</font>, <font color="#000080">[dezimal]</font><br /><!-- br --><b>endproc</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Implementation der Prozedur "setze_Zahlensystem" ---</font><br /><!-- br --><b>proc</b> setze_Zahlensystem: <font color="#000080">[zahlensystem]</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Häckchen aus Menüpunkten entfernen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Oktal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Hexadezimal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Binär'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[false]</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Zahlensystembezeichnung vor dem Eingabefeld sowie Häckchen im Menü setzen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[zahlensystem]</font> = <font color="#000080">[bin]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:l_konvert'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Binärwert:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Binär'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[zahlensystem]</font> = <font color="#000080">[okt]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:l_konvert'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Oktalwert:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Oktal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[zahlensystem]</font> = <font color="#000080">[hex]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:l_konvert'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Hexadezimalwert:'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;letdialog <font color="#0000ff">'umrechner:Menu_Dezimal -&gt; &Hexadezimal'</font>, <font color="#0000ff">'checked'</font>, <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Aktuelle Basis auf übergebenes Zahlensystem setzen</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[aktuelle_basis]</font> = <font color="#000080">[zahlensystem]</font><br /><!-- br --><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;berechne_Zielwert<br /><!-- br --><b>endproc</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Erzeugen und Aufsetzen des Hauptfensters ---</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner'</font>, <font color="#0000ff">'dialog'</font>, <font color="#0000ff">'1|1|270|100'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Fenstertitel und Style setzen</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Bin/Okt/Hex Umrechner'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner'</font>, <font color="#0000ff">'style'</font>, <font color="#0000ff">'single'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Menübaum erzeugen</font><br /><!-- br --><font color="#000080">[menü]</font> # <font color="#0000ff">'&Modus:Dezimal -&gt; &Binär|Dezimal -&gt; &Oktal|Dezimal -&gt; &Hexadezimal;;'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner'</font>, <font color="#0000ff">'menu'</font>, <font color="#000080">[menü]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Erzeugung von Eingabefeldern und Labels ---</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Label und Eingabefeld für Dezimalzahl</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:l_dezimal'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|8|100|22'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:l_dezimal'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Dezimalwert:'</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|4|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'event_change'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Label und Eingabefeld für Zahl des jew. Zahlensystems</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:l_konvert'</font>, <font color="#0000ff">'label'</font>, <font color="#0000ff">'5|34|100|22'</font><br /><!-- br -->newdialog <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'input'</font>, <font color="#0000ff">'110|30|150|25'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'font'</font>, <font color="#0000ff">'Sans Serif|10|2'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:konvert'</font>, <font color="#0000ff">'event_change'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br -->setze_Zahlensystem <font color="#000080">[bin]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Dialogfenster auf dem Bildschirm zentrieren & anzeigen ---</font><br /><!-- br -->centerdialog <font color="#0000ff">'umrechner'</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner'</font>, <font color="#0000ff">'visible'</font>, <font color="#000080">[true]</font><br /><!-- br -->letdialog <font color="#0000ff">'umrechner:dezimal'</font>, <font color="#0000ff">'focus'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem --- Ereignisbehandlungsroutine starten ---</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;rundialog <font color="#000080">[ereignis]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[ereignis]</font> = <font color="#0000ff">'change_umrechner:dezimal'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;berechne_Zielwert<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[ereignis]</font> = <font color="#0000ff">'change_umrechner:konvert'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;berechne_Dezimalwert<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[ereignis]</font> = <font color="#0000ff">'click_umrechner:Menu_Dezimal -&gt; &Binär'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setze_Zahlensystem <font color="#000080">[bin]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[ereignis]</font> = <font color="#0000ff">'click_umrechner:Menu_Dezimal -&gt; &Oktal'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setze_Zahlensystem <font color="#000080">[okt]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[ereignis]</font> = <font color="#0000ff">'click_umrechner:Menu_Dezimal -&gt; &Hexadezimal'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setze_Zahlensystem <font color="#000080">[hex]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><br /><!-- br --><b>until</b> <font color="#000080">[ereignis]</font> = <font color="#0000ff">'close_umrechner'</font><br /><!-- br --><b>end</b><!-- br -->[/code]<!-- br --><!-- br -->
