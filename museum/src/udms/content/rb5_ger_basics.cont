template.html§0TITLE§1CONTENT
rb5_ger_basics_1.html§Ein einfaches Script§Bereits in der Einleitung haben wir Ihnen ein einfaches, zweizeiliges Script vorgestellt, welches den einfachen Aufbau eines in RapidBATCH programmierten Programms darstellen sollte:<br><!-- br --><br><!-- br -->[code]echo <font color="#0000ff">'Hallo, ich bin ein RapidBATCH-Script'</font><br /><!-- br --><b>end</b><!-- br -->[/code]<!-- br --><br><!-- br -->Um dieses Script auszuführen, müssen wir es erst einmal editieren und als RapidBATCH-Scriptdatei mit der Dateiendung .RB speichern.<br><!-- br -->Dazu sollten Sie den mitgelieferten Scripteditor RapidBATCH Builder benutzen, welcher Ihnen das komfortable Editieren von RapidBATCH-Scripts gestattet. Den Builder können Sie am einfachsten über das Startmenü (Start -> Programme -> RapidBATCH Personal Edition/RapidBATCH Professional Edition -> RapidBATCH 5.0) starten.<br><!-- br --><br><!-- br -->Nachdem Sie den RapidBATCH Builder gestartet haben, geben Sie dort den oben abgebildeten Quelltext ein.<!-- br --><!-- br --><div class="image"><img src="img/firstscript1.gif" alt="Erste Schritte im RapidBATCH Builder" title="RapidBATCH Builder" /><br /><!-- br -->Eingabe des Script-Codes im RapidBATCH Builder</div><!-- br --><!-- br -->Speichern Sie anschließend das Script in einem Verzeichnis Ihrer Wahl unter dem Dateinamen HELLO.RB (oder auch einem beliebigen anderen Dateinamen) ab. Nun kann das Script gestartet werden, indem Sie F5 drücken oder den Button &quot;Script starten&quot; in der Toolbar anklicken.<br><!-- br --><!-- br --><div class="image"><img src="img/firstscript2.gif" alt="Ausführung eines Scripts aus dem RapidBATCH Builder heraus" title="Ihr erstes RapidBATCH Script" /><br /><!-- br -->Ausführung des Scripts aus dem RapidBATCH Builder heraus</div><!-- br --><!-- br -->Herzlichen Glückwunsch zu Ihrem ersten, lauffähigen Script in RapidBATCH!<br><!-- br --><br><!-- br -->Wenn Sie im Besitz der RapidBATCH Professional Edition sind, können Sie Ihr Script durch Auswahl des Menüpunktes &quot;Script&quot; und dann &quot;Compilieren&quot; in eine ausführbare EXE-Programmdatei übersetzen. Diese EXE-Programmdatei kann als eigenständiges Programm auf jedem PC mit einem Betriebssystem ab Windows 95 ausgeführt werden. Das Programmicon der EXE-Datei ist mit einem individuellen Icon austauschbar, welches im Compiler-Optionsdialog ausgewählt werden kann.<!-- br --><!-- br --><div class="image"><img src="img/firstscript3.gif" alt="Compilierung eines RapidBATCH Scripts" title="Aufrufen des Script-Compilers" /><br /><!-- br -->Der RapidBATCH Script-Compiler zum Überführen einer .RB-Scriptdatei in ein lauffähiges EXE-Programm</div><!-- br --><!-- br --><div class="image"><img src="img/firstscript4.gif" alt="Ansicht .EXE und .RB-Dateien im Windows&reg;-Explorer" title="Quellscript und Compilat" /><br /><!-- br -->Nach der Compilierung findet sich neben der .RB-Datei auch eine ausführbare .EXE-Datei unter selbem Namen.</div><!-- br --><!-- br -->Nachdem Sie nun das Script ausgeführt und compiliert haben, kommen wir zu Erklärung des obigen Beispiels: Die Anweisung ECHO gibt, wie Sie sicherlich schon vermutet haben, das Meldungsfenster aus. Als Parameter erwartet diese Anweisung einen Wert, nämlich den Meldungstext, der in dem Meldungsfenster angezeigt werden soll, also &quot;Hallo, ich bin ein RapidBATCH-Script&quot;. Bei einigen Anweisungen muss der Parameter nicht unbedingt zwischen zwei Hochkommata ('...'), wie es hier der Fall ist, eingeschlossen werden, dies ist jedoch ein reiner Sonderfall, der nur bei Anweisungen oder Funktionen mit einem Parameter erlaubt ist. Im Allgemeinen sollten Sie Werte aber möglichst immer in Hochkommata schreiben, da die klassische Schreibweise (Werte ohne Hochkommata anzugeben) nicht mehr dem modernem RapidBATCH-Sprachstandard entspricht.<br><!-- br -->Die END-Anweisung, welche der ECHO-Anweisung in einer neuen Zeile folgt, markiert das Ende des Scripts. Sie muss zwar nicht zwingend angegebene werden, gehört aber zur sauberen Programmierung in RapidBATCH einfach dazu.<br><!-- br --><br><!-- br -->Ob Sie die Befehle gross oder klein schreiben, ist völlig egal, RapidBATCH macht keine Unterschiede zwischen &quot;ECHO&quot;, &quot;eChO&quot; und &quot;Echo&quot;. Es ist also Ihnen überlassen, wie Sie die Befehle schreiben möchten. Ich bevorzuge die Kleinschreibweise, wie im obigen Beispiel. Leerzeichen können überall im Code und zwischen Parametern eingesetzt werden, ebenso auch Tabulatoren. Das Ende der Zeile, also der Zeilenumbruch, markiert gleichzeitig das Ende der Anweisung, d.h. Sie müssen für jede neue Anweisung Ihres Scripts eine neue Zeile beginnen.<br><!-- br --><br><!-- br -->Bevor wir jetzt richtig loslegen mit den mächtigen Funktionen und schier unbegrenzten Möglichkeiten, die Ihnen RapidBATCH bietet, möchte ich vorweg noch auf die Verwendung von Kommentaren hinweisen. Kommentare kann man als Notizen im Quelltext ansehen, um die Verwendung bestimmter Operationen oder Vorgehensweisen zu Dokumentieren oder um zu beschreiben, was eine oder mehrere Anweisungen für ein Ziel verfolgen.<br><!-- br -->Kommentare helfen Ihnen, anderen Programmierern oder sogar dem Anwender, bestimmte Abläufe im Script nachzuvollziehen und besser bzw. schneller zu verstehen. Ich kommentieren daher den Quellcode der Beispielscripts in diesem Programmierhandbuch immer da, wo es mir wichtig erscheint; Das bedeutet nicht, dass jede einzelne Zeile explizit kommentiert wird oder werden muss, sondern nur die wichtigen bzw. kritischen Programmpunkte.<br><!-- br -->Um in RapidBATCH einen Kommentar einzuleiten, bedarf es der REM-Anweisung (was soviel heißt wie das englische Wort &quot;remark&quot; für &quot;Bemerkung&quot;). Diese Anweisung leitet einen einzeiligen Kommentar ein, Beispiel wäre hier (bezogen auf unser erstes Beispielscript):<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem Ein einfaches Programm mit Ausgabe eines Textes in einem Meldungsfenster</font><br /><!-- br -->echo <font color="#0000ff">'Hallo, ich bin ein RapidBATCH-Script'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Programmende</font><br /><!-- br --><b>end</b><!-- br -->[/code]<!-- br --><br><!-- br -->Kommentare können nicht direkt hinter Programmieranweisungen folgen, sondern werden intern vom Interrpeter bzw. Compiler als eigenständige &quot;Anweisung&quot; angesehen; Daher muss jeder Kommentar immer in eine separate Zeile geschrieben werden.<br><!-- br --><br><!-- br -->Im nächsten Kapitel steigen wir nun richtig in die Materie der Programmierung von RapidBATCH-Scripts ein. Wenn Sie mit der Verwendung des RapidBATCH Builders noch nicht so vertraut sind, testen Sie die verschiedenen Funktionalitäten ruhig einmal aus.
rb5_ger_basics_2.html§Variablen§Nachdem Sie nun die erste Hürde, das erste eigene Script, überwunden haben, geht's erstmal richtig los!<br><!-- br --><br><!-- br -->Wir werden nun ein Script entwickeln, das mit variablen, also nicht konstanten Werten arbeitet. Diese so genannten <i>Variablen</i> spielen nämlich in der Programmierung von Computern eine sehr wichtige Rolle, da sie den Programmablauf beeinflussen und steuern. Der Ablauf des Programms kann also von diesen variablen Werten gesteuert und verändert werden.<br><!-- br --><br><!-- br -->Variablen sind also Speicherbereiche, denen ein Wert zugewiesen werden kann. Das nun folgende Script soll einmal den Einsatz von Variablen demonstrieren. Dazu erstellen Sie im RapidBATCH Builder eine neue, leere Script-Datei und geben folgenden Quellcode ein:<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem Eingabe des Benutzernamens</font><br /><!-- br -->inputbox <font color="#000080">[benutzer]</font> = <font color="#0000ff">'Eingabe'</font>, <font color="#0000ff">'Hallo, wie ist Ihr Name?'</font>, <font color="#0000ff">''</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Ausgabe des Benutzernamens</font><br /><!-- br -->echo <font color="#000080">[benutzer]</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br -->Dieses Programm fragt mit Hilfe des INPUTBOX-Dialogs zuerst den Namen des Anwenders ab. Dieser wird in die Variable mit dem Namen [benutzer] gespeichert, weil diese vor dem Gleichheitszeichen (=) der INPUTBOX steht. Die INPUTBOX ist eine so genannte Funktion, genaueres dazu erläutere ich jedoch später.<br><br><!-- br --><!-- br -->Variablen werden in RapidBATCH immer von eckigen Klammern umschlossen, und können überall eingesetzt werden, wo auch konstante Werte möglich sind.<br><!-- br -->In der darauf folgenden ECHO-Anweisung geben wir die Variable wieder aus. Dies geschieht durch einfaches Angeben des Variablennamens anstatt eines konstanten Wertes, wie wir es im ersten Beispiel getan haben. Wir geben hier also anstatt eines festen Wertes den völlig frei vom Anwender des Scripts definierten Wert der Variablen [benutzer] aus, d.h. die Ausgabe, die im Meldungsfenster erscheint, ist abhängig von dem, was der Benutzer im Eingabefenster eingegeben hat.<br><!-- br --><br><!-- br -->Variablen in RapidBATCH können sowohl Texte, so genannte Strings (zu deutsch: &quot;Zeichenketten&quot;), als auch Zahlen speichern, berechnen und manipulieren. Die Konvertierung zwischen den verschiedenen Datentypen findet dabei intern statt, so dass sich der Programmierer darum nicht explizit kümmern muss.<br><!-- br --><br><!-- br -->Seit RapidBATCH 4.0 müssen Variablen auch nicht mehr explizit mit der DEC-Anweisung (was soviel bedeutet wie &quot;Declare&quot;, zu deutsch &quot;Deklariere&quot;) vor ihrer Verwendung deklariert werden. DEC spielt aber trotzdem noch eine sehr wichtige Rolle, auf die wir aber später erst eingehen möchten. Wenn Sie einer Variablen, die nicht existiert, einen Wert zuweisen, wird diese also automatisch im Speicher erzeugt. Die Variable ist dann solange im Speicher, bis das Script beendet wird.<br><!-- br --><br><!-- br -->Um einer Variable einen Wert zuzuweisen, genügt eine einfache Zuweisung in der Form<br><!-- br --><br><!-- br -->[code]<font color="#000080">[variable]</font> = <font color="#0000ff">'Wert'</font>[/code]<!-- br --><br><!-- br -->z.B. <br><!-- br --><br><!-- br -->[code]<font color="#000080">[benutzer]</font> = <font color="#0000ff">'Anna'</font>[/code]<!-- br --><br><!-- br -->oder, um einer Variablen den Wert einer bereits existierenden Variablen zuzuweisen:<br><!-- br --><br><!-- br -->[code]<font color="#000080">[benutzer]</font> = <font color="#000080">[name]</font>[/code]<!-- br --><br><!-- br --><!-- br -->Bei Variablenzuweisungen lassen sich Werte auch verketten und berechnen. Zu diesem Zweck stellt RapidBATCH sechs verschiedene Operatoren zur Verfügung, die zur Verkettung und Berechnung von Werten verwendet werden können. Folgendes Script verbindet beispielsweise mit Hilfe des Join-Operators (#) eine Variable mit einem konstanten String und weist das Ergebnis dieser Zuweisung der Variablen [ausgabe] zu:<br><!-- br --><!-- br --><br><!-- br -->[code]<font color="#000080">[ausgabe]</font> = <font color="#0000ff">'Aha, Ihr Name ist also '</font> # <font color="#000080">[benutzer]</font>[/code]<!-- br --><br><!-- br -->Diese Verkettung zweier Werte kann auch direkt als Parameter einer Anweisung angegeben werden, Beispiel wäre hier<br><!-- br --><br><!-- br -->[code]echo <font color="#0000ff">'Aha, Ihr Name ist also '</font> # <font color="#000080">[benutzer]</font>[/code]<!-- br --><br><!-- br -->Mit den Operatoren +, -, *, / und ~ für Addition, Subtraktion, Multiplikation, Division und Modulo (Restwert) können Variablen und Werte auch berechnet werden. Wichtig ist hierbei, dass die Variablen einen numerischen Wert enthalten. Enthält der Wert einer Variablen z.B. den Text &quot;Hallo&quot; anstatt einer Zahl, so wird er bei einer Berechnung als &quot;0&quot; interpretiert.<br><!-- br --><br><!-- br -->Folgendes Script zeigt, wie man mit Hilfe des Additions-Operators (+) eine Addition in RapidBATCH durchführt:<br><!-- br --><br><!-- br -->[code]<font color="#000080">[a]</font> = <font color="#0000ff">'2'</font><br /><!-- br --><font color="#000080">[b]</font> = <font color="#0000ff">'5'</font><br /><!-- br --><font color="#000080">[ergebnis]</font> = <font color="#000080">[a]</font> + <font color="#000080">[b]</font><br /><!-- br -->echo <font color="#000080">[a]</font> # <font color="#0000ff">' + '</font> # <font color="#000080">[b]</font> # <font color="#0000ff">' ergibt '</font> # <font color="#000080">[ergebnis]</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br -->Da man Werte auch direkt berechnen kann, hat folgendes Script genau dieselbe Ausgabe:<br><!-- br --><!-- br --><br><!-- br -->[code]<font color="#000080">[a]</font> = <font color="#0000ff">'2'</font><br /><!-- br --><font color="#000080">[b]</font> = <font color="#0000ff">'5'</font><br /><!-- br -->echo <font color="#000080">[a]</font> # <font color="#0000ff">' + '</font> # <font color="#000080">[b]</font> # <font color="#0000ff">' ergibt '</font> # (<font color="#000080">[a]</font> + <font color="#000080">[b]</font>)<br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br -->Hier weisen wir den Wert nicht vorher einer Variablen zu, sondern lassen ihn direkt bei der Ausgabe berechnen, also da, wo das Ergebnis benötigt wird.<br><!-- br -->RapidBATCH 5 ist hierbei sehr flexibel; Es können somit beispielsweise auch ganze Formeln durch Klammernsetzung in einem Rutsch berechnet werden:<br><!-- br --><br><!-- br -->[code]<font color="#000080">[a]</font> = <font color="#0000ff">'5'</font><br /><!-- br --><font color="#000080">[b]</font> = <font color="#0000ff">'12'</font><br /><!-- br -->echo <font color="#000080">[a]</font> * (<font color="#000080">[b]</font> + <font color="#0000ff">'4'</font> * (<font color="#000080">[a]</font> - <font color="#0000ff">'2'</font>)) / <font color="#000080">[b]</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br -->Obiges Script würde zur Ausgabe des Wertes &quot;20&quot; führen!<br><!-- br --><br><!-- br -->Zudem bietet RapidBATCH bei Zuweisungen eine verkürzte Schreibweise an, um z.B. einen Wert auf sich selber aufzuaddieren.<br><!-- br --><br><!-- br -->[code]<font color="#000080">[a]</font> + <font color="#0000ff">'5'</font>[/code]<!-- br --><br><!-- br -->ist äquivalent zur bisher bekannten Zuweisung <br><!-- br --><br><!-- br -->[code]<font color="#000080">[a]</font> = <font color="#000080">[a]</font> + <font color="#0000ff">'5'</font>[/code]<!-- br --><br><!-- br -->oder auch eine Quadrierung<br><!-- br --><br><!-- br -->[code]<font color="#000080">[a]</font> * <font color="#000080">[a]</font>[/code]<!-- br --><br><!-- br --><!-- br -->Diese Kurzform für Zuweisungen ist mit allen RapidBATCH-Operatoren möglich, und spart viel Tipparbeit.
rb5_ger_basics_3.html§Werte manipulieren§Da Sie nun die Verwendung von Variablen kennengelernt haben, gehen wir noch einen Schritt weiter.<br><!-- br -->Variablen sind nämlich nicht nur dazu da, um darin Werte abzulegen, sondern auch, um mit diesen Werten zu arbeiten (sie zu verarbeiten).<br><!-- br --><br><!-- br -->Zu diesem Zweck stellt Ihnen RapidBATCH so genannte build-in Funktionen bereit. &quot;Build-in&quot; bedeutet, dass diese Funktionen fest in den RapidBATCH-Standardbefehlssatz eingebaut sind und für die meisten, einfachen Operationen schon ausreichen. Diese build-in Funktionen bieten aber auch die ideale Basis, um später eigene, individuelle Funktionen oder Prozeduren mit individuellen Eigenschaften und Programmverhalten zu entwickeln, wozu wir allerdings erst später kommen werden.<br><!-- br --><br><!-- br -->Funktionen haben die Eigenschaft, dass sie immer einen Wert zurückgeben; Anders als bei vielen anderen Programmiersprachen ist es in RapidBATCH gang und gebe, dass die Ergebnisvariable, die den Rückgabewert der Funktion erhält, hinter und nicht vor dem Funktionsnamen angegeben wird.<br><!-- br --><br><!-- br -->Ein Beispiel zur Anwendung einer Funktion zur Stringmanipulation ist folgendes Script, das den vom Benutzer eingegebenen Wert mit Hilfe der Funktion UPVAR in Großbuchstaben konvertiert:<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem Eingabe des Benutzernamens</font><br /><!-- br -->inputbox <font color="#000080">[benutzer]</font> = <font color="#0000ff">'Eingabe'</font>, <font color="#0000ff">'Guten Tag, wie ist Ihr Name?'</font>, <font color="#0000ff">''</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Benutzernamen in Grossbuchstaben konvertieren</font><br /><!-- br -->upvar <font color="#000080">[benutzer]</font> = <font color="#000080">[benutzer]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Ausgabe des Benutzernamens</font><br /><!-- br -->echo <font color="#0000ff">'Ihr Name in Großbuchstaben lautet: '</font> # <font color="#000080">[benutzer]</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br -->Funktionen haben i.d.R. mindestens einen Parameter, hier ist es der Text, der in Großbuchstaben konvertiert werden soll. Hat eine Funktion mehrere Parameter, so werden diese durch Kommata voneinander getrennt. Wenn Sie später selbst Ihre eigenen Funktionen programmieren, sind auch parameterlose Funktionen möglich!<br><!-- br --><br><!-- br -->Alle build-in Funktionen von RapidBATCH zur Stringmanipulation beginnen entweder mit einem &quot;Get&quot; oder hören mit einem &quot;Var&quot; auf; Dies ist kein direkter Standard (wenn Sie eigene Funktionen programmieren ist dies völlig irrelevant!), nur wurden und werden alle neu hinzugekommenen und hinzukommenden build-in Funktionen an diese alte Namensumgebung, die bereits seit RapidBATCH 1.0 bekannt sind, angelehnt.<br><!-- br --><br><!-- br -->Insgesamt bietet RapidBATCH 12 solcher build-in Funktionen, diese heißen UPVAR, LOWVAR, TRIMVAR, GETCHR, GETASC, COPYVAR, GETCHARAT, GETTOK, GETPOS, REPLACEVAR, CNTVAR und RANDVAR. Ihre Verwendung und praktische Beispiele können inder Sprachreferenz dieses Handbuches nachgeschlagen werden.<br><!-- br --><br><!-- br -->Es gibt in RapidBATCH natürlich eine Vielzahl von anderen build-in Funktionen, wie z.B. den Dialog INPUTBOX - auch eine Funktion - dessen Rückgabewert der eingegebene String ist. Die oben aufgeführten build-in Funktionen haben allerdings den Zweck, dass Sie einen bzw. mehrere Eingabewerte verarbeiten und einen daraus resultierenden Wert zurückgeben.
rb5_ger_basics_4.html§Bedingungen und Schleifen§Nachdem Sie nun die äusserst komplexen Möglichkeiten der variablen Programmierung kennen gelernt haben, kommen wir zu einem weiteren, wichtigen Teil der Ereignis-orientierten Programmierung, den Bedingungen.<br><!-- br -->Bisher haben wir nämlich nur Scripts geschrieben, die kontinuierlich von vorne nach hinten durchlaufen. Solche Programme sind mehr oder minder uninteressant für die Entwicklung von Software-Programmen. Doch in RapidBATCH gibt es verschiedene Möglichkeiten, variable Werte zu prüfen und den Programmablauf somit bedingt zu gestalten.<br><!-- br --><br><!-- br -->Beginnen wir mit einem einfachen Script, das ein Passwort solange abfragt, bis der Benutzer das korrekte Wort eingibt. Zu diesem Zweck verwenden wir die Schleifenanweisungen REPEAT und UNTIL zur Konstruktion einer Schleife. Eine Schleife ist ein Block von Anweisungen, der solange wiederholt wird, bis eine gegebene Bedingung erfolgreich geprüft wird. Ist dies der Fall, wird die Schleife verlassen und das Script fortgeführt.<br><!-- br --><br><!-- br -->Der Code für eine Passwort-Abfrage:<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem Schleife solange wiederholen, bis Passwort "hallo" eingetippt wurde</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;pwdbox <font color="#000080">[password]</font> = <font color="#0000ff">'Login'</font>, <font color="#0000ff">'Bitte geben Sie Ihr Kennwort ein:'</font>, <font color="#0000ff">''</font><br /><!-- br --><b>until</b> <font color="#000080">[password]</font> = <font color="#0000ff">'hallo'</font><br /><!-- br -->echo <font color="#0000ff">'Das Kennwort war richtig.'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br -->Wie Sie sehen werden, wird das PWDBOX-Eingabefenster (eine INPUTBOX mit verstecktem Eingabefeld für Passwörter) solange wieder angezeigt, bis der Benutzer das richtige Passwort, in diesem Fall &quot;hallo&quot;, eingegeben hat. Bei dieser Bedingung handelt es sich um eine Gleichheitsbedingung, d.h. sie liefert das Ergebnis WAHR, wenn beide zu vergleichende Werte exakt den selben Wert beinhalten. Neben dem Gleichheitsoperator (=) kann man bei Bedingungen in RapidBATCH auch die Bedingungsoperatoren ungleich (!), größer-als (&gt;), kleiner-als (&lt;) sowie größer-gleich (&gt;=) und kleiner-gleich (&lt;=) verwenden, um eine Bedingung zu konstruieren. Die letzten vier können in RapidBATCH 5 auch mit Strings benutzt werden, da z.B. der Buchstabe 'A' kleiner als der Buchstabe 'B' ist. In RapidBATCH 4.x waren größer-als und kleiner-als Bedingungen nur mit numerischen Werten möglich.<br><br><!-- br -->Zudem empfehle ich, den Code, welchen Sie zwischen die Anweisungen REPEAT und UNTIL schreiben, mit Leerzeichen oder Tabs einzurücken, denn dies verbessert die Lesbarkeit des Codes erheblich und trägt zur schnelleren Fehlersuche bei, da der Code, der zur Schleife gehört, durch die Einrückung direkt hervorsticht.<br><!-- br --><br><!-- br -->Schleifen sind jedoch nur eine Möglichkeit der bedingten Programmierung in RapidBATCH. Die andere, viel häufiger verwendete Methode ist die IF-Anweisung, die zusammen mit den Anweisungen ELSEIF, ELSE und ENDIF in den verschiedensten Variationen eingesetzt werden kann. Folgende Beispiele demonstrieren einmal ein paar Einsatzfälle für IF-Konstruktionen.<br><!-- br --><br><!-- br -->Eine einfache IF-Anweisung (zu deutsch: &quot;Wenn&quot;) wäre z.B.<br><!-- br --><br><!-- br -->[code]<b>if</b> <font color="#000080">[eingabe]</font> = <font color="#0000ff">'hallo'</font> echo <font color="#0000ff">'Das eingegebene Wort wurde erfolgreich auf "hallo" geprüft'</font>[/code]<!-- br --><br><!-- br -->Hier folgt direkt hinter der IF-Anweisung und der dazugehörenden Bedingung die auszuführende Anweisung. Möchte man zwei oder mehr Anweisungen hinter einem IF ausführen, gibt man diese in einem so genannten IF-Block an:<br><!-- br --><br><!-- br -->[code]<b>if</b> <font color="#000080">[eingabe]</font> = <font color="#0000ff">'hallo'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Das eingegebene Wort wurde erfolgreich auf "hallo" geprüft'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[x]</font> + <font color="#0000ff">'2'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[x]</font> &gt; <font color="#0000ff">'32'</font> <b>halt</b><br /><!-- br --><b>endif</b>[/code]<!-- br --><br><!-- br -->Der Zeilenumbruch hinter der Bedingung weist den Interpreter bzw. Compiler an, dass er, wenn die Bedingung erfolgreich ist, den gesamten Code bis zum nächsten ENDIF (oder ELSEIF/ELSE) ausführen soll. Die HALT Anweisung, die hier verwendet wird, beendet das Script.<br><!-- br --><br><!-- br -->Wenn man mehrere verschiedene Bedingungen in unterschiedlichen IF-Blöcken prüfen möchte, verwendet man die ELSEIF-Anweisung:<br><!-- br --><br><!-- br -->[code]<b>if</b> <font color="#000080">[eingabe]</font> = <font color="#0000ff">'hallo'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Das eingegebene Wort wurde erfolgreich auf "hallo" geprüft'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[x]</font> + <font color="#0000ff">'2'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[x]</font> &gt; <font color="#0000ff">'32'</font> <b>halt</b><br /><!-- br --><b>elseif</b> <font color="#000080">[eingabe]</font> = <font color="#0000ff">'tschüss'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Auf wiedersehen!'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br /><!-- br --><b>endif</b><!-- br -->[/code]<!-- br --><br><!-- br -->Wenn keine der Bedingungen eintritt, also alle IF/ELSEIF-Bedingungen unwahr sind, so kann man auch einen bestimmten Anweisungsblock in einem ELSE (zu deutsch: &quot;Ansonsten&quot;) zusammenfassen, der eben nur dann Ausgeführt wird, wenn alles andere fehlschlägt:<br><!-- br --><br><!-- br -->[code]<b>if</b> <font color="#000080">[eingabe]</font> = <font color="#0000ff">'hallo'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Das eingegebene Wort wurde erfolgreich auf "hallo" geprüft'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[x]</font> + <font color="#0000ff">'2'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[x]</font> &gt; <font color="#0000ff">'32'</font> <b>halt</b><br /><!-- br --><b>elseif</b> <font color="#000080">[eingabe]</font> = <font color="#0000ff">'tschüss'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Auf wiedersehen!'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br /><!-- br --><b>else</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Eingabe ungenau.'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>goto</b> neustart<br /><!-- br --><b>endif</b>[/code]<!-- br --><br><!-- br -->Manchmal ist es auch von Nöten, mehr als einen Vergleich bei einer REPEAT...UNTIL oder IF/ELSEIF-Bedingung zu prüfen. Zu diesem Zweck stellt RapidBATCH zwei so genannte logische Verknüpfungsoperatoren bereit, die UND-Verknüpfung (&quot;&amp;&quot;-Operator) sowie die ODER-Verknüpfung (&quot;|&quot;-Operator). Diese Operatoren werden verwendet, um zwei (oder mehr) Vergleiche logisch zu einer gesamten Bedingung zu verknüpfen.<br><!-- br -->Bei der ODER-Verknüpfung muss eine der verknüpften Bedingungen wahr sein, damit die Abfrage erfolgreich geprüft wird.<br><!-- br --><br><!-- br -->Beispiel ist folgendes Script. Es gibt nur eine Willkommensnachricht aus, wenn der eingegebene Name &quot;Stefan&quot; oder &quot;Peter&quot; ist.<br><!-- br --><br><!-- br -->[code]inputbox <font color="#000080">[name]</font> = <font color="#0000ff">'Log in'</font>, <font color="#0000ff">'Wie heißt du?'</font>, <font color="#0000ff">''</font><br /><!-- br --><b>if</b> <font color="#000080">[name]</font> = <font color="#0000ff">'Stefan'</font> | <font color="#000080">[name]</font> = <font color="#0000ff">'Peter'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Herzlich Willkommen!'</font><br /><!-- br --><b>else</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Du bist nicht Stefan oder Peter!'</font><br /><!-- br --><b>endif</b><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br -->Anders ist es bei der UND-Verknüpfung: Hier müssen beide Bedingungen wahr ergeben, damit die Abfrage als erfolgreich geprüft wird.<br><!-- br --><br><!-- br -->[code]inputbox <font color="#000080">[name]</font> = <font color="#0000ff">'Nachname'</font>, <font color="#0000ff">'Wie ist dein Nachname?'</font>, <font color="#0000ff">''</font><br /><!-- br -->inputbox <font color="#000080">[vorname]</font> = <font color="#0000ff">'Vorname'</font>, <font color="#0000ff">'Wie ist dein Vorname?'</font>, <font color="#0000ff">''</font><br /><!-- br --><br /><!-- br --><b>if</b> <font color="#000080">[name]</font> ! <font color="#0000ff">''</font> & <font color="#000080">[vorname]</font> ! <font color="#0000ff">''</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Hallo '</font> # <font color="#000080">[vorname]</font> # <font color="#0000ff">' '</font> # <font color="#000080">[name]</font><br /><!-- br --><b>else</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Sie haben nicht alle Werte eingegeben!'</font><br /><!-- br --><b>endif</b><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br -->Natürlich können auch UND- und ODER-Verknüpfungen beliebig hintereinander geschaltet werden, nur müssen Sie darauf achten, dass die gegebenen Bedingungen auch wirklich erreicht werden können.
rb5_ger_basics_5.html§Sprünge und Subs§Ein bewährtes Mittel, den Programmablauf strukturiert zu gestalten, ist der Sprung zu Codelabels und Unterprogrammen, den so genannten Subs. Da allerdings die meisten Probleme mit eigenen Prozeduren und Funktionen und den Schleifen-Anweisungen REPEAT und UNTIL gelöst werden können, wird dieses Thema nur einmal kurz angesprochen.<br><!-- br --><br><!-- br -->Um mit Codelabels bzw. Unterprogrammen zu arbeiten stehen Ihnen die Anweisungen GOTO, GOSUB und RESUME zur Verfügung. Mit GOTO können Sie vorwärts oder rückwärts durch das Script &quot;springen&quot;, d.h. Sie können mit der Programmausführung einfach an einer anderen Position im Script fortfahren. Diese GOTO-Sprünge werden von vielen Programmierern oft verhasst, weil sie den Code unschön und unübersichtlich machen, doch manchmal sind solche Sprünge einfach unerlässlich und bringen auch viele Vorteile mit sich (z.B. höhere Performance).<br><!-- br -->Einfachstes Fallbeispiel ist z.B. folgendes Script. Wir haben drei Meldungsfenster, von denen jedoch nur das erste und das dritte angezeigt werden. Nach dem ersten ECHO springen wir hier einfach via GOTO zu dem Label %ende. Labels, auch Sprungmarken genannt, sind direkt im Code durch ein vorangestelltes Prozent-Zeichen (%) gekennzeichnet und können jeden beliebigen Namen haben, auch mit Leer- und Sonderzeichen.<br><!-- br --><br><!-- br -->[code]echo <font color="#0000ff">'Meldung 1'</font><br /><!-- br --><b>goto</b> <font color="#0000ff">'ende'</font><br /><!-- br -->echo <font color="#0000ff">'Meldung 2'</font><br /><!-- br -->%ende<br /><!-- br -->echo <font color="#0000ff">'Meldung 3'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br -->Ausserdem gibt es seit RapidBATCH 4.0 auch die Möglichkeit, sehr einfache Unterprogramme, so genannte Subs, zu entwickeln. Dies sind keine wirklichen Prozeduren wie solche, auf die ich später noch genauer eingehen werde, sondern Code-Blöcke, die mit einem Label beginnen und mit einer RESUME-Anweisung enden. Bei Ausführung von RESUME wird das Script hinter dem letzten GOSUB-Aufruf fortgeführt, d.h. das Unterprogramm kann von verschiedenen Positionen aus aufgerufen werden und wird nach dem RESUME wieder an der jeweiligen Stelle fortgeführt, von der es aufgerufen wurde. Folgendes Beispiel nimmt die Zahlen 1 bis 10 zum Quadrat.<br><!-- br --><br><!-- br -->[code]<font color="#000080">[i]</font> = <font color="#0000ff">'1'</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>gosub</b> <font color="#0000ff">'quadrat'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br /><!-- br --><b>until</b> <font color="#000080">[i]</font> &gt; <font color="#0000ff">'10'</font><br /><!-- br --><b>halt</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem Sub: quadrat</font><br /><!-- br -->%quadrat<br /><!-- br --><font color="#000080">[x]</font> = <font color="#000080">[i]</font> * <font color="#000080">[i]</font><br /><!-- br -->echo <font color="#000080">[i]</font> # <font color="#0000ff">' * '</font> # <font color="#000080">[i]</font> # <font color="#0000ff">' = '</font> # <font color="#000080">[x]</font><br /><!-- br --><b>resume</b><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br -->Die GOSUB-Anweisung springt hier, genau wie GOTO, zu einem Label (hier: quadrat).<br><!-- br -->Beachten Sie bitte, dass man diese Prozeduraufrufe auch beliebig ineinander verschachteln kann, d.h. Subs können wiederum andere Subs oder sich selbst rekursiv aufrufen. Bestes Beispiel wäre hier das folgende Script:<br><!-- br --><br><!-- br -->[code]echo <font color="#0000ff">'Meldung 1'</font><br /><!-- br --><b>gosub</b> <font color="#0000ff">'test1'</font><br /><!-- br -->echo <font color="#0000ff">'Meldung 2'</font><br /><!-- br --><b>halt</b><br /><!-- br --><br /><!-- br -->%test1<br /><!-- br -->echo <font color="#0000ff">'Meldung 3'</font><br /><!-- br --><b>gosub</b> <font color="#0000ff">'test2'</font><br /><!-- br --><b>resume</b><br /><!-- br --><br /><!-- br -->%test2<br /><!-- br -->echo <font color="#0000ff">'Meldung 4'</font><br /><!-- br --><b>gosub</b> <font color="#0000ff">'test3'</font><br /><!-- br --><b>resume</b><br /><!-- br --><br /><!-- br -->%test3<br /><!-- br -->echo <font color="#0000ff">'Meldung 5'</font><br /><!-- br --><b>gosub</b> <font color="#0000ff">'test4'</font><br /><!-- br --><b>resume</b><br /><!-- br --><br /><!-- br -->%test4<br /><!-- br -->echo <font color="#0000ff">'Meldung 6'</font><br /><!-- br --><b>resume</b><br /><!-- br --><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br -->Die Meldungsfenster erscheinen in folgender Reihenfolge: 1, 3, 4, 5, 6, 2!<br><!-- br --><br><!-- br -->Seit RapidBATCH 5.0 sind auch dynamische Sprünge via GOTO und GOSUB möglich. Das bedeutet, dass bei GOTO bzw. GOSUB als Label auch eine Variable oder ein zusammengesetzter Wert angegeben werden kann, zu dem gesprungen wird.<br><!-- br --><br><!-- br -->Beispiel:<br><!-- br --><br><!-- br -->[code]confirm <font color="#000080">[answer]</font> = <font color="#0000ff">'Ja oder Nein?'</font><br /><!-- br --><b>goto</b> <font color="#000080">[answer]</font><br /><!-- br --><br /><!-- br -->%0<br /><!-- br -->echo <font color="#0000ff">'Sie haben JA angeklick!'</font><br /><!-- br --><b>halt</b><br /><!-- br --><br /><!-- br -->%-1<br /><!-- br -->echo <font color="#0000ff">'Sie haben NEIN angeklickt!'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br -->Interessant werden diese dynamischen Sprünge u.a. noch etwas später, wenn es um benutzerdefinierte Dialoge geht. Sie sind jedoch mit Vorsicht zu genießen, da ein falsch zusammengesetzer Labelname zum sofortigen Verlassen des Scripts führt, wenn das Label nicht im Script definiert ist.<br><!-- br --><br><!-- br -->Labels sollten aber nur dann verwendet werden, wenn dies zwingend notwendig ist. Vermehrt soll in RapidBATCH 5 mit Prozeduren und Funktionen gearbeitet werden, welche Sie, wie bereits erörtert, später genauer kennenlernen werden.
rb5_ger_basics_6.html§Arrays§Kommen wir nun zu einer revolutionären Neuerung in RapidBATCH 5, den Arrays!<br><!-- br --><br><!-- br -->Bei einem Array (engl. für Anordnung, Aufstellung, Datenfeld) handelt es sich um eine Gruppe von Variablen, die unter einem gemeinsamen Variablen-Namen gespeichert werden. Arrays werden benötigt, um einerseits eine große Anzahl von Variablen mit geringem Aufwand zu definieren und um andererseits die Voraussetzung zu schaffen, direkt auf ein bestimmtes Variablenelement durch Angabe eines Index-Wertes zuzugreifen.<br><!-- br --><br><!-- br -->Arrays bieten also die Möglichkeit, unter dem Namen einer einzigen Variablen schier unendlich viele, verschiedene Werte in sogar mehrfach verschachtelten Dimensionen zu speichern. Ein Array kann man sich wie eine Tabelle im Speicher vorstellen, in der jede Zeile einen Wert enthält, welcher über den soeben beschriebenen Index-Zähler adressiert werden kann.<br><!-- br -->Viele Programmiersprachen bieten sowohl statische Arrays (Arrays, die in ihrer Größe nicht variabel sind) als auch dynamische Arrays (Arrays, die zur Laufzeit definiert werden und dynamische Größen und Dimensionen annehmen können). RapidBATCH ermöglicht nur den Einsatz von dynamischen Arrays, was eine unglaublich hohe Flexbilität zulässt; Der Programmierer braucht sich nämlich in keiner Weise mit der internen Speicherverwaltung des Arrays auseinanderzusetzen - RapidBATCH erledigt die Dimensionierung und Erweiterung von Arrays intern völlig automatisch.<br><!-- br --><!-- br -->Ein einfaches Beispiel für die Verwendung eines Arrays demonstriert folgendes Script. Es speichert 10 unterschiedliche Namen in einem Array, welches unter als [namen] deklariert wird. In der REPEAT...UNTIL-Schleife weiter unten werden die Namen von 1 bis 10 durchlaufen und angezeigt, wobei wir eine Zählervariable, [i], zum Hochzählen des Indexes verwenden.<!-- br --><!-- br --><br><br><!-- br -->[code]<b>dec</b> <font color="#000080">[namen:'10']</font><br /><!-- br --><font color="#000080">[namen:'1']</font> = <font color="#0000ff">'Jan'</font><br /><!-- br --><font color="#000080">[namen:'2']</font> = <font color="#0000ff">'Anna'</font><br /><!-- br --><font color="#000080">[namen:'3']</font> = <font color="#0000ff">'Stefan'</font><br /><!-- br --><font color="#000080">[namen:'4']</font> = <font color="#0000ff">'Matthias'</font><br /><!-- br --><font color="#000080">[namen:'5']</font> = <font color="#0000ff">'Sebastian'</font><br /><!-- br --><font color="#000080">[namen:'6']</font> = <font color="#0000ff">'Daniel'</font><br /><!-- br --><font color="#000080">[namen:'7']</font> = <font color="#0000ff">'Uli'</font><br /><!-- br --><font color="#000080">[namen:'8']</font> = <font color="#0000ff">'Andreas'</font><br /><!-- br --><font color="#000080">[namen:'9']</font> = <font color="#0000ff">'Volker'</font><br /><!-- br --><font color="#000080">[namen:'10']</font> = <font color="#0000ff">'Marco'</font><br /><!-- br --><br /><!-- br --><font color="#000080">[index]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[index]</font> + <font color="#0000ff">'1'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Name an Position '</font> # <font color="#000080">[index]</font> # <font color="#0000ff">' ist: '</font> # <font color="#000080">[namen:[index]]</font><br /><!-- br --><b>until</b> <font color="#000080">[index]</font> = <font color="#0000ff">'10'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><!-- br --><br><!-- br --><br><!-- br -->Die folgende Tabelle veranschaulicht die Speicheransicht des Arrays [namen] im obigen Beispiel:<!-- br --><!-- br --><br><br><!-- br --><table class="std" width="200" style="margin-left: 20px;"><!-- br -->	<tr><!-- br -->		<td><b>Index:</b></td><!-- br -->		<td><b>Wert:</b></td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>1</td><!-- br -->		<td>Jan</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>2</td><!-- br -->		<td>Anna</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>3</td><!-- br -->		<td>Stefan</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>4</td><!-- br -->		<td>Matthias</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>5</td><!-- br -->		<td>Sebastian</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>6</td><!-- br -->		<td>Daniel</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>7</td><!-- br -->		<td>Uli</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>8</td><!-- br -->		<td>Andreas</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>9</td><!-- br -->		<td>Volker</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>10</td><!-- br -->		<td>Marco</td><!-- br -->	</tr><!-- br --></table><!-- br --><!-- br --><br><!-- br -->Arrays können in RapidBATCH auf verschiedene Arten definiert, dimensioniert und re-dimensioniert werden. Ein einfaches Array mit vorerst 10 Elementen, wie das, welches wir in unserem letzten Beispiel verwendet haben, kann man z.B. mit der DEC-Anweisung fest vordeklarieren:<br><!-- br --><br><!-- br -->[code]<b>dec</b> <font color="#000080">[meinArray:'10']</font>[/code]<!-- br --><br><!-- br -->In RapidBATCH ist es völlig frei, wie der Index (in diesem Fall der feste Wert '10') eines Arrays angegeben wird, er kann neben der oben gezeigten Variante auch in den folgenden Formen angegeben werden:<br><!-- br --><br><!-- br -->[code]<b>dec</b> <font color="#000080">[meinArray'10']</font><br /><!-- br --><b>dec</b> <font color="#000080">[meinArray '10']</font><br /><!-- br --><b>dec</b> <font color="#000080">['10'meinArray]</font><br /><!-- br --><b>dec</b> <font color="#000080">[mein'10'Array]</font>[/code]<!-- br --><br><!-- br -->Auch wenn letztere Schreibweise sehr merkwürdig aussieht, sie ist eine gültige Index-Angabe, und das Array wird unter dem Namen &quot;meinArray&quot; deklariert!<br><br><!-- br -->Der Index kann selbstverständlich auch völlig dynamisch über eine Variable angegeben werden:<br><!-- br --><br><!-- br -->[code]<font color="#000080">[index]</font> = <font color="#0000ff">'10'</font><br /><!-- br --><b>dec</b> <font color="#000080">[meinArray:[index]]</font><br /><!-- br --><b>dec</b> <font color="#000080">[meinArray[index]]</font><br /><!-- br --><b>dec</b> <font color="#000080">[mein[index]Array]</font>[/code]<!-- br --><br><!-- br -->Arrays können auch durch direkte Zuweisung eines Wertes zu irgend einem Index deklariert bzw. erzeugt werden; Das bedeutet auch, dass Sie jede beliebige, in Ihrem RapidBATCH-Script verwendete Variable durch eine einfache Zuweisung eines Wertes zu einem Index in ein Array umwandeln können. Folgendes Beispiel erzeugt ein Array mit drei Werten durch die direkte Zuweisung der Werte, ohne vorherige, explizite Deklaration. Die Elemente des Arrays werden dabei rückwärts ausgegeben, d.h. der letzte Eintrag zuerst, wie aus der Schleife ersichtlich ist.<br><!-- br --><br><!-- br -->[code]<font color="#000080">[meinArray:'1']</font> = <font color="#0000ff">'Ich bin der erste Eintrag in dem Array'</font><br /><!-- br --><font color="#000080">[meinArray:'2']</font> = <font color="#0000ff">'Ich bin der zweite Eintrag in dem Array'</font><br /><!-- br --><font color="#000080">[meinArray:'3']</font> = <font color="#0000ff">'Ich bin der letzte Eintrag in dem Array'</font><br /><!-- br --><br /><!-- br --><font color="#000080">[i]</font> = <font color="#0000ff">'3'</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#000080">[meinArray:[i]]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> - <font color="#0000ff">'1'</font><br /><!-- br --><b>until</b> <font color="#000080">[i]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br -->Doppelpunkte und Kommata werden dabei im Variablennamen einfach ignoriert, d.h. sie sind nicht zwingend notwendig.<!-- br --><br><!-- br --><br><!-- br -->Um die Anzahl der Elemente, die je Dimension in einem Array existiert, zu ermitteln, verwendet man die Dimensionangabe 0:<br><!-- br --><br><!-- br -->[code]<font color="#000080">[meinArray:'1']</font> = <font color="#0000ff">'Ich bin der erste Eintrag in dem Array'</font><br /><!-- br --><font color="#000080">[meinArray:'2']</font> = <font color="#0000ff">'Ich bin der zweite Eintrag in dem Array'</font><br /><!-- br --><font color="#000080">[meinArray:'3']</font> = <font color="#0000ff">'Ich bin der letzte Eintrag in dem Array'</font><br /><!-- br -->echo <font color="#0000ff">'Das Array beinhaltet momentan '</font> # <font color="#000080">[meinArray:'0']</font> # <font color="#0000ff">' Elemente'</font><br /><!-- br --><br /><!-- br --><font color="#000080">[i]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Eintrag Nr. '</font> # <font color="#000080">[i]</font> # <font color="#0000ff">': '</font> # <font color="#000080">[meinArray:[i]]</font><br /><!-- br --><b>until</b> <font color="#000080">[i]</font> = <font color="#000080">[meinArray:'0']</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><br><!-- br -->Wie bereits oben kurz angesprochen, können Arrays auch in verschiedenen, verschachtelten Dimensionen angelegt werden. Eine Dimension ist sozusagen ein untergeordnetes Array eines Array-Elementes. D.h. wir können für jedes Array-Element ein untergeordnetes Array anlegen. Jedes Element dieses untergeordneten Arrays kann wiederum ein untergeordnetes Array beinhalten - das ganze ist in RapidBATCH bis zu 9 Dimensionen möglich, eine immens große Kapazität.<br><!-- br --><br><!-- br -->Um mehrdimensionale Arrays anzulegen geht man genauso vor wie wenn man ein einfaches Array deklariert bzw. auffüllt: Man weist einfach einem nicht existierenden Element in irgendeiner Dimension einen Wert zu - RapidBATCH redimensioniert bzw. reserviert sich den nötigen Speicher, der zum Erreichen der angegebenen Dimension nötig ist, automatisch.<br><!-- br --><br><!-- br -->Ein Beispiel (wobei die DEC-Anweisung auch hier wieder optional ist!):<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem Deklarieren eines Arrays mit 10x10x10 Dimensionen</font><br /><!-- br --><b>dec</b> <font color="#000080">[meinArray:'10','10','10']</font><br /><!-- br --><font color="#000080">[meinArray:'1','1','1']</font> = <font color="#0000ff">'Hello World'</font><br /><!-- br --><font color="#000080">[meinArray:'1','1','2']</font> = <font color="#0000ff">'Wert an Index 2'</font><br /><!-- br --><font color="#000080">[meinArray:'1','1','3']</font> = <font color="#0000ff">'Wert an Index 3'</font><br /><!-- br --><font color="#000080">[meinArray:'1','2','1']</font> = <font color="#0000ff">'Anderer Wert an Index 1'</font><br /><!-- br --><font color="#000080">[meinArray:'1','2','2']</font> = <font color="#0000ff">'Anderer Wert an Index 2'</font><br /><!-- br --><font color="#000080">[meinArray:'1','2','3']</font> = <font color="#0000ff">'Anderer Wert an Index 3'</font>[/code]<!-- br --><br><!-- br -->RapidBATCH bietet an dieser Stelle auch noch eine Besonderheit, die bisher keine andere Programmiersprache weltweit aufweist: Werte können in JEDE Dimension eines Arrays gespeichert werden!<br><!-- br --><br><!-- br -->Ein konkretes Beispiel:<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem Auffüllen des Arrays in verschiedenen Dimensionen</font><br /><!-- br --><font color="#000080">[meinArray]</font> = <font color="#0000ff">'Basis'</font><br /><!-- br --><font color="#000080">[meinArray:'1']</font> = <font color="#0000ff">'Erste Dimension, Wert 1'</font><br /><!-- br --><font color="#000080">[meinArray:'1','1']</font> = <font color="#0000ff">'Zweite Dimension, Wert 1'</font><br /><!-- br --><font color="#000080">[meinArray:'1','1','1']</font> = <font color="#0000ff">'Dritte Dimension, Wert 1'</font><br /><!-- br --><font color="#000080">[meinArray:'1','1','2']</font> = <font color="#0000ff">'Dritte Dimension, Wert 2'</font><br /><!-- br --><font color="#000080">[meinArray:'1','2']</font> = <font color="#0000ff">'Zweite Dimension, Wert 2'</font><br /><!-- br --><font color="#000080">[meinArray:'2']</font> = <font color="#0000ff">'Erste Dimension, Wert 2'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Ausgabe des Arrays</font><br /><!-- br -->echo <font color="#000080">[meinArray]</font><br /><!-- br -->echo <font color="#000080">[meinArray:'1']</font><br /><!-- br -->echo <font color="#000080">[meinArray:'1','1']</font><br /><!-- br -->echo <font color="#000080">[meinArray:'1','1','1']</font><br /><!-- br -->echo <font color="#000080">[meinArray:'1','1','2']</font><br /><!-- br -->echo <font color="#000080">[meinArray:'1','2']</font><br /><!-- br -->echo <font color="#000080">[meinArray:'2']</font>[/code]<!-- br --><br><!-- br --><br><!-- br -->Speziell für die Wiederverwertung bzw. Auflösung nicht mehr benötigter Arrays und deren Speicherressourcen gibt es in RapidBATCH 5 auch eine Möglichkeit, ein Array komplett zu löschen (z.B. damit es neu aufgefüllt werden kann): Die RESET-Anweisung! RESET tut genau das Gegenteil von der Anweisung DEC zum Deklarieren von Variablen und Arrays. Mit der RESET-Anweisung kann ein ganzes Array oder auch nur eine einzelne Dimension eines Arrays wieder freigegeben, also aus dem Speicher entfernt werden. Anzumerken sei hierbei, dass RESET nicht die Variable des Arrays selbst, sondern nur das Array bzw. den Inhalt der Variablen vom Speicher entfernt und zur erneuten Verwendung freigibt.<br><!-- br --><br><!-- br -->Einfaches Beispiel:<br><!-- br --><br><!-- br -->[code]<font color="#000080">[meinArray:'1']</font> = <font color="#0000ff">'Ich bin der erste Eintrag in dem Array'</font><br /><!-- br --><font color="#000080">[meinArray:'2']</font> = <font color="#0000ff">'Ich bin der zweite Eintrag in dem Array'</font><br /><!-- br --><font color="#000080">[meinArray:'3']</font> = <font color="#0000ff">'Ich bin der letzte Eintrag in dem Array'</font><br /><!-- br -->echo <font color="#0000ff">'Das Array beinhaltet momentan '</font> # <font color="#000080">[meinArray:'0']</font> # <font color="#0000ff">' Elemente'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Array löschen</font><br /><!-- br --><b>reset</b> <font color="#000080">[meinArray]</font><br /><!-- br -->echo <font color="#0000ff">'Das Array beinhaltet momentan '</font> # <font color="#000080">[meinArray:'0']</font> # <font color="#0000ff">' Elemente'</font><br /><!-- br --><br /><!-- br --><font color="#000080">[meinArray:'1']</font> = <font color="#0000ff">'Neuer Inhalt'</font><br /><!-- br --><font color="#000080">[meinArray:'2']</font> = <font color="#0000ff">'Noch ein neuer Inhalt'</font><br /><!-- br -->echo <font color="#0000ff">'Das Array beinhaltet momentan '</font> # <font color="#000080">[meinArray:'0']</font> # <font color="#0000ff">' Elemente'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br -->Die Vorteile, die Arrays in RapidBATCH mit sich bringen, sind sehr vielfältig, vor allem ihre 100%ige Dynamik, die andere Programmier- und Scriptsprachen gar nicht oder nicht in diesem Umfang bieten.
