template.html§0TITLE§1CONTENT
rb5_en_dialogs_1.html§Message- and Statusboxes§RapidBATCH is equipped with many build-in dialog windows, that can be individually customized and optimized for the script they're used in. Before you begin to design your completely customized dialog windows in RapidBATCH (this subject will be discussed later), you first should take a look at the already existing build-in dialogs. These build-in dialogs mostly fit the needs of your RapidBATCH scripts. The advantage of using the build-in dialogs is, that you always have to write just one single line of code for e.g. read a value from the user or to display a text-message. Also you don't have to pay attention to the whole event-handling that is needed to make a dialog useable. Sure, for more powerful, individual and specialized dialog windows, you better should implement them for your own as described later, but there, you also have to code the complete event handing that has to be done behind the dialog. But anyway, this chapter now describes RapidBATCH's powerful build-in dialogs, how they're used and customized to bestly fit your purposes and use.<br /><br /><!-- br --><!-- br -->Message windows, the so called messageboxes, are the simpliest form to present messages and data to the user, and can also be used for simple user interaction (to let the user match an option). You had already learned to know the ECHO-instruction, displaying a simple messagebox on the screen. ECHO is the simpliest possibility to dispay an information, which is also one of the reasons why it is mostly used within our examples, to output a value or something like that.<!-- br --><!-- br --><div class="image"><img src="img/echo.gif" alt="Image of an ECHO-dialog" title="ECHO-Dialog" /><br /><!-- br -->Simple text output with the ECHO-instruction</div><!-- br --><!-- br -->A slightly similar purpose performs the CONFIRM-function, that displays a user dialog with a Yes-No-option. CONFIRM expects a return-variable (that gives information on the selected button), and a prompting text or question as parameter, that can be answered with &quot;Yes&quot; or &quot;No&quot;. If the user hits the &quot;Yes&quot;-button, CONFIRM will return the value '0', else '-1', so this &quot;answer&quot; can be verified within a condition specified at IF/ELSEIF or UNTIL.<!-- br --><!-- br --><!-- br --><div class="image"><img src="img/confirm.gif" alt="Image of a CONFIRM-dialog" title="CONFIRM-Dialog" /><br /><!-- br -->A simple Yes-No-confirmation with the CONFIRM-dialog.</div><!-- br --><!-- br -->An example for the usage of the CONFIRM-function is the following script:<br><!-- br --><br><!-- br -->[code]%start<br /><!-- br --><font color="#808080">rem ask to stop the script</font><br /><!-- br -->confirm <font color="#000080">[stop]</font> = <font color="#0000ff">'Do you want to stop the script?'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem if "No" was hit, call the label "start"</font><br /><!-- br --><b>if</b> <font color="#000080">[stop]</font> = <font color="#0000ff">'-1'</font> <b>goto</b> <font color="#0000ff">'start'</font><br /><!-- br -->echo <font color="#0000ff">'script was halted.'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br -->Thus, ECHO and CONFIRM provide the most simple possibility to quickly display a message or to realize a Yes-No-prompt in your scripts.<!-- br --><br><!-- br --><br><!-- br --><!-- br -->To create more individual messageboxes, RapidBATCH also provides the MSGBOX-instruction. MSGBOX exists both as an instruction and as a function, having the same name! The reason for this special usage of MSGBOX is, that the MSGBOX-instruction is supported for RapidBATCH script backward compatibility. Programmers should deal more with MSGBOX as a function, but MSGBOX as instruction will also be possible in future versions.<!-- br --><!-- br --><br><br>MSGBOX expects as parameters a messagebox title, a message-text, and a so called messagebox-style value, that is represented by a calculated number.<br /><!-- br --><!-- br -->A very simple messagebox is the result of the following line:<br><!-- br --><br><!-- br --><!-- br -->[code]msgbox <font color="#0000ff">'Information'</font>, <font color="#0000ff">'Hello World'</font>, <font color="#0000ff">'0'</font>[/code]<!-- br --><!-- br -->Or, if we call it as a function:<br><br><!-- br --><!-- br -->[code]msgbox <font color="#000080">[result]</font> = <font color="#0000ff">'Information'</font>, <font color="#0000ff">'Hello World'</font>, <font color="#0000ff">'0'</font>[/code]<!-- br --><br><!-- br --><!-- br -->The messagebox-style, that is assigned as the third parameter to the MSGBOX function or instruction, is composed of a value specifying the set of buttons that should be shown, a value that specifies which of the four messagebox-icons should be displayed, and at least a value, which of the displayed buttons should be focussed by default. To retrieve, which button has been pressed, MSGBOX returns a corresponding, numerical value to the variable [errorcode], or, in case of using MSGBOX as a function, to the particular return-variable that is specified.<!-- br --><br><!-- br --><br><!-- br -->Possible button style values for messageboxes are the following ones:<br><!-- br --><br><!-- br --><!-- br --><!-- MESSAGEBOX-BUTTON-STYLES ------------------------------------------------------------------><!-- br --><table class="std" style="margin-left: 20px;" cellspacing="10"><!-- br --><tr><!-- br -->  <td style="padding-right: 10px;"><b>Style-ID:</b></td><!-- br -->  <td><b>Example:</b></td><!-- br -->  <td><b>Button-Style (particular return value for each button in brackets):</b></td><!-- br --></tr><!-- br --><tr><!-- br -->  <td>0</td><td style="padding-right: 10px;"><img src="img/msgbox_style0.gif" alt="Screenshot MSGBOX-Style 0" /></td><td>OK (1)</td><!-- br --></tr><!-- br --><tr><!-- br -->  <td>1</td><td style="padding-right: 10px;"><img src="img/msgbox_style1.gif" alt="Screenshot MSGBOX-Style 1" /></td><td>OK (1) + CANCEL (2)</td><!-- br --></tr><!-- br --><tr><!-- br -->  <td>2</td><td style="padding-right: 10px;"><img src="img/msgbox_style2.gif" alt="Screenshot MSGBOX-Style 2" /></td><td>CANCEL (3) + RETRY (4) + IGNORE (5)</td><!-- br --></tr><!-- br --><tr><!-- br -->  <td>3</td><td style="padding-right: 10px;"><img src="img/msgbox_style3.gif" alt="Screenshot MSGBOX-Style 3" /></td><td>YES (6) + NO (7) + CANCEL (2)</td><!-- br --></tr><!-- br --><tr><!-- br -->  <td>4</td><td style="padding-right: 10px;"><img src="img/msgbox_style4.gif" alt="Screenshot MSGBOX-Style 4" /></td><td>YES (6) + NO (7)</td><!-- br --></tr><!-- br --><tr><!-- br -->  <td>5</td><td style="padding-right: 10px;"><img src="img/msgbox_style5.gif" alt="Screenshot MSGBOX-Style 5" /></td><td>RETRY (4) + CANCEL (2)</td><!-- br --></tr><!-- br --></table><!-- br --><!-- END MESSAGEBOX-BUTTON-STYLES --------------------------------------------------------------><!-- br --><br><br><!-- br --><!-- br -->By adding one of the following values to the desired button-style, it is also possible to determine an icon that should be displayed on the left of the message text.<!-- br --><br><!-- br --><br><!-- br --><!-- br --><!-- MESSAGEBOX-ICON-STYLES ------------------------------------------------------------------><!-- br --><table class="std" style="margin-left: 20px;" cellspacing="10"><!-- br --><tr><!-- br -->  <td style="padding-right: 10px;"><b>Icon-Style:</b></td><!-- br -->  <td><b>Example:</b></td><!-- br --></tr><!-- br --><tr><!-- br -->  <td>0</td><td style="padding-right: 10px;"><img src="img/msgbox_icon0.gif" alt="Screenshot without Icon-Style" /></td><!-- br --></tr><!-- br --><tr><!-- br -->  <td>16</td><td style="padding-right: 10px;"><img src="img/msgbox_icon16.gif" alt="Screenshot MSGBOX-Icon-Style 16" /></td><!-- br --></tr><!-- br --><tr><!-- br -->  <td>32</td><td style="padding-right: 10px;"><img src="img/msgbox_icon32.gif" alt="Screenshot MSGBOX-Icon-Style 32" /></td><!-- br --></tr><!-- br --><tr><!-- br -->  <td>48</td><td style="padding-right: 10px;"><img src="img/msgbox_icon48.gif" alt="Screenshot MSGBOX-Icon-Style 48" /></td><!-- br --></tr><!-- br --><tr><!-- br -->  <td>64</td><td style="padding-right: 10px;"><img src="img/msgbox_icon64.gif" alt="Screenshot MSGBOX-Icon-Style 64" /></td><!-- br --></tr><!-- br --></table><!-- br --><!-- END MESSAGEBOX-BUTTON-STYLES --------------------------------------------------------------><!-- br --><!-- br --><br><!-- br --><br><!-- br -->An example for an individual messagebox with three buttons and a warning icon is the following:<br><!-- br --><br><!-- br -->[code]%start<br /><!-- br -->msgbox <font color="#000080">[button]</font> = <font color="#0000ff">'A simple question!'</font>, <font color="#0000ff">'Please hit one of the buttons.'</font>, <font color="#0000ff">'48'</font> + <font color="#0000ff">'3'</font><br /><!-- br --><br /><!-- br --><b>if</b> <font color="#000080">[button]</font> = <font color="#0000ff">'6'</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Case: Yes</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'You hit the "Yes"-button'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>goto</b> start<br /><!-- br --><b>elseif</b> <font color="#000080">[button]</font> = <font color="#0000ff">'7'</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Case: No</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'You hit the "No"-button'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>goto</b> start<br /><!-- br --><b>else</b><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem Case: Canel</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Goodbye!'</font><br /><!-- br --><b>endif</b>[/code]<!-- br --><br><!-- br --><!-- br -->By adding the value 0 to this style (for the first), 256 (for the second) or 512 (for the third) button, the keyboard input focus can be set to the desired button. Which button has the focus can be seen on the small, dashed rectagle around the button.<br><!-- br --><br><!-- br -->Example:<br><!-- br --><br><!-- br -->[code]msgbox <font color="#0000ff">'Test1'</font>, <font color="#0000ff">'Focus 1'</font>, <font color="#0000ff">'64'</font> + <font color="#0000ff">'3'</font> + <font color="#0000ff">'0'</font><br /><!-- br -->msgbox <font color="#0000ff">'Test2'</font>, <font color="#0000ff">'Focus 2'</font>, <font color="#0000ff">'64'</font> + <font color="#0000ff">'3'</font> + <font color="#0000ff">'256'</font><br /><!-- br -->msgbox <font color="#0000ff">'Test3'</font>, <font color="#0000ff">'Focus 3'</font>, <font color="#0000ff">'64'</font> + <font color="#0000ff">'3'</font> + <font color="#0000ff">'512'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><br><!-- br --><br><!-- br --><!-- br -->Additionally to the messageboxes we talked about until now, RapidBATCH does also provide another possibility to display message- and status-information: The INFOBOX!<br><br><!-- br --><!-- br -->Sometimes it is necessary to display status-informations, e.g. a &quot;Please wait...&quot;-message, when the script is performing a huge amount of system operations or by performing operations that need a lot of computing time. The INFOBOX-dialog can be shown or hidden whenever you, the programmer, wants this. It neither features any OK-button or something like that, nor it can be put into the background. It is just a box with information, displayed on the screen.<!-- br --><!-- br --><div class="image"><img src="img/infobox.gif" alt="Image of an INFOBOX-Dialog" title="INFOBOX-Dialog" /><br /><!-- br -->Image of an INFOBOX-dialog displayed on the screen.</div><!-- br --><!-- br -->A simple example for the use of the INFOBOX-dialog is the following script, just showing a &quot;Hello World&quot; within an INFOBOX, delaying for a time of 5 seconds until it disappears again. To stop the script execution for a desired time, we use the WAIT-instruction here, which expects the number of milliseconds to be waited until the script is continued. 1 second is 1000 milliseconds.<br><!-- br --><br><!-- br -->[code]infobox <font color="#0000ff">'Hello World'</font>, <font color="#0000ff">'show'</font><br /><!-- br -->wait <font color="#0000ff">'5000'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br -->In our case, INFOBOX is hidden automatically, because the script finished. To hide it manually, recall INFOBOX again in the following form<!-- br --><br><!-- br --><br><!-- br -->[code]infobox <font color="#0000ff">''</font>, <font color="#0000ff">'hide'</font>[/code]<!-- br --><br><!-- br --><!-- br -->or hide it using the more professional method, over the pre-declared variable [InfoBox_Enabled]. Is [InfoBox_Enabled] set to '-1' (also represented by the pre-declated variable [false]) or the value 'hide', the dialog is hidden. By setting it to a value of 0 (also represented by the pre-declated variable [true]) or 'show', RapidBATCH shows INFOBOX again with the same message that was set at the last INFOBOX call.<!-- br --><!-- br --><br><!-- br --><br><!-- br -->Example:<br><!-- br --><br><!-- br -->[code]echo <font color="#0000ff">'INFOBOX becomes shown now...'</font><br /><!-- br --><br /><!-- br -->infobox <font color="#0000ff">'Hello World'</font>, <font color="#0000ff">'show'</font><br /><!-- br -->wait <font color="#0000ff">'2000'</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'INFOBOX becomes hidden now...'</font><br /><!-- br --><br /><!-- br --><font color="#000080">[InfoBox_Enabled]</font> = <font color="#0000ff">'hide'</font><br /><!-- br --><font color="#808080">rem also possible:</font><br /><!-- br --><font color="#808080">rem [InfoBox_Enabled] = [false]</font><br /><!-- br --><font color="#808080">rem [InfoBox_Enabled] = '-1'</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'INFOBOX is hidden now!'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br -->Because INFOBOX is an own dialog provided by RapidBATCH (unlike the above discussed messageboxes, which are internally provided by the Windows&reg; operating system itself), INFOBOX can be completely individualized. For example, the programmer can define an individual width and height for the INFOBOX by setting the variables [InfoBox_Height] and [InfoBox_Width] to the desired size of pixels. By setting [InfoBox_X] and [InfoBox_Y] to a desired pixel position, the dialog can also be move to any point on the screen. By setting these variables to the value '0', the dialog is centered on the corresponding axis. By default, [InfoBox_X] and [InfoBox_Y] are both set to '0', centering the dialog automatically on the screen each time it is called.
rb5_en_dialogs_2.html§Prompting data from the user§To prompt values and information from the user, RapidBATCH provides three different, powerful build-in dialogs.<br><!-- br --><br><!-- br --><!-- br -->The mostly used one is the INPUTBOX, that you had already learned to know in the previous examples. This dialog allows to prompt smaller values, e.g. numbers, names or labels, from the user. INPUTBOX is called as a function, which returns the text the user entered in the INPUTBOX's input-field to the corresponding return variable. As parameters, INPUTBOX expects three values: A dialog-title, a prompting text and an optional, pre-defined value that is displayed in the input-field of the dialog. This value can be modified and replaced by the user at dialog run-time.<br><!-- br --><br><!-- br -->A simple example is the already in the basics-chapter presented script, where the script prompts the user for a name and displays this name in an ECHO-dialog.<!-- br --><br><!-- br --><br><!-- br -->[code]<font color="#808080">rem Ask for the user's name</font><br /><!-- br -->inputbox <font color="#000080">[user]</font> = <font color="#0000ff">'Name?'</font>, <font color="#0000ff">'What is your name?'</font>, <font color="#0000ff">''</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Output the prompted name</font><br /><!-- br -->echo <font color="#0000ff">'Your name is: '</font> # <font color="#000080">[user]</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br --><div class="image"><img src="img/inputbox.gif" alt="Image of INPUTBOX-Dialog" title="INFOBOX-Dialog" /><br /><!-- br -->The INPUTBOX-dialog for prompting value from the user</div><!-- br --><!-- br -->If the user clicks the OK-button (or also by simply pressing the Enter-key on the keyboard), the text that has been entered in the text-field is returned by the function. Else, if the user hits the Cancel-button (or presses Esc-key on the keyboard), an empty string is returned.<br><br><!-- br --><!-- br -->The captions displayed on the buttons can be changed by setting the pre-declared variables [InputBox_Ok] and [InputBox_Cancel] to any desired value, for example in other languages than english. By default, the INPUTBOX is displayed centered on the screen; But this can also be changed, using the variables [InputBox_X] and [InputBox_Y]. This has the same effect as with the INFOBOX-dialog: The dialog can be moved to any position on the screen. By setting the value '0' to the particular variable (which is also the default value here again!), the dialog is centered on the particular axis.<!-- br --><br><!-- br --><br><!-- br -->[code]<font color="#000080">[InputBox_Ok]</font> = <font color="#0000ff">'All right!'</font><br /><!-- br --><font color="#000080">[InputBox_Cancel]</font> = <font color="#0000ff">'Stop!!!'</font><br /><!-- br -->inputbox <font color="#000080">[test]</font> = <font color="#0000ff">'Changed button captions'</font>, <font color="#0000ff">'Please enter something:'</font>, <font color="#0000ff">'Hello World'</font><br /><!-- br -->echo <font color="#000080">[test]</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br -->Next to the INPUTBOX-dialog, RapidBATCH also provides the PWDBOX-dialog, which is nothing more than an &quot;INPUTBOX for prompting passwords&quot;, providing instead of a normal input-field a masked input-field, replacing each character with an asterisks (*). A PWDBOX-dialog may (and should!) only be used to prompt on passwords (because of that the &quot;PWD&quot; in &quot;PWDBOX&quot;, a shortcut for &quot;PassWorD&quot;). The parameters for the PWDBOX dialog are the same (also with the same effect) as the ones from INPUTBOX. Because PWDBOX interally uses the same dialog-window than INPUTBOX, the dialog's position is also defined by the variables [InputBox_X] and [InputBox_Y], and also the caption of the buttons can modified by setting [InputBox_Ok] and [InputBox_Cancel] to the desired values.<br><!-- br --><br><!-- br -->[code]pwdbox <font color="#000080">[password]</font> = <font color="#0000ff">'Password'</font>, <font color="#0000ff">'Please enter your password:'</font>, <font color="#0000ff">''</font><br /><!-- br -->echo <font color="#0000ff">'Your password is: '</font> # <font color="#000080">[password]</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><br><!-- br --><!-- br -->Yet, we only had been able to get single-line inputs from the user; Surely these will suffice in the most of all cases, but sometimes it is also necessary to let the user edit huger texts than just one single line. For this purpose, RapidBATCH provides the third of its build-in data input dialogs: The EDITBOX! The EDITBOX-dialog allows to edit a complete text, as it is known from the Windows Notepad-Editor. This dialog provides nothing more than a window, which can be resized, containing one multi-line edit field where text can be edited. On the bottom of the EDITBOX, an OK- and Cancel-button is available, to confirm or cancel the dialog. The success of an EDITBOX can be verified the same way like INPUTBOX: If the OK-button was hit, the function returns the text the user edited, else an empty string.<!-- br --><!-- br --><br><!-- br --><!-- br --><div class="image"><img src="img/editbox.gif" alt="Screenshot of an EDITBOX-dialog" title="EDITBOX-Dialog" /><br /><!-- br -->The EDITBOX-dialog to edit huger amounts of texts</div><!-- br --><!-- br -->Parameters of the EDITBOX-function are a dialog-title, an optional, pre-defined text that is displayed in the edit field at dialog startup and at least a so called mode-style value. This mode-style allows to use EDITBOX in two different modes: The edit-mode (default mode, turned on by specifying the value 'writeable', '0' or [true]) where the user can edit the text displayed in the text-field, and the readonly-mode (turned on by specifying the value 'readonly', '-1' or [false]), making the text read-only, so that it only can be viewed, but not changed. <!-- br --><br><!-- br --><br><!-- br -->Example:<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem Editing larger texts like with a text editor using the EDITBOX-dialog</font><br /><!-- br -->editbox <font color="#000080">[text]</font> = <font color="#0000ff">'Please enter a text:'</font>, <font color="#0000ff">''</font>, <font color="#0000ff">'writeable'</font><br /><!-- br -->msgbox <font color="#0000ff">'The text you entered:'</font>, <font color="#000080">[text]</font>, <font color="#0000ff">'64'</font><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br -->The EDITBOX-dialog can be sized before the dialog startup using the variables [EditBox_Width] and [EditBox_Height]. Same as described in the previous dialogs, EDITBOX is also displayed centered, by default. To change its position to any desired screen-position, use the variables [EditBox_X] and [EditBox_Y], and set them to any pixel position you wish. By setting one of these two variables to value '0', the dialog is centered on the screen on the particular axis, as it is the case at the allready described dialogs.<!-- br --><br><!-- br --><br><!-- br -->The captions of the buttons displayed on the EDITBOX-dialog can be changed equivalently to INPUTBOX, by using the pre-declared variables [EditBox_Ok] and [EditBox_Cancel]. By setting one of these variables to an empty-string, the particular button becomes invisible, so that it is not shown on the dialog at run-time. This can be useful, e.g. when you just want to view a text and provide a &quot;Next&quot;-button only. The following example, a file-viewer script, shows how this is be done (the functions OPENBOX and READFILE are discussed later):<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem file-viewer script using the EDITBOX-dialog</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem prompt a filename to open and view</font><br /><!-- br -->openbox <font color="#000080">[file]</font> = <font color="#0000ff">'Please select a file:'</font>, <font color="#0000ff">'Text files|*.txt'</font><br /><!-- br --><b>if</b> <font color="#000080">[file]</font> = <font color="#0000ff">''</font> <b>halt</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem read file content to [text]</font><br /><!-- br -->readfile <font color="#000080">[text]</font> = <font color="#000080">[file]</font>, <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem customize EDITBOX</font><br /><!-- br --><font color="#000080">[EditBox_Ok]</font> = <font color="#0000ff">''</font><br /><!-- br --><font color="#000080">[EditBox_Cancel]</font> = <font color="#0000ff">'&Next &gt;'</font><br /><!-- br --><font color="#000080">[EditBox_Width]</font> = <font color="#0000ff">'450'</font><br /><!-- br --><font color="#000080">[EditBox_Height]</font> = <font color="#0000ff">'480'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem display the text...</font><br /><!-- br -->editbox <font color="#000080">[text]</font> = <font color="#0000ff">'Content of '</font> # <font color="#000080">[file]</font>, <font color="#000080">[text]</font>, <font color="#0000ff">'readonly'</font><br /><!-- br --><b>end</b>[/code]
rb5_en_dialogs_3.html§Menus§Yet, we already discussed possibilities to get data from the user. But this data was always freely defineable by the user. To let the user select a value from only a pre-defined range of values, RapidBATCH does also provide two powerful build-in dialog solutions that can be used for different purposes.<!-- br --><br><!-- br --><br><!-- br -->The best choice for simple menus, file-selections and other things is the LISTBOX-dialog. This dialog can be used in arbitrary ways, as a menu, a selection or to simply give an overview about something.<!-- br --><!-- br --><div class="image"><img src="img/listbox.gif" alt="Image of a LISTBOX-dialog" title="LISTBOX-dialog" /><br />Very versatile and fast implementation of choices and menus: The LISTBOX-dialog!</div><!-- br --><!-- br -->LISTBOX expects, next to the return variable retrieving the selected item(s) from the list, two parameters, where the first one is the dialog title that is displayed in the title bar of the LISTBOX, and the second one is a so called list of items, to be displayed. In RapidBATCH, a list of items is a string, where each item is separated by a special separation character, which is, by default, the pipe-character (|). This character can be changed globally for all build-in instruction or function expecting such a list of items, using the pre-declared variable [std_sep]. Lists are used by various RapidBATCH build-in functionalities, especially later, when we go over to system operations and customized dialog programming. To assign an array of entries to a listbox, first call the function &quot;arraytolist&quot; that is provided within the ARRAY.RB extending functions library delivered with the RapidBATCH software package, and pass on the by this function returned string to LISTBOX.<br><br><!-- br --><!-- br -->As mentioned, the LISTBOX-function returns the value the user selected or, if the user hits the dialog's close-button in the upper-right corner or he does not take any selection and hit OK, the return value is an empty-string here again, equivalently to the already discussed dialog.<!-- br --><br><!-- br --><br><!-- br -->A simple script using a LISTBOX-dialog is the following one:<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem Simple menu using the LISTBOX:</font><br /><!-- br -->listbox <font color="#000080">[selection]</font> = <font color="#0000ff">'Menu'</font>, <font color="#0000ff">'Menu entry 1|Menu entry 2|Menu entry 3'</font><br /><!-- br --><br /><!-- br --><b>if</b> <font color="#000080">[selection]</font> = <font color="#0000ff">''</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'No item has been chosen!'</font><br /><!-- br --><b>else</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Selected item is: '</font> # <font color="#000080">[selection]</font><br /><!-- br --><b>endif</b><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br -->The LISTBOX is also very customizable. Equivalent to all of the already discussed RapidBATCH build-in dialogs, the appearance and look of the LISTBOX can also be modified using pre-declared variables RapidBATCH always provides by default. Using [ListBox_Width] and [ListBox_Height], the dialog's startup-size can changed to any desired size. [ListBox_X] and [ListBox_Y] allow the positioning of the dialog on the screen. Also here, the dialog is (defaultly) centered on the corresponding axis if these variables are set to '0'.<br><!-- br -->By setting [ListBox_Ok], the caption of the OK-button the dialog provides can be changed or, by setting [ListBox_Ok] to an empty-string, the whole button can be hidden.<br><!-- br -->To allow a multiple-choice selection within the LISTBOX at run-time, set the variable [ListBox_MultiSel] to '0'. If this variable is set to '0', the user can select more than one, or even all entries the LISTBOX is displaying. In such a case, the return variable will also be a list of those selected items, each separated by the pipe-character, which can be processed then.<!-- br --><!-- br --><br><!-- br --><br><!-- br -->The following script demonstrates the usage of the above discussed variables.<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem generate file list (a list is already returned by the FINDFILES-function)</font><br /><!-- br -->findfiles <font color="#000080">[files]</font> = <font color="#0000ff">'C:\WINDOWS\*.*'</font>, <font color="#0000ff">'1'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem provide a possibility to select files</font><br /><!-- br --><font color="#000080">[ListBox_Width]</font> = <font color="#0000ff">'300'</font><br /><!-- br --><font color="#000080">[ListBox_Height]</font> = <font color="#0000ff">'500'</font><br /><!-- br --><font color="#000080">[ListBox_MultiSel]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><font color="#000080">[ListBox_Ok]</font> = <font color="#0000ff">'Select!'</font><br /><!-- br -->listbox <font color="#000080">[selection]</font> = <font color="#0000ff">'Please select one or more files:'</font>, <font color="#000080">[files]</font><br /><!-- br --><br /><!-- br --><b>if</b> <font color="#000080">[selection]</font> = <font color="#0000ff">''</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'No item was selected!'</font><br /><!-- br --><b>else</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The selected files are (as a list): '</font> # <font color="#000080">[selection]</font><br /><!-- br --><b>endif</b><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><br><!-- br --><!-- br -->Next to the LISTBOX-dialog, RapidBATCH does also provide another, very professional menu-dialog: The TRAYMENU! TRAYMENU allows to provide a program menu within the Windows task bar, at the left of the system-clock. When this dialog is called, an icon is displayed there. By right-clicking this icon, a menu with the at the TRAYMENU-call defined list of tiems will appear, as a menu. If the user selects one item, the dialog returns this item value. If the user left-clicks the task-bar icon, the dialog returns an empty string. With this dialog, it is possible to create scripts that permantently run in the background, just showing an icon in the taskbar which is the interface to the tasks the script purposively provides.<!-- br --><!-- br --><br><!-- br --><div class="image"><!-- br -->	<img src="img/traymenu1.gif" alt="Image of the TRAYMENU-dialog, only showing the icon" alt="TRAYMENU-dialog with tooltip" /><!-- br -->	&nbsp;<!-- br -->	<img src="img/traymenu2.gif" alt="Image of the TRAYMENU-dialog with an opened menu" alt="TRAYMENU-dialog with opened menu" /><br /><!-- br -->	Simple, but effective and professional: The TRAYMENU-dialog!<!-- br --></div><!-- br --><!-- br -->Basically, TRAYMENU is used the same way like LISTBOX, because it nearly has the same parameters, also with nearly the same usage. The first parameter behind the return-variable retrieving the selected menu-entry, is the text that is displayed as a tooltip when the user moves the mouse over the traymenu-icon at run-time. If this is left empty, no tooltip will be displayed. The next parameter is the list of menu items, that are displayed in the menu when the user right-clicks the tray icon. This list is specified the same manner as at LISTBOX, as a string of items where each item is separated by pipe-characters. If this parameter is also left empty, no menu is build, and the icon can only be left-clicked to start an operation.<!-- br --><br><!-- br --><br><!-- br -->[code]traymenu <font color="#000080">[item]</font> = <font color="#0000ff">'Please select an item...'</font>, <font color="#0000ff">'Item 1|Item 2|Item 3'</font><br /><!-- br --><br /><!-- br --><b>if</b> <font color="#000080">[item]</font> ! <font color="#0000ff">''</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The selected item is: '</font> # <font color="#000080">[item]</font><br /><!-- br --><b>else</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'You hit the icon!'</font><br /><!-- br --><b>endif</b><br /><!-- br --><b>end</b>[/code]<!-- br --><br><!-- br --><!-- br -->By the way, to add a so called separator to a menu (a vertical line, visually grouping/separating different menu entry groups) can be inserted by just specifying a hyphen as one item entry in the item list that is passed to the function.<br><br><!-- br --><!-- br -->Example:<!-- br --><br><br><!-- br -->[code]traymenu <font color="#000080">[item]</font> = <font color="#0000ff">'Please select an item...'</font>, <font color="#0000ff">'Item &amp;1|Item &amp;2|Item &amp;3|-|B&amp;Quit'</font>[/code]<!-- br --><br><!-- br -->By dafault, TRAYMENU uses always the default-icon of the application it is executed with as tray icon. In scripts ran by the interpreter, this is always the interpreter's RapidBATCH default-icon, in compiled scripts the icon linked to the executable file.<br><!-- br -->But in both cases, it is possible to use and display an external icon file, using the pre-declared variable [app_icon]. If [app_icon] is empty (this is the default value), the application's default icon is used, else, if [app_icon] is set to an external icon-filename (.ICO-file extension), this icon will be used within all dialogs RapidBATCH provides.<br><!-- br --><br><!-- br -->Example:<br><!-- br --><br><!-- br -->[code]<font color="#808080">rem TRAYMENU with different icons</font><br /><!-- br --><font color="#000080">[app_icon]</font> = <font color="#0000ff">'..\icons\orca1.ico'</font><br /><!-- br -->traymenu <font color="#000080">[item]</font> = <font color="#0000ff">'Please select an item...'</font>, <font color="#0000ff">'Item &amp;1|Item &amp;2|Item &amp;3|-|B&amp;Quit'</font><br />[/code]
rb5_en_dialogs_4.html§Dialogs for file- and folder-selection§Not rarely, it is especially when writing system maintainance scripts, required to ask the user for pathes, e.g. to filenames or folders. The usage of the INPUTBOX may be one possility to do this, but here, the user has to know the complete path to a file or directory, so that such a solution won't be the kindliest way for the user. But here, RapidBATCH will also support you with three great dialogs: OPENBOX, SAVEBOX and FOLDERBOX!<!-- br --><!-- br --><!-- br --><br><!-- br --><br><!-- br --><!-- br -->The dialogs OPENBOX and SAVEBOX make it possible to select or enter a filename and to browse through the computer's file system. Additionally, a file-filter can be defined, displaying only a special group of files, following a pattern that is defined by a so called filter definition. This filter is set by using wildcards, * and ?, as it is known from the DOS prompt's dir-command.<!-- br --><br><!-- br --><br><!-- br -->The following example script provides a file open dialog to select any file from the filesystem. The path to this file is displayed in the following ECHO-dialog.<br><br><!-- br --><!-- br -->[code]openbox <font color="#000080">[file]</font> = <font <!-- br -->color="#0000ff">'Please select a file...'</font>, <font <!-- br -->color="#0000ff">'View all files|*.*'</font><br /><!-- br -->echo <font color="#0000ff">'The path to your file is: '</font> <!-- br --># <font color="#000080">[file]</font><br /><!-- br --><b>end</b>[/code]<!-- br --><!-- br --><div class="image"><img src="img/openbox.gif" alt="Screenshot of an OPENBOX-dialog" title="The OPENBOX-Dialog" /><br /><!-- br -->The OPENBOX function at run-time, presenting an &quot;Open file&quot;-dialog to the user</div><!-- br --><!-- br -->Equivalently to all of the yet disussed dialogs, OPENBOX (same behavior at SAVEBOX) returns an empty-string when the filename input-field was left blank, the dialog's close-button was pressed or the cancel-button was clicked. Else, the selected filename is returned and stored to the return variable in front of the parameter list. As parameters, both functions expect a dialog title, which can be a prompting text, and the above mentioned file filter, that needs to be specified as a list of items again in the following order:<!-- br --><!-- br --><br><!-- br --><br><!-- br --><b>Filter description or labeling | Filter</b><!-- br --><br><!-- br --><br><!-- br --><!-- br -->The above script creates a filter *.* (= this whill filter all files having a file extension) and names it &quot;View all files&quot;. If we now only want to filter text-files (with the .TXT file extension), the following filter must be used:<!-- br --><!-- br --><!-- br --><br><!-- br --><br><!-- br --><b>Text-files|*.txt</b><!-- br --><br><!-- br --><br><!-- br --><!-- br -->OPEN- and SAVEBOX allow both to switch between different filters, if more than one is given. To specify more than one file-filer, just add another filter, separated by a pipe-character (or the as [std_sep] defined standard separation character for lists) to the previous one. The following line shows how a filter is defined to switch between filters for EXE-files, COM-files and BAT-files.<!-- br --><!-- br --><br><!-- br --><br><!-- br --><b>EXE-Files|*.exe|COM-Files|*.com|Batch-Files|*.bat</b><!-- br --><br><!-- br --><br><!-- br --><!-- br -->It is also possbile to use different filter masks under one general filter name. For this, each filter must be separated by a colon (;). The following filter displays all executable files (.EXE, .COM, .BAT) under the general filter name &quot;Executable files&quot;, and additionally provides another filter for viewing all types of files.<!-- br --><!-- br --><br><!-- br --><br><!-- br --><b>Executable files|*.exe;*.com;*.bat|All files|*.*</b><!-- br --><br><!-- br --><br><!-- br --><!-- br -->By default, OPENBOX and SAVEBOX do only allow to select one file. But to allow a multiple selection of files, RapidBATCH provides the pre-declared variables [OpenBox_MultiSel] and [SaveBox_MultiSel]. If the corresponding variable for the desired dialog is set to 0 before the function is executed, more than one file can be selected. The selected files are returned as a list of items with this speciality: To save memory space, the first element of the list contains the path of the folder to the files the user selected, the next, by pipe-characters separated list items, are the single filenames within this folder.<!-- br --><!-- br --><br><!-- br --><br><!-- br -->The following script demonstrates how multiple file selection are processed.<!-- br --><!-- br --><br><br><!-- br -->[code]<font color="#808080">rem allow multiple file selection on the OPENBOX-dialog</font><br /><!-- br --><font color="#000080">[OpenBox_MultiSel]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem let the user select the files</font><br /><!-- br -->openbox <font color="#000080">[file_list]</font> = <font color="#0000ff">'Select multiple files'</font>, <font color="#0000ff">'All files|*.*'</font><br /><!-- br --><br /><!-- br --><b>if</b> <font color="#000080">[file_list]</font> ! <font color="#0000ff">''</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem read the path</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;gettok <font color="#000080">[path]</font> = <font color="#000080">[file_list]</font>, <font color="#0000ff">'|'</font>, <font color="#0000ff">'1'</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem read the files list</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> = <font color="#0000ff">'1'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem read next file</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gettok <font color="#000080">[file]</font> = <font color="#000080">[file_list]</font>, <font color="#0000ff">'|'</font>, <font color="#000080">[i]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[file]</font> ! <font color="#0000ff">''</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'File No. '</font> # (<font color="#000080">[i]</font> - <font color="#0000ff">'1'</font>) # <font color="#0000ff">': '</font> # <font color="#000080">[path]</font> # <font color="#0000ff">'\'</font> # <font color="#000080">[file]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>elseif</b> <font color="#000080">[file]</font> = <font color="#0000ff">''</font> & <font color="#000080">[i]</font> = <font color="#0000ff">'2'</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem if the user selected only one file, the file name is</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem already stored in [path]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The only chosen file is: '</font> # <font color="#000080">[path]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>until</b> <font color="#000080">[file]</font> = <font color="#0000ff">''</font><br /><!-- br --><b>endif</b>[/code]<!-- br --><!-- br --><div class="image"><img src="img/openbox_multisel.gif" alt="Selection of multiple files within an OPENBOX-dialog" title="OPENBOX-dialog with multiple selections" /><br /><!-- br -->Multiple selection of files within a &quot;File open&quot;-dialog</div><!-- br --><!-- br --><!-- br -->If [OpenBox_MultiSel] or [SaveBox_MultiSel] is set back to '-1' again, the dialog will support single file selection only.<!-- br --><!-- br --><br><br><!-- br -->In many applications, the user don't wants to miss the comfort of a default file extension, that is automatically appended to the inserted filename without explicitly specifying it. For this comfort, RapidBATCH provides the pre-declared variables [OpenBox_DefFileExt] and equivalently again to SAVEBOX, [SaveBox_DefFileExt]. By setting this variable to a desired default-file extension (without the dot in front of it!), the respective dialog will append this extension to the returned filename automatically, if it is not given.<!-- br --><br><!-- br --><br><!-- br -->[code]<font color="#808080">rem setting the default-extension for SAVEBOX: txt-file</font><br /><!-- br --><font color="#000080">[SaveBox_DefFileExt]</font> = <font color="#0000ff">'txt'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem asking for the filename</font><br /><!-- br -->savebox <font color="#000080">[file]</font> = <font color="#0000ff">'Save file as...'</font>, <font color="#0000ff">'Text files|*.txt'</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'Filename (with extension!): '</font> # <font color="#000080">[file]</font>[/code]<!-- br --><!-- br --><br><br><!-- br --><div class="image"><img src="img/folderbox.gif" alt="Effortless selection of directories within the file system, using the FOLDERBOX-dialog" title="FOLDERBOX-dialog" /><br /><!-- br -->Effortless and professional selection of a folder, using the FOLDERBOX-function.</div><!-- br --><!-- br -->Next to OPENBOX and SAVEBOX, RapidBATCH also provides the FOLDERBOX-function to let the user select a directory from the file-system. Return value is the absolute path to the selected folder. As parameters, FOLDERBOX expects a prompting text for the dialog, and an optional default path, that is automatically opened by default at dialog start up.<br><!-- br --><!-- br -->The following script opens a FOLDERBOX-dialog in the Windows system directory.<!-- br --><br><br><!-- br --><!-- br -->[code]<font color="#808080">rem selecting a folder</font><br /><!-- br -->folderbox <font color="#000080">[folder]</font> = <font color="#0000ff">'Please select a folder:'</font>, <font color="#000080">[windir]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem the return value is the absolute path to the selected folder</font><br /><!-- br --><b>if</b> <font color="#000080">[folder]</font> ! <font color="#0000ff">''</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The selected folder is: '</font> # <font color="#000080">[folder]</font><br /><!-- br --><b>else</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'You did not selected any folder.'</font><br /><!-- br --><b>endif</b>[/code]<!-- br --><!-- br -->Same as in all the other build-in dialogs, FOLDERBOX will also return an empty-string when the user hits the dialog's close- or cancel-button, else the absolute folder path.
