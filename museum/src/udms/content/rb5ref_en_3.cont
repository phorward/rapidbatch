template_ref_en.html§0TITLE§1SYNTAX§1DESCRIPTION§1EXAMPLE§1REMARKS
rb5ref_en_3_chdirmkdirrmdir.html§CHDIR, MKDIR, RMDIR§CHDIR path<br><!-- br -->MKDIR path<br><!-- br -->RMDIR path§CHDIR changes the current working directory to the specified path. MKDIR creates the specified path.<br><!-- br -->The RMDIR-instruction is used to delete a directory, which must be completely empty.§chdir <font color="#0000ff">'c:\jmksf\rb5'</font><br /><!-- br -->mkdir <font color="#0000ff">'c:\test'</font><br /><!-- br -->rmdir <font color="#0000ff">'c:\test'</font><!-- br -->§If the particular operation succeeded, [errorcode] gets the value '0', else '-1'.<br><!-- br -->This makes it possible to check if e.g. a directory could be created or not.
rb5ref_en_3_system.html§SYSTEM§SYSTEM command§Executes an operating system command (DOS-commands). The script cannot continue before the SYSTEM-instruction finished its command.§system <font color="#0000ff">'dir &gt;list.txt'</font>§The variable [errorcode] gets the value '-1', if no COMMAND.COM (Win 95, 98, ME) or no CMD.EXE (Win NT, 2000, XP, 2003, Vista) was found, else '0'.
rb5ref_en_3_shell.html§SHELL§SHELL path, showmode§Runs an external program.<br><!-- br --><br><!-- br -->The script calls the program parallel, so that both the script and the program are executed at the same time (multitasking). The instruction expects the program path (with .EXE, .COM or .BAT extension) and a so called show mode, specified over the <i>showmode</i>-parameter. Possible values are 'show' (or '0'), 'hide' (or '1'), 'maximized' (or '2') and 'minimized' (or '3').§shell <font color="#0000ff">'c:\windows\calc.exe'</font>, <font color="#0000ff">'show'</font><br /><!-- br -->shell <font color="#0000ff">'c:\windows\desktop\test.bat'</font>, <font color="#0000ff">'hide'</font><!-- br -->§[errorcode] gets a value &gt; 32 if it succeeds. This number is the system process ID of the program.
rb5ref_en_3_call.html§CALL§CALL path, showmode§Runs an external program in modal-mode. That means that the RapidBATCH script suspends its execution until the called program terminates.<br><!-- br -->Equivalently to the SHELL-instruction, CALL expects as second parameter a show-mode, represented by a number or one of the build-in constants. Possible values are 'show' (or '0'), 'hide' (or '1'), 'maximized' (or '2') and 'minimized' (or '3').§echo <font color="#0000ff">'Running Notepad...'</font><br /><!-- br -->call <font color="#0000ff">'notepad.exe'</font>,<font color="#0000ff">'show'</font><br /><!-- br -->echo <font color="#0000ff">'Notepad was terminated.'</font><br /><!-- br --><b>end</b><!-- br -->§[errorcode] gets '-1', if an error occurs, else the program's exit code.
rb5ref_en_3_open.html§OPEN§OPEN path§OPEN runs external programs, opens documents with their associated programs or loads a specified internet-URL in the default-browser.§open <font color="#0000ff">'hello.doc'</font><br /><!-- br -->open <font color="#0000ff">'http://www.rapidbatch.com/'</font><br /><!-- br -->open <font color="#0000ff">'calc.exe'</font><br /><!-- br -->open <font color="#0000ff">'c\jmksf\rb5\samples\hello.rb'</font><!-- br -->§none
rb5ref_en_3_newfiledelfile.html§NEWFILE, DELFILE§NEWFILE filename<br><!-- br -->DELFILE filename§NEWFILE creates a new, empty file in the file-system. If the file does already exist, it is overwritten by the new file.<br><!-- br -->DELFILE deletes a file irrepealable from the file system (it is not moved into the Recycle Bin first!).§<font color="#808080">rem create new file</font><br /><!-- br -->newfile <font color="#0000ff">'my_file.txt'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem delete a temp-file</font><br /><!-- br -->delfile <font color="#0000ff">'output.tmp'</font><!-- br -->§If the particular operation succeeded, [errorcode] gets the value '0', else '-1'.
rb5ref_en_3_copyfilerenamefile.html§COPYFILE, RENAMEFILE§COPYFILE source-file, target-file<br><!-- br -->RENAMEFILE source-file, target-file§COPYFILE copies the as <i>source-file</i> specified file to the as <i>target-file</i> specified file.<br><!-- br -->RENAMEFILE moves/renames the as <i>source-file</i> specified file to the as <i>target-file</i> specified file.<br><!-- br --><br><!-- br --><!-- br -->Both parameters can be specified as relative or absolute file-paths. The target-file can be the path to any other folder or drive.§<font color="#808080">rem copy a file...</font><br /><!-- br -->copyfile <font color="#0000ff">'c:\jmksf\rb5\samples\hello.rb'</font>, <font color="#0000ff">'a:\hello.rb'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem renaming a file...</font><br /><!-- br -->renamefile <font color="#0000ff">'c:\test.neu'</font>, <font color="#0000ff">'c:\test.old'</font><!-- br -->§If the particular operation succeeds, [errorcode] get the value '0', else '-1'.
rb5ref_en_3_fileexists.html§FILEEXISTS§FILEEXISTS result = filename§Verifies a file's existence. If the as <i>filename</i> specified file was found, the function returns '0', else '-1'.§fileexists <font color="#000080">[errorcode]</font> = <font color="#0000ff">'c:\windows\calc.exe'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#0000ff">'0'</font> echo <font color="#0000ff">'The program file CALC.EXE exists!'</font><!-- br -->§none
rb5ref_en_3_getenvletenv.html§GETENV, LETENV§GETENV value = environment-variable<br><!-- br -->LETENV environment-variable-assignment§GETENV is able to read the content of the Windows operating system's environment variables. On success, the value of the as <i>enviroment-variable</i> specified name of the variable that should be read, is returned.<br><!-- br -->LETENV creates a new or resets an existing environment variable. This assignment must be specified as value in the following format: &quot;VARIABLE=VALUE&quot;.§<font color="#808080">rem get the content of the PATH-variable</font><br /><!-- br -->getenv <font color="#000080">[pathvar]</font> = <font color="#0000ff">'PATH'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem create a new variable, TEST</font><br /><!-- br -->letenv <font color="#0000ff">'TEST=Hello World'</font>§Changed or newly created envrionment variables are only affecting programs and other scripts called by the RapidBATCH script that sets/changes the variables. It is not possible to change the variables globally to all running programs and processes.
rb5ref_en_3_findfiles.html§FINDFILES§FINDFILES list-of-files = file-filter, recoursion-depth§Reads all files within the specified directory (optionally with all its sub-directories) and returns a list of files. The purpose of this function is to read out the content of directories, to provide file listings or to perform system operation on a set of files that e.g. fit to the specified file-filter.<br><br><!-- br --><!-- br -->As parameters, FINDFILES first expects a file filter, which can also be a combination of a directory-path (absolute or relative) and uses the wilcards * and ?. As second parameter, FINDFILES expects a recousion-depth value that specifies the maximum recousion depth FINDFILES should perform. If this recursion depth is set to '1', FINDFILES will only return files that fit to the particular filter in the specified directory (or if no was specified, in the current directory), if the value '2' is assigned, FINDFILES returns files that fit to the particular filter in the specified directory and all its sub-directories up to one level, and so on. By specifing the value '0', FINDFILES will go to a recoursion-depth of maximal 255 sub-directory-levels - a nearly impossible depth.<br><!-- br --><br><!-- br -->The return-value is a list of files, where each file is separated by the list-separation-character defined in the pre-declared variable [std_sep]. By default, this is the pipe-character (|). §<font color="#808080">rem List all files in the RB5-directory without reading sub-folders</font><br /><!-- br -->chdir <font color="#0000ff">'c:\jmksf\rb5'</font><br /><!-- br -->findfiles <font color="#000080">[filelist]</font> = <font color="#0000ff">'*.*'</font>,<font color="#0000ff">'1'</font><br /><!-- br -->replacevar <font color="#000080">[filelist]</font> = <font color="#000080">[filelist]</font>, <font color="#000080">[std_sep]</font>, <font color="#000080">[new_line]</font><br /><!-- br -->echo <font color="#000080">[filelist]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem List all exe-files in C:\JMKSF (product directory)</font><br /><!-- br -->findfiles <font color="#000080">[filelist]</font> = <font color="#0000ff">'c:\jmksf\*.exe'</font>,<font color="#0000ff">'0'</font><br /><!-- br -->replacevar <font color="#000080">[filelist]</font> = <font color="#000080">[filelist]</font>, <font color="#000080">[std_sep]</font>, <font color="#000080">[new_line]</font><br /><!-- br -->echo <font color="#000080">[filelist]</font>§The file list returned by FINDFILES can be processed by using the GETTOK-function within a REPEAT...UNTIL-loop, by going through the several file names and perform the desired operation to each file. To create an array from the file-list, use the procedures provided by the ARRAY.RB function-library provided with the RapidBATCH software package.
rb5ref_en_3_filesize.html§FILESIZE§FILESIZE file-size = filename§Determines the size of a file, in bytes, and returns this value.§filesize <font color="#000080">[bytes]</font> = <font color="#0000ff">'c:\command.com'</font><br /><!-- br -->echo <font color="#0000ff">'COMMAND.COM has a size of '</font> # <font color="#000080">[bytes]</font> # <font color="#0000ff">' Bytes'</font><br /><!-- br --><b>end</b><!-- br -->§To convert a file size to kilo-, mega-, giga- or terrabyte, the byte-value must be divided with 1024 in each case.<br><!-- br -->For example, a MP3-file has a size of 3853881 bytes. 3853881 divided by 1024 are 3763.55 kilobytes. 3763.55 kilobytes divided again by 1024 are 3.67 mega bytes. This can be continued up to terrabyte (1 terrabyte is 1024 gigabytes).
rb5ref_en_3_diskfreedisksize.html§DISKFREE, DISKSIZE§DISKFREE disk-space = drive-letter<br><!-- br -->DISKSIZE disk-space = drive-letter§DISKFREE returns the rest of free space on a drive, in bytes.<br><!-- br -->DISKSIZE returns the whole capacity a drive provides, in bytes.§diskfree <font color="#000080">[df]</font> = <font color="#0000ff">'C:\'</font><br /><!-- br -->echo <font color="#0000ff">'There are already '</font> # <font color="#000080">[df]</font> # <font color="#0000ff">' bytes free on drive C:'</font><br /><!-- br -->diskfree <font color="#000080">[ds]</font> = <font color="#0000ff">'C:\'</font><br /><!-- br -->echo <font color="#0000ff">'Drive C: has a capacity of '</font> # <font color="#000080">[ds]</font> # <font color="#0000ff">' bytes.'</font><br /><!-- br --><b>end</b><!-- br -->§To convert a file size to kilo-, mega-, giga- or terrabyte, the byte-value must be divided with 1024 in each case.<br><!-- br -->For example, a MP3-file has a size of 3853881 bytes. 3853881 divided by 1024 are 3763.55 kilobytes. 3763.55 kilobytes divided again by 1024 are 3.67 mega bytes. This can be continued up to terrabyte (1 terrabyte is 1024 gigabytes).
rb5ref_en_3_disktype.html§DISKTYPE§DISKTYPE type-id = drive-letter§Gives information about the type a drive has. The return value is an ID with the following meaning:<!-- br --><br><!-- br --><br><!-- br -->0 = Unknown medium<br><!-- br -->1 = removable memory<br><!-- br -->2 = Fixed medium (e.g. a hard-disk)<br><!-- br -->3 = Remote drive<br><!-- br -->4 = CD-ROM drive<br><!-- br -->5 = RAM-Disk (e.g. USB-Stick)§disktype <font color="#000080">[type]</font> = <font color="#0000ff">'C:\'</font><br /><!-- br --><b>if</b> <font color="#000080">[type]</font> = <font color="#0000ff">'0'</font> <font color="#000080">[type]</font> = <font color="#0000ff">'unknwon '</font><br /><!-- br --><b>if</b> <font color="#000080">[type]</font> = <font color="#0000ff">'1'</font> <font color="#000080">[type]</font> = <font color="#0000ff">'removeable-'</font><br /><!-- br --><b>if</b> <font color="#000080">[type]</font> = <font color="#0000ff">'2'</font> <font color="#000080">[type]</font> = <font color="#0000ff">'fixed '</font><br /><!-- br --><b>if</b> <font color="#000080">[type]</font> = <font color="#0000ff">'3'</font> <font color="#000080">[type]</font> = <font color="#0000ff">'remote-'</font><br /><!-- br --><b>if</b> <font color="#000080">[type]</font> = <font color="#0000ff">'4'</font> <font color="#000080">[type]</font> = <font color="#0000ff">'CD-ROM-'</font><br /><!-- br --><b>if</b> <font color="#000080">[type]</font> = <font color="#0000ff">'5'</font> <font color="#000080">[type]</font> = <font color="#0000ff">'RAM-Disk-'</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'Drive C: is a '</font> # <font color="#000080">[type]</font> # <font color="#0000ff">'medium'</font>§none
rb5ref_en_3_getfileattletfileatt.html§GETFILEATT, LETFILEATT§GETFILEATT attribute-status = filename, attribute<br><!-- br -->LETFILEATT filename, attribute§The GETFILEATT-function provides informations if a secified file attribute of the specified file is enabled or not. Possible attributes for the <i>attribute</i>-parameter are 'NORMAL' (or '0'), 'ARCHIVED' (or '1'), 'READONLY' (or '2'), 'COMPRESSED' (or '3'), 'DIRECTORY' (or '4'), 'HIDDEN' (or '5') and 'SYSTEM' (or '6'). You can also use the identifiers, such as 'ARCHIVED' or 'READONLY' instead of the numerical values.<br><br><!-- br -->Return value of the function is '0' if the asked attribute is set, else '-1'.<br><br><!-- br --><!-- br -->The LETFILEATT-instruction sets the specified attribute of the specified file to enabled. You can use the same attributes and their identifiers that are possible at GETFILEATT, but you can not set the modes 'COMPRESSED' (or '3') or 'DIRECTORY' (or '4') to a file.§<font color="#000080">[file]</font> = <font color="#0000ff">'..\readme.txt'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem read attributes</font><br /><!-- br --><font color="#000080">[i]</font> = <font color="#0000ff">'1'</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;getfileatt <font color="#000080">[ret]</font> = <font color="#000080">[file]</font>,<font color="#000080">[i]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[res]</font> = <font color="#000080">[res]</font> # <font color="#000080">[i]</font> # <font color="#0000ff">' = '</font> # <font color="#000080">[ret]</font> # <font color="#000080">[new_line]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br /><!-- br --><b>until</b> <font color="#000080">[i]</font> &gt; <font color="#0000ff">'6'</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'File Attributes of '</font> # <font color="#000080">[file]</font> # <font color="#000080">[new_line]</font> # <font color="#000080">[new_line]</font> # <font color="#000080">[res]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem set a file to normal file</font><br /><!-- br -->letfileatt <font color="#000080">[file]</font>, <font color="#0000ff">'normal'</font><!-- br -->§none
rb5ref_en_3_readfile.html§READFILE§READFILE line = filename, line-to-read§Reads the line at number <i>line-to-read</i> from the file specified at <i>filename</i>, and returns this line. If the file's end is reached or if the file couldn't be found, [errorcode] gets -1 and the return value is &quot;EOF&quot;, which means &quot;End Of File&quot;.<!-- br -->If the assigned line-number is lower than 1, READFILE reads the whole file content and returns it.§<font color="#808080">rem read first line...</font><br /><!-- br -->readfile <font color="#000080">[text]</font> = <font color="#0000ff">'c:\test.txt'</font>, <font color="#0000ff">'1'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem read the whole file...</font><br /><!-- br -->readfile <font color="#000080">[text]</font> = <font color="#0000ff">'c:\test.txt'</font>, <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem display the first 10 lines from the file</font><br /><!-- br --><font color="#000080">[i]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><font color="#000080">[text]</font> = <font color="#0000ff">''</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;readfile <font color="#000080">[line]</font> = <font color="#0000ff">'C:\jmksf\rb5\readme.txt'</font>,<font color="#000080">[i]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[line]</font> ! <font color="#0000ff">'EOF'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[text]</font> # <font color="#000080">[line]</font> # <font color="#000080">[new_line]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><b>until</b> <font color="#000080">[i]</font> = <font color="#0000ff">'10'</font> | <font color="#000080">[line]</font> = <font color="#0000ff">'EOF'</font><br /><!-- br --><br /><!-- br -->echo <font color="#000080">[text]</font><!-- br -->§Use the GETFILE-function, to read data on byte-level from a file (e.g. a binary-file).
rb5ref_en_3_writefile.html§WRITEFILE§WRITEFILE filename, expression§Writes the specified string-expression to the file <i>filename</i>, by appending the string-expression as a new line to the file. The content of the file is not overwritten, but enhanced. If the file does not exists, it is automatically created.§writefile <font color="#0000ff">'c:\test.txt'</font>, <font color="#0000ff">'Hello World'</font>§The variable [errorcode] gets '-1', if the file could not be created or written, else '0'.<br><br><!-- br --><!-- br -->By default, WRITEFILE automatically appends a Windows-linebreak at the end of the string to be written. It is possible to dynamically change this end-of-line value to be written via the variable [eol], so Unix- or Mac-formatted files can be written same like self-defined file formats.<!-- br --><br><br><!-- br --><!-- br -->Use the PUTFILE-instruction to write data on binary-level to a file (e.g. a binary-file).
rb5ref_en_3_getfile.html§GETFILE§GETFILE list-of-charcodes = filename, start-position, number-of-bytes§Reads data from a file at binary-level.<br><br><!-- br --><!-- br -->Next to the filename, this function expects a starting position (byte-position where the binary read should beginn) and a length of bytes that should be read (<i>number-of-bytes</i>-parameter) from <i>start-position</i>.<!-- br -->The returned value is a list of ASCII-character codes, where each code is one byte (= character) in the file. This list uses the RapidBATCH list separation character that is specified in the variable [std_sep], and by default a pipe-character (|).§<font color="#808080">rem example for writing and reading a file at byte-level</font><br /><!-- br -->newfile <font color="#0000ff">'test.txt'</font><br /><!-- br --><font color="#808080">rem write: "Hello World"</font><br /><!-- br -->putfile <font color="#0000ff">'test.txt'</font>, <font color="#0000ff">'1'</font>, <font color="#0000ff">'72|101|108|108|111|32|87|111|114|108|100'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem read the word "World" and convert it to plain text</font><br /><!-- br -->getfile <font color="#000080">[word]</font> = <font color="#0000ff">'test.txt'</font>, <font color="#0000ff">'7'</font>, <font color="#0000ff">'5'</font><br /><!-- br -->echo <font color="#0000ff">'List of ascii-charcodes: '</font> # <font color="#000080">[word]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem converting routine</font><br /><!-- br --><font color="#000080">[i]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;gettok <font color="#000080">[ch]</font> = <font color="#000080">[word]</font>, <font color="#0000ff">'|'</font>, <font color="#000080">[i]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[ch]</font> ! <font color="#0000ff">''</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getchr <font color="#000080">[ch]</font> = <font color="#000080">[ch]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[plainword]</font> # <font color="#000080">[ch]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><b>until</b> <font color="#000080">[ch]</font> = <font color="#0000ff">''</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem display the plain text</font><br /><!-- br -->echo <font color="#0000ff">'Plain text: '</font> # <font color="#000080">[plainword]</font>§Use the READFILE-function to read a text file's content line-by-line and in plain-text.
rb5ref_en_3_putfile.html§PUTFILE§PUTFILE filename, start-position, list-of-charcodes§Writes data bytewise to a file.<br><!-- br -->The writing operation begins at the as <i>start-position</i> specified byte-position within the file. The data that should be written is specified as a list of ascii-character codes, where each character is separated by the RapidBATCH list separation character that is defined in the variable [std_sep] (by default this is the pipe-character (|)).<br><!-- br -->The file PUTFILE should write to must exist. If it does not exists, the operation fails.§<font color="#808080">rem writing a file binary</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem first we create the file explicitly because it MUST exist!</font><br /><!-- br -->newfile <font color="#0000ff">'bytefile.bin'</font><br /><!-- br --><br /><!-- br --><font color="#000080">[plain]</font> = <font color="#0000ff">'This is plain text that should be written!'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem converting the plain text to a list of ASCII-character codes</font><br /><!-- br --><font color="#000080">[i]</font> = <font color="#0000ff">'0'</font><br /><!-- br -->getlen <font color="#000080">[len]</font> = <font color="#000080">[plain]</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;getcharat <font color="#000080">[ch]</font> = <font color="#000080">[plain]</font>, <font color="#000080">[i]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;getasc <font color="#000080">[ch]</font> = <font color="#000080">[ch]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[listofcharcodes]</font> ! <font color="#0000ff">''</font> <font color="#000080">[listofcharcodes]</font> # <font color="#0000ff">'|'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[listofcharcodes]</font> # <font color="#000080">[ch]</font><br /><!-- br --><b>until</b> <font color="#000080">[i]</font> = <font color="#000080">[len]</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'Plain text: '</font> # <font color="#000080">[plain]</font><br /><!-- br -->echo <font color="#0000ff">'Converted text: '</font> # <font color="#000080">[listofcharcodes]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem writing the data</font><br /><!-- br -->putfile <font color="#0000ff">'bytefile.bin'</font>, <font color="#0000ff">'1'</font>, <font color="#000080">[listofcharcodes]</font><br /><!-- br --><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'PUTFILE failed!'</font><br /><!-- br --><b>endif</b>§Use the NEWFILE-instruction to create a new, empty file explicitly.<br><!-- br -->The variable [errorcode] gets the value '0' if the operation succeeds, else '-1'.
rb5ref_en_3_lockworkstation.html§LOCKWORKSTATION§LOCKWORKSTATION§Locks a Windows 2000, Windows XP, Windows 2003 or Windows Vista Workstation.<br><!-- br -->If this instruction is called on Windows 95/98/ME/NT, nothing will happen.§<font color="#808080">rem lock current workstation?</font><br /><!-- br -->confirm <font color="#000080">[lock]</font> = <font color="#0000ff">'Lock computer?'</font><br /><!-- br --><b>if</b> <font color="#000080">[lock]</font> = <font color="#000080">[true]</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem lock the computer!</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;lockworkstation<br /><!-- br --><b>endif</b>§[errorcode] gets '-1', if RapidBATCH was not able to lock the workstation, else '0'.
rb5ref_en_3_shutdown.html§SHUTDOWN§SHUTDOWN mode§Terminates Windows and shuts down the computer or reboots it.<br><br><!-- br --><!-- br -->As <i>mode</i>, one of the following, numerical values or build-in constants needs to be specified:<!-- br --><!-- br --><ul><!-- br -->  <li>'SHUTDOWN' (or '0') - Shutdown the computer</li><!-- br -->  <li>'REBOOT' (or '1') - Shutdown and reboot the computer</li><!-- br -->  <li>'POWEROFF' (or '2') - Shutdown and power-off (if this is possible by the hardware)</li><!-- br -->  <li>'LOGOFF' (or '3') - Log-off current user only</li><!-- br --></ul>§echo <font color="#0000ff">'Restarting computer...'</font><br /><!-- br -->shutdown <font color="#0000ff">'reboot'</font>§The [errocode]-variable gets '0' if the operation succeeds, else '-1'.
rb5ref_en_3_mci.html§MCI§MCI mci-command-string§Sends a command to the Windows Media Control Interface (MCI), making it possible to play and control any type of media files from a RapidBATCH script, e.g. MIDI, AVI, WAV, MP3, MP4 and so on.§<font color="#808080">rem a tiny mp3 music player ...</font><br /><!-- br -->mci <font color="#0000ff">'open "music.mp3"'</font><br /><!-- br -->mci <font color="#0000ff">'play "music.mp3" wait'</font><br /><!-- br -->mci <font color="#0000ff">'close "music.mp3"'</font><!-- br -->§For extended information to the MCI command library, take a look at the help file MCI.HLP that is providied within the RapidBATCH software package in the \DOC-folder of the RapidBATCH setup directory.<br><!-- br -->The variable [errorcode] gets the result the WinAPI-function mciSendString() returns, so that MCI-error codes can be handled.
rb5ref_en_3_mouseevent.html§MOUSEEVENT§MOUSEEVENT mouse-event, position§Performs mouse-operations remotly on the current compuer.<br><!-- br --><br><!-- br -->The instruction expects as first parameter a mouse-event identifier and the coordinates which are specified in the format &quot;X|Y&quot;. The pipe-character has to be replaced if the RapidBATCH list separation character is changed in the variable [std_sep]. As mouse-event identifiers, one of the following values can be used.<!-- br --><!-- br --><ul><!-- br -->  <li>'0' or 'MOVE' (move the mouse only, no click)</li><!-- br -->  <li>'1' or 'CLICK_LEFT' (perform single left-click)</li><!-- br -->  <li>'2' or 'DBLCLICK_LEFT' (perform double left-click)</li><!-- br -->  <li>'3' or 'CLICK_RIGHT' (perform single right-click)</li><!-- br -->  <li>'4' or 'DBLCLICK_RIGHT' (perform double right-click)</li><!-- br -->  <li>'5' or 'DOWN_LEFT' (hold left mouse key)</li><!-- br -->  <li>'6' or 'UP_LEFT' (leave left mouse key)</li><!-- br -->  <li>'7' or 'DOWN_RIGHT'  (hold right mouse key)</li><!-- br -->  <li>'8' or 'UP_RIGHT' (leave right mouse key)</li><!-- br --></ul>§infobox <font color="#0000ff">'MouseEvent-Demo'</font>, <font color="#0000ff">'show'</font><br /><!-- br -->wait <font color="#0000ff">'1000'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem procedure to show the current X/Y-coordinates</font><br /><!-- br --><b>proc</b> viewpos<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;infobox <font color="#0000ff">'X: '</font> # <font color="#000080">[mouse_x]</font> # <font color="#0000ff">' Y: '</font> # <font color="#000080">[mouse_y]</font>, <font color="#0000ff">'show'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;wait <font color="#0000ff">'1'</font><br /><!-- br --><b>endproc</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem perform horizontal mouse move</font><br /><!-- br --><font color="#000080">[i]</font> = <font color="#000080">[ScreenWidth]</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;mouseevent <font color="#0000ff">'move'</font>, <font color="#000080">[i]</font> # <font color="#0000ff">'|1'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;viewpos<br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> - <font color="#0000ff">'5'</font><br /><!-- br --><b>until</b> <font color="#000080">[i]</font> < <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem perform vertical mouse move</font><br /><!-- br --><font color="#000080">[i]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'5'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;mouseevent <font color="#0000ff">'move'</font>, <font color="#0000ff">'1|'</font> # <font color="#000080">[i]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;viewpos<br /><!-- br --><b>until</b> <font color="#000080">[i]</font> > <font color="#000080">[ScreenHeight]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem perform diagonal mouse move</font><br /><!-- br --><font color="#000080">[i]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'5'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;mouseevent <font color="#0000ff">'move'</font>, <font color="#000080">[i]</font> # <font color="#0000ff">'|'</font> # <font color="#000080">[i]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;viewpos<br /><!-- br --><b>until</b> <font color="#000080">[i]</font> > <font color="#000080">[ScreenWidth]</font><!-- br -->§Use the SENDKEYS-instruction to control other applications remotely by sending keystrokes. If the mouse-event identifier is not known, MOUSEEVENT automatically only performas a mouse move at the specified position.
rb5ref_en_3_sendkeys.html§SENDKEYS§SENDKEYS window-title, keystrokes§Sends keyboard-commands to the application window the the specified text in its window title bar. This instructions makes it possible to simply control any Windows-applications remotely, using a simple macro language for specifying keystrokes.<br><!-- br --><br><!-- br --><!-- br -->Basically, the control-macro-language (SENDKEYS-Script) is build-up very simple: Keystrokes must be specified the same way you would enter them to the keyboard as you use the program to be remotely controlled. So RapidBATCH does nothing else than simulating the keystrokes a user would enter when using the controlled program.<!-- br --><!-- br --><ul><!-- br -->  <li>Simple characters, or even texts, can directly be specified, for example &quot;abc&quot; or &quot;Hello World!&quot;.</li><!-- br -->  <li>Special keys like CTRL, ALT, SHIFT, ENTER and so on must be specified in parentheses, and with their english synonym. For example, when sending the command &quot;Line 1(enter)Line 2&quot; to an application (for example a text-editor), a line-break will be created between &quot;Line 1&quot; and &quot;Line 2&quot;.</li><!-- br -->  <li>To hold down a key, a circumflex-character (^) is prefixed to the desired key or special key. The holding of key must be done if you want to press more than one keys at the same time. For example, the (very long!) keystroke CTRL+ALT+DEL+F1+A is specified as &quot;^(ctrl)^(alt)^(del)^(f1)A&quot;. All hold keys are automatically released when a character follows which should not be hold, or if the end of the keystroke command list is reached.</li><!-- br --><li>If you want to send a left-parenthese as a character, prefix it with a tilde-character. So &quot;~(&quot; causes the internal SENDKEYS command language interpreter to read the next character &quot;as it is&quot;, and not as the begin of a special key command. To send a circumflex-character, say &quot;~^&quot;. The keystroke &quot;~~&quot; sends a single tilde (~) character to the controlled application.</li></ul><!-- br --><!-- br -->As special keys, the following keys can be used:<!-- br --><!-- br --><ul><!-- br -->	<li><b>(back)</b><br /><!-- br -->	Backspace-key</li><!-- br -->	<li><b>(tab)</b><br /><!-- br -->	Tabulator-key</li><!-- br -->	<li><b>(clear)</b><br /><!-- br -->	Delete-key</li><!-- br -->	<li><b>(enter)</b> oder <b>(return)</b><br /><!-- br -->	Enter-key</li><!-- br -->	<li><b>(shift)</b><br /><!-- br -->	Shift-key</li><!-- br -->	<li><b>(ctrl)</b> oder <b>(control)</b><br /><!-- br -->	Ctrl-key (Control)</li><!-- br -->	<li><b>(alt)</b><br /><!-- br -->	Alt-key</li><!-- br -->	<li><b>(pause)</b><br /><!-- br -->	Pause-key</li><!-- br -->	<li><b>(capslock)</b><br /><!-- br -->	Capslock-key</li><!-- br -->	<li><b>(esc)</b><br /><!-- br -->	ESC-key</li><!-- br -->	<li><b>(space)</b><br /><!-- br -->	Space</li><!-- br -->	<li><b>(pageup)</b><br /><!-- br -->	Scroll up key</li><!-- br -->	<li><b>(pagedown)</b><br /><!-- br -->	Scroll down key</li><!-- br -->	<li><b>(end)</b><br /><!-- br -->	Line end</li><!-- br -->	<li><b>(home)</b><br /><!-- br -->	Line begin</li><!-- br -->	<li><b>(left)</b><br /><!-- br -->	Left arrow</li><!-- br -->	<li><b>(up)</b><br /><!-- br -->	Up arrow/li><!-- br -->	<li><b>(right)</b><br /><!-- br -->	Right arrow</li><!-- br -->	<li><b>(down)</b><br /><!-- br -->	Down arrow</li><!-- br -->	<li><b>(select)</b><br /><!-- br -->	Select-key</li><!-- br -->	<li><b>(print)</b><br /><!-- br -->	Print-key</li><!-- br -->	<li><b>(snapshot)</b><br /><!-- br -->	Screenshot</li><!-- br -->	<li><b>(insert)</b><br /><!-- br -->	Paste-key</li><!-- br -->	<li><b>(delete)</b><br /><!-- br -->	Delete-key</li><!-- br -->	<li><b>(help)</b><br /><!-- br -->	Help-key</li><!-- br -->	<li><b>(lwin)</b><br /><!-- br -->	Left Windows-key</li><!-- br -->	<li><b>(rwin)</b><br /><!-- br -->	Right Windows-key</li><!-- br -->	<li><b>(apps)</b><br /><!-- br -->	Application-key</li><!-- br -->	<li><b>(f1)</b><br /><!-- br -->	F1-key</li><!-- br -->	<li><b>(f2)</b><br /><!-- br -->	F2-key</li><!-- br -->	<li><b>(f3)</b><br /><!-- br -->	F3-key</li><!-- br -->	<li><b>(f4)</b><br /><!-- br -->	F4-key</li><!-- br -->	<li><b>(f5)</b><br /><!-- br -->	F5-key</li><!-- br -->	<li><b>(f6)</b><br /><!-- br -->	F6-key</li><!-- br -->	<li><b>(f7)</b><br /><!-- br -->	F7-key</li><!-- br -->	<li><b>(f8)</b><br /><!-- br -->	F8-key</li><!-- br -->	<li><b>(f9)</b><br /><!-- br -->	F9-key</li><!-- br -->	<li><b>(f10)</b><br /><!-- br -->	F10-key</li><!-- br -->	<li><b>(f11)</b><br /><!-- br -->	F11-key</li><!-- br -->	<li><b>(f12)</b><br /><!-- br -->	F12-key</li><!-- br -->	<li><b>(f13)</b><br /><!-- br -->	F13-key</li><!-- br -->	<li><b>(f14)</b><br /><!-- br -->	F14-key</li><!-- br -->	<li><b>(f15)</b><br /><!-- br -->	F15-key</li><!-- br -->	<li><b>(f16)</b><br /><!-- br -->	F16-key</li><!-- br -->	<li><b>(numlock)</b><br /><!-- br -->	NumLock</li><!-- br -->	<li><b>(scroll)</b><br /><!-- br -->	Scroll-key</li><!-- br -->	<li><b>(lshift)</b><br /><!-- br -->	Left Shift-key</li><!-- br -->	<li><b>(rshift)</b><br /><!-- br -->	Right shift-key</li><!-- br -->	<li><b>(lcontrol)</b><br /><!-- br -->	Left CTRL-key</li><!-- br -->	<li><b>(rcontrol)</b><br /><!-- br -->	Right CTRL-key</li><!-- br -->	<li><b>(lalt)</b><br /><!-- br -->	Left ALT-key</li><!-- br -->	<li><b>(ralt)</b><br /><!-- br -->	Right ALT-key</li><!-- br --></ul><!-- br --><!-- br --><br><!-- br -->As application window title, you can also specifiy a Windows process ID or one of the build-in constants &quot;DESKTOP&quot; (sends keystrokes to the desktop), &quot;SHELL&quot; (sends keystrokes to the shell) and &quot;FOREGROUND&quot; (sends keystrokes to the current foreground window).§shell <font color="#000080">[windir]</font> # <font color="#0000ff">'\notepad.exe'</font>, <font color="#0000ff">'show'</font><br /><!-- br -->sendkeys <font color="#000080">[active_window]</font>, <font color="#0000ff">'Hello World^(alt)fstest.txt(enter)^(alt)(f4)'</font><br /><!-- br --><b>end</b>§[errorcode] gets '-1' if the window with the specified text in its title-bar coudn't be found, else '0'.<br><!-- br -->Use the variable [active_window], as in the example above, to get the title of the currently activated window.
rb5ref_en_3_newregkeydelregkey.html§NEWREGKEY, DELREGKEY§NEWREGKEY base-key, key-path<br><!-- br -->DELREGKEY base-key, key-path§NEWREGKEY creates a new registry key to the Windows system registry.<br><!-- br -->DELREGKEY deletes an existing Windows registry key, including all its sub-keys and values.<br><!-- br --><br><!-- br --><!-- br -->Both instructions expect as first parameter one of the five base-keys, that is specified using one of the following values:<!-- br --><!-- br --><ul><!-- br -->  <li>'CLASSES_ROOT' for HKEY_CLASSES_ROOT</li><!-- br -->  <li>'CURRENT_CONFIG' for HKEY_CURRENT_CONFIG</li><!-- br -->  <li>'CURRENT_USER' for HKEY_CURRENT_USER</li><!-- br -->  <li>'LOCAL_MACHINE' for HKEY_LOCAL_MACHINE</li><!-- br -->  <li>'USERS' for HKEY_USERS</li><!-- br --></ul>§newregkey <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#0000ff">'0'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Creating HKEY_CURRENT_USER\Software\Test was successfull.'</font><br /><!-- br --><b>endif</b><br /><!-- br --><br /><!-- br -->delregkey <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#0000ff">'0'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Deleting HKEY_CURRENT_USER\Software\Test was successfull.'</font><br /><!-- br --><b>endif</b>§Use GETREGVAL and LETREGVAL to read and write values from and into the registry. [errorcode] gets '0' if the operation succeeds, else '-1'
rb5ref_en_3_getfiletimeletfiletime.html§GETFILETIME, LETFILETIME§GETFILETIME time-of-last-modification = filename<br><!-- br -->LETFILETIME filename, time-of-last-modification§GETFILETIME reads the last-modified-time of a file and returns this in the format &quot;hhmmss&quot;.<br><!-- br -->LETFILETIME resets the last-modified-time of a file to any desired time value, using the same format returned by GETFILETIME.§newfile <font color="#0000ff">'test.txt'</font><br /><!-- br -->getfiletime <font color="#000080">[t]</font> = <font color="#0000ff">'test.txt'</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'test.txt was modified at '</font> # <font color="#000080">[t]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem So let's reset the file's modification time to 2:45 pm</font><br /><!-- br -->letfiletime <font color="#0000ff">'test.txt'</font>, <font color="#0000ff">'144500'</font><br /><!-- br --><br /><!-- br -->getfiletime <font color="#000080">[t]</font> = <font color="#0000ff">'test.txt'</font><br /><!-- br -->echo <font color="#0000ff">'test.txt was &quot;modified&quot; at '</font> # <font color="#000080">[t]</font><br /><!-- br -->delfile <font color="#0000ff">'test.txt'</font>§If the file was not found, [errorcode] gets from LETFILETIME as well as GETFILETIME the value '-1', else '0'. The returned value of GETFILETIME is in this case an empty string.<br><!-- br --><br><!-- br -->Use GETFILEDATE and LETFILEDATE to read and manipulate the modification date of a file.
rb5ref_en_3_getfiledateletfiledate.html§GETFILEDATE, LETFILEDATE§GETFILEDATE date-of-last-modification = filename<br><!-- br -->LETFILEDATE filename, date-of-last-modification§GETFILEDATE reads the date a file was modified on, and returns this in the format &quot;mmddyyyy&quot;.<br><!-- br -->LETFILEDATE resets the modification date of a file to any desired date. <i>date-of-last-modification</i> is in this case specified the same way as returned by GETFILEDATE.§newfile <font color="#0000ff">'test.txt'</font><br /><!-- br -->getfiledate <font color="#000080">[d]</font> = <font color="#0000ff">'test.txt'</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'test.txt was modified on '</font> # <font color="#000080">[d]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem Now we reset the date to February 01, 2004</font><br /><!-- br -->letfiledate <font color="#0000ff">'test.txt'</font>, <font color="#0000ff">'02012004'</font><br /><!-- br --><br /><!-- br -->getfiledate <font color="#000080">[d]</font> = <font color="#0000ff">'test.txt'</font><br /><!-- br -->echo <font color="#0000ff">'test.txt was &quot;modified&quot; on '</font> # <font color="#000080">[d]</font><br /><!-- br -->delfile <font color="#0000ff">'test.txt'</font>§If the file was not found, both LETFILEDATE and GETFILEDATE assign the value '-1' to [errorcode], else '0'. The returned value of GETFILEDATE is in such case an empty-string.<br><!-- br -->Use GETFILETIME and LETFILETIME to change the last-modification time of a file.
rb5ref_en_3_letregval.html§LETREGVAL§LETREGVAL value-type, base-key, sub-key, value-label, value§LETREGVAL writes a value into the registry.<br><!-- br --><br><!-- br --><!-- br -->LETREGVAL expects as first parameter a data type that should be written. Possible data types are 'STRING' (or '0'), 'DWORD' (or '1') and 'BINARY' (or '2'). Next to the data-type, a base-key identifier is expected, and next to this the path to the registry key the value should be written to. The <i>value-label</i> parameter specifies a label that identifies the value that is written. The last parameter finally is the value that is saved unter the, as <i>value-label</i> defined name, into the registry.<br><br><!-- br --><!-- br -->The following values can be specified as <i>base-key</i>:<!-- br --><ul><!-- br -->  <li>'CLASSES_ROOT' for HKEY_CLASSES_ROOT</li><!-- br -->  <li>'CURRENT_CONFIG' for HKEY_CURRENT_CONFIG</li><!-- br -->  <li>'CURRENT_USER' for HKEY_CURRENT_USER</li><!-- br -->  <li>'LOCAL_MACHINE' for HKEY_LOCAL_MACHINE</li><!-- br -->  <li>'USERS' for HKEY_USERS</li><!-- br --></ul><!-- br --><!-- br -->The value that should be saved must be specified in the format <i>value-type</i> defines.<br><!-- br -->The data-type STRING is directly written &quot;as specified&quot;. When using DWORD, only numercial values can be written. A DWORD is long-type data value, a 32-bit numerical value that can have a maximum value of 4294967295 (binary value &quot;1111 1111 1111 1111 1111 1111 1111 1111&quot;).<br><!-- br -->When specifying BINARY as data type, the value must be assigned like at PUTFILE, as a list of ASCII-character codes, where each byte is a code-value from 0 to 255, and seperated by the RapidBATCH list separation character (by default the pipe-character (|)).<br><br><!-- br --><!-- br -->If an empty string is assigned as <i>value-label</i>, the value will be written to the key itself, because every registry key itself can save a value that is typed as STRING.§<font color="#808080">rem creating a registry key</font><br /><!-- br -->newregkey <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font> <b>halt</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem writing a string value</font><br /><!-- br -->letregval <font color="#0000ff">'string'</font>, <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font>, <font color="#0000ff">'StringValue'</font>, <font color="#0000ff">'Hello World by RapidBATCH ;)'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Error when trying to write value to the registry.'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br /><!-- br --><b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem writing a dword value</font><br /><!-- br -->letregval <font color="#0000ff">'dword'</font>, <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font>, <font color="#0000ff">'DWordValue'</font>, <font color="#0000ff">'12345'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Error when trying to write value to the registry.'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br /><!-- br --><b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem writing a binary value</font><br /><!-- br -->letregval <font color="#0000ff">'binary'</font>, <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font>, <font color="#0000ff">'BinaryValue'</font>, <font color="#0000ff">'72|101|108|108|111|32|87|111|114|108|100'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Error when trying to write value to the registry.'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br /><!-- br --><b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem calling regedit to view the values</font><br /><!-- br -->call <font color="#0000ff">'regedit.exe'</font>, <font color="#0000ff">'show'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem cleaning up the registry</font><br /><!-- br -->delregkey <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font><!-- br -->§If LETREGVAL fails, [errorcode] gets the value '-1', else '0'.<br><!-- br -->Use GETREGVAL to read a registry value and DELREGVAL to delete a registry value.
rb5ref_en_3_getregval.html§GETREGVAL§GETREGVAL value = value-type, base-key, sub-key, value-label§GETREGVAL gets a value from the registry. First off all, the function expects as parameters the value type, that should be read, which can be 'STRING', 'DWORD' or 'BINARY'. Then, the base-key, which can be one of the below listed values, a sub-key, that specifies the key path from the base-key, as well as the value-label within the specified sub-key that should be read, is expected.<br><br><!-- br --><!-- br -->The following values can be specified as <i>base-key</i>:<!-- br --><ul><!-- br -->  <li>'CLASSES_ROOT' for HKEY_CLASSES_ROOT</li><!-- br -->  <li>'CURRENT_CONFIG' for HKEY_CURRENT_CONFIG</li><!-- br -->  <li>'CURRENT_USER' for HKEY_CURRENT_USER</li><!-- br -->  <li>'LOCAL_MACHINE' for HKEY_LOCAL_MACHINE</li><!-- br -->  <li>'USERS' for HKEY_USERS</li><!-- br --></ul><!-- br --><!-- br -->The value that should be saved is returned in the format <i>value-type</i> defines.<br><!-- br -->The data-type STRING is directly returned &quot;as saved&quot; from the registy. When using DWORD, a numercial value is returned. A DWORD is long-type data value, a 32-bit numerical value that can have a maximum value of 4294967295 (binary value &quot;1111 1111 1111 1111 1111 1111 1111 1111&quot;).<br><!-- br -->When specifying BINARY as data type, the value is returned as a list of ASCII-character codes, as returned by GETFILE, where each byte is a code-value from 0 to 255, and seperated by the RapidBATCH list separation character (by default the pipe-character (|)).§<font color="#808080">rem creating a registry key</font><br /><!-- br -->newregkey <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font> <b>halt</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem writing test values</font><br /><!-- br -->letregval <font color="#0000ff">'string'</font>, <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font>, <font color="#0000ff">'StringValue'</font>, <font color="#0000ff">'Hello World by RapidBATCH ;)'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Error when trying to write value to the registry.'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br /><!-- br --><b>endif</b><br /><!-- br --><br /><!-- br -->letregval <font color="#0000ff">'dword'</font>, <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font>, <font color="#0000ff">'DWordValue'</font>, <font color="#0000ff">'12345'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Error when trying to write value to the registry.'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br /><!-- br --><b>endif</b><br /><!-- br --><br /><!-- br -->letregval <font color="#0000ff">'binary'</font>, <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font>, <font color="#0000ff">'BinaryValue'</font>, <font color="#0000ff">'72|101|108|108|111|32|87|111|114|108|100'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Error when trying to write value to the registry.'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br /><!-- br --><b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem reading the test-values from the registry</font><br /><!-- br -->getregval <font color="#000080">[value]</font> = <font color="#0000ff">'string'</font>, <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font>, <font color="#0000ff">'StringValue'</font><br /><!-- br -->echo <font color="#000080">[value]</font><br /><!-- br --><br /><!-- br -->getregval <font color="#000080">[value]</font> = <font color="#0000ff">'dword'</font>, <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font>, <font color="#0000ff">'DWordValue'</font><br /><!-- br -->echo <font color="#000080">[value]</font><br /><!-- br --><br /><!-- br -->getregval <font color="#000080">[value]</font> = <font color="#0000ff">'binary'</font>, <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font>, <font color="#0000ff">'BinaryValue'</font><br /><!-- br --><font color="#000080">[i]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><b>repeat</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[i]</font> + <font color="#0000ff">'1'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;gettok <font color="#000080">[ch]</font> = <font color="#000080">[value]</font>, <font color="#0000ff">'|'</font>, <font color="#000080">[i]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[ch]</font> ! <font color="#0000ff">''</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getchr <font color="#000080">[ch]</font> = <font color="#000080">[ch]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#000080">[plainword]</font> # <font color="#000080">[ch]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><b>until</b> <font color="#000080">[ch]</font> = <font color="#0000ff">''</font><br /><!-- br -->echo <font color="#000080">[plainword]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem cleaning up the registry</font><br /><!-- br -->delregkey <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\Test'</font>§If GETREGVAL fails or the value that should be read is missing, [errorcode] gets the value '-1', and the function returns an empty string. Else, [errorcode] is '0'.<br><!-- br -->Use LETREGVAL to write a registry value or DELREGVAL to delete a value from the registry.
rb5ref_en_3_delregval.html§DELREGVAL§DELREGVAL base-key, sub-key, value-label§Deletes a registry value.<br><br><!-- br -->DELREGVAL expects as parameter a base-key, the path of a sub-key and the label of the value that should be deleted.<br><!-- br --><br><!-- br -->As <i>base-key</i>, one of the following values is possbile:<br /><!-- br --><!-- br --><ul><!-- br -->  <li>'CLASSES_ROOT' for HKEY_CLASSES_ROOT</li><!-- br -->  <li>'CURRENT_CONFIG' for HKEY_CURRENT_CONFIG</li><!-- br -->  <li>'CURRENT_USER' for HKEY_CURRENT_USER</li><!-- br -->  <li>'LOCAL_MACHINE' for HKEY_LOCAL_MACHINE</li><!-- br -->  <li>'USERS' for HKEY_USERS</li><!-- br --></ul>§<font color="#808080">rem writing a test value</font><br /><!-- br -->letregval <font color="#0000ff">'STRING'</font>, <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\jmksf\RapidBATCH'</font>, <font color="#0000ff">'HelloWorld'</font>, <font color="#0000ff">'Hello World by RapidBATCH ;)'</font><br /><!-- br --><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Error when trying to write a value to the registry.'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>halt</b><br /><!-- br --><b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem delete the test value again</font><br /><!-- br -->delregval <font color="#0000ff">'CURRENT_USER'</font>, <font color="#0000ff">'Software\jmksf\RapidBATCH'</font>, <font color="#0000ff">'HelloWorld'</font><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font> echo <font color="#0000ff">'Error when trying to delete registy value.'</font><br /><!-- br --><b>end</b><!-- br -->§If the operation fails, [errorcode] gets '-1', else '0'.<br><!-- br --><br><!-- br -->Use GETREGVAL to read and LETREGVAL to write a registry value.
rb5ref_en_3_shortcut.html§SHORTCUT§SHORTCUT shortcut-file, shortcut-path, parameters, working-directory, icon, show-mode§Creates a shortcut.<br><br><!-- br --><!-- br -->The shortcut is saved under the as <i>shortcut-file</i> specified path, at which the .LNK-file extension for shortcut files is automatically appended by the instruction. <i>shortcut-path</i> defines the path to the executable or document the shortcut is associtated with. <i>parameter</i>, <i>working-directory</i> and <i>icon</i> are optional parameters, and can be left blank if they are not required. As <i>show-mode</i>-parameter, the values 'SHOW', 'MINIMIZED' or 'MAXIMIZED' can be used. The 'HIDE'-mode is not possible when specified to shortcuts.§<font color="#000080">[userdir]</font> = <font color="#0000ff">'C:\Documents and Settings\'</font> # <font color="#000080">[curuser]</font> # <font color="#0000ff">'\Desktop'</font><br /><!-- br --><font color="#000080">[prog]</font> = <font color="#0000ff">'C:\jmksf\rb5\rbb4.exe'</font><br /><!-- br --><br /><!-- br -->shortcut <font color="#000080">[userdir]</font> # <font color="#0000ff">'\RapidBATCH Schortcut'</font>, <font color="#000080">[prog]</font>, <font color="#0000ff">''</font>, <font color="#0000ff">''</font>, <font color="#0000ff">''</font>, <font color="#0000ff">'show'</font><br /><!-- br --><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The shortcut has been created successfully!'</font><br /><!-- br --><b>else</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'Error when creating shortcut.'</font><br /><!-- br --><b>endif</b>§[errorcode] gets the value '-1' in case of an error, else '0'.
