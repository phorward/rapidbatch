template_ref_en.html§0TITLE§1SYNTAX§1DESCRIPTION§1EXAMPLE§1REMARKS
rb5ref_en_6_newdialog.html§NEWDIALOG§NEWDIALOG widget-label, widget-type, start-positions§Creates dialog window or a new widget to be used on a dialog. As widgets, window controls like buttons, input-fields, listboxes or even dialog-windows themself are meaned. Dialog-windows itself are acting as parents for the so called child-widgets (the controls displayed on the dialog).<!-- br --><br><!-- br --><br><!-- br --><!-- br -->The instruction expects as first parameter a widget-label that identifies the newly created widget and is used to access it in later operations, a widget-type identifier, specifying the type of the widget that should be created, and a widget starting position, specified in the format &quot;X|Y|Width|Height&quot;, where each value is specified in pixels. The pipe-character (&quot;|&quot;) must be replaced by another, particular character if the value of the variable [std_sep] has been changed, which is not recommended.<br><!-- br -->The X- and Y-coordinates are only at DIALOG-typed widgets relative to the upper-left corner of the screen, at all child-widgets, X- and Y- are relative to the parent dialog's upper-left corner.<br><!-- br --><br><!-- br --><!-- br -->The widget-label must always begin with the name of the parent-dialog it should be created on, followed by a colon (:) and then an arbitrary name for the widget. E.g. the label for a child-element with the name &quot;child-element&quot; that should be created on the dialog-window &quot;base&quot; must look like the following:<br><!-- br --><br><!-- br --><!-- br -->"base:child-element".<br><!-- br --><br><!-- br --><!-- br -->The following list provides all possible widget types and their identifiers that can be created with NEWDIALOG.<!-- br --><br><!-- br --><!-- br --><br><!-- br --><table class="std"><!-- br -->	<tr><!-- br -->		<td><b>Widget-Type Identifier:</b></td><!-- br -->		<td><b>Description:</b></td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>DIALOG</td><!-- br -->		<td>Parent dialog window</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>BUTTON</td><!-- br -->		<td>Push button</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>IMAGEBUTTON</td><!-- br -->		<td>Push button displaying an image instead of text</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>INPUT</td><!-- br -->		<td>A single-line input field</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>PWD</td><!-- br -->		<td>A single-line input field for passwords</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>EDIT</td><!-- br -->		<td>A multi-line input field</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>EDIT_LINEWRAP</td><!-- br -->		<td>A multi-line input field with automatic linewrap and no horizontal scrolling</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>LABEL</td><!-- br -->		<td>Static text label</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>OPTION</td><!-- br -->		<td>Option button (checkbox)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>RADIO</td><!-- br -->		<td>Radio button</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>LIST</td><!-- br -->		<td>List selection control</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>LIST_SORTED</td><!-- br -->		<td>Sorted list selection control</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>LIST_MULTI</td><!-- br -->		<td>List selection control with multiple selection possibility</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>LIST_MULTISORTED</td><!-- br -->		<td>Sorted list selection control with multiple selection possibility</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>PROGRESS</td><!-- br -->		<td>A progress bar</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>COMBO</td><!-- br -->		<td>Combobox</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>STATIC_COMBO</td><!-- br -->		<td>Combobox with a static range of values</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>IMAGE</td><!-- br -->		<td>Static bitmap image</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>GROUP</td><!-- br -->		<td>Static visual group box</td><!-- br -->	</tr><!-- br --></table>§<font color="#808080">rem creating a parent dialog</font><br /><!-- br -->newdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'DIALOG'</font>, <font color="#0000ff">'200|200|500|250'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem creating a push button on the dialog</font><br /><!-- br -->newdialog <font color="#0000ff">'myDialog:myButton'</font>, <font color="#0000ff">'BUTTON'</font>, <font color="#0000ff">'1|1|100|25'</font><!-- br -->§If the creation of the widget fails (e.g. if it already exists), [errorcode] gets the value '-1', on success it gets '0'.<br><!-- br --><br><!-- br --><!-- br -->Use the instruction LETDIALOG to change and set-up widget attributes. On the opposite, use GETDIALOG to determine dialog widget attributes.<br><!-- br -->With the aid of the RUNDIALOG-function, it is possible to wait for user events, that are analyzed and executed afterwards.<br><!-- br --><br><!-- br -->Excepting parent dialogs (type: DIALOG), at all newly created widgets the VISIBLE-attribute is automatically set to [true], so child-widgets appear on the dialog directly when they are created. DIALOG-typed widgets always need to be made visible manually using the LETDIALOG-instruction. The sense of this approach is that a whole dialog-window should be completely created with all its controls before it is made visible for the first time. This is not a duty, but strongly recommended.<!-- br --><br><!-- br --><br><!-- br -->The contrary instruction to NEWDIALOG is the DELDIALOG-instruction, deleting a widget or a whole dialog including all its child-widgets manually from the system and the memory.
rb5ref_en_6_letdialog.html§LETDIALOG§LETDIALOG widget-label, attribute-/event-identifier, attribute-value§LETDIALOG sets widget-attributes and switches widget-events on and off. The common purpose of LETDIALOG is to set attributes, switching events is rather a secondary possbility.<br><br><!-- br --><!-- br -->The instruction expects next to the widget-label, identifying the widget that should be changed (which is the same label as specified for the widget at NEWDIALOG), a so called attribute-identifier. This identifier specifies the attribute that should be changed or set for the specified widget. The last parameter is a value that must be formatted in the way the as attribute-identifier specified attribute expects it. So, the third parameter's format is always depending on the attribute.<!-- br --><!-- br --><br><br><!-- br --><!-- br -->The following table describes all possible attributes, explains the possble attribute-value and/or its formatting and provides information on the supported widgets, where the particular attribute can be used with.<!-- br --><!-- br --><br><!-- br --><br><!-- br --><!-- br --><table class="std" width="100%"><!-- br -->	<tr><!-- br -->		<td><b>Attribute:</b></td><!-- br -->		<td><b>Description:</b></td><!-- br -->		<td><b>Supported Widgets:</b></td><!-- br -->		<td><b>Attribute value parameter:</b></td><!-- br -->	</tr><!-- br -->	<!-- br -->	<tr><!-- br -->		<td class="attrib_desc">CAPTION</td><!-- br -->		<td>Sets a widget's labeling text.</td><!-- br -->		<td>DIALOG, BUTTON, LABEL, RADIO, OPTION, GROUP, MENU</td><!-- br -->		<td>Any desired text.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">CHECKED</td><!-- br -->		<td>Check state of a widget.</td><!-- br -->		<td>RADIO, OPTION, MENU</td><!-- br -->		<td>'0' = checked<br><!-- br -->		'-1' = unchecked</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">ENABLED</td><!-- br -->		<td>Enables or disables a widget. When a widget is disabled, it is still visible, but can not be used and is displayed grayed.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, LABEL, OPTION, RADIO, GROUP, IMAGE, COMBO, STATIC_COMBO, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, PROGRESS</td><!-- br -->		<td>'0' = activated<br><!-- br -->		'-1' = deactivated (grayed)</td><!-- br -->	</tr>	<!-- br -->	<tr><!-- br -->		<td class="attrib_desc">FOCUS</td><!-- br -->		<td>Sets the input focus to the widget.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, OPTION, RADIO, COMBO, STATIC_COMBO, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTUSORTED</td><!-- br -->		<td>(kein)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">FONT</td><!-- br -->		<td>Sets a customized font, font-size and font-styles to a widget.<br><!-- br -->		<!-- br -->		The attribute-parameter must be formatted in the following format: &quot;Font-Name|Font-Size|Font-Style&quot;.<br><br><!-- br -->		<!-- br -->		The style-value makes it possible to set the font-styles bold ('2'), italic ('4') and underlined ('8'). By adding these three values (2, 4, 8) with the desired styles together, two or all three styles can be set to the font at one time, e.g. style value '6' for bold and italic style.</td><!-- br -->		<!-- br -->		<td>BUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, LABEL, OPTION, RADIO, GROUP, COMBO, STATIC_COMBO, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED</td><!-- br -->		<td>Font-Type, font-size and font-style in the format<br><br><!-- br -->		&quot;Font-Name|Font-Size|Font-Style&quot;<br><!-- br -->		<br><!-- br -->		e.g. &quot;Courier New|10|2&quot; to set &quot;Courier New&quot;, 10 pixels, bold.</td><!-- br -->	</tr>	<!-- br -->	<tr><!-- br -->		<td class="attrib_desc">HEIGHT</td><!-- br -->		<td>Sets the height of a widget.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAGE, PWD, PROGRESS</td><!-- br -->		<td>The widget's height, in pixels.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">ICON</td><!-- br -->		<td>Sets an alternative icon to a dialog-window. If this attribute is set to an empty string, the application's main icon define in [app_icon] will be used (this is the default).</td><!-- br -->		<td>DIALOG</td><!-- br -->		<td>Relative or abolute path to an external icon-resource (.ICO extension), or an empty string.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">IMAGE</td><!-- br -->		<td>Sets an external bitmap-image to an image supporting widget.</td><!-- br -->		<td>IMAGEBUTTON, IMAGE</td><!-- br -->		<td>Relative or absolute path to an external bitmap-file (.BMP extension).</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">IMAGE_TRANSPARENT</td><!-- br -->		<td>Sets an external bitmap-image to an image supporting widget. By using this attribute, the color of first pixel in the upper-left corner of the image is replace with the standard window color, so that the image is showed transparent on the widget. Please note, that only images with a maximum color depth of 8 BPP can be viewed transparent.</td><!-- br -->		<td>IMAGEBUTTON, IMAGE</td><!-- br -->		<td>Relative or absolute path to an external bitmap-file (.BMP extension).</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">ITEMS</td><!-- br -->		<td>List of values in a list-typed widget.</td><!-- br -->		<td>LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO</td><!-- br -->		<td>A list of items, where each item is seperated by the separation character defined in [std_sep] (by default the &quot;|&quot; pipe-character).<br><!-- br -->Example: "Item 1|Item 2|Item 3"</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">MENU</td><!-- br -->		<td>Creates a menu-bar on a dialog-window.<br><br><!-- br -->		<!-- br -->		This menu is defined over a so called menu-descriptor.<br><!-- br -->		In this descriptor, each menu-item in one level is created with a menu-item label that is later shown in the menu. Then, either a color (&quot;:&quot;) is specified, marking the beginning of a new sub-menu behind the last specified label, or a pipe-character (&quot;|&quot;, or the particular as standard list separator specified character) is specified to create another, new menu-item in the current level. A sub-menu is closed using the semicolon (&quot;;&quot;) character behind the last item of the sub-menu.<br><br><!-- br -->		<!-- br -->		For each &quot;click-able&quot; menu-item, a widget is automatically created under the widget-label &quot;<i>Dialog-Widget-Label</i>:Menu_<i>Menu-Item</i>&quot;. This label is used at RUNDIALOG to return an event-string if the menu-entry was selected, or it can be used to set attributes like CHECKED or ENABLED over a secondary LETDIALOG call.<br><br><!-- br -->		<!-- br -->		To create a menu-item with one of the three menu-descriptor characters (&quot;:&quot;, &quot;;&quot; and &quot;|&quot;), write a tilde-character (&quot;~&quot;) in front of the character that should be ignored by RapidBATCH as menu-descriptor character. To output a tilde-character itself, write &quot;~~&quot;.<br><br><!-- br -->		<!-- br -->		If the menu descriptor is an empty string, an existing menu-bar is completely removed from the dialog. If a menu-bar already exists it is replaced by the new definition.<!-- br --></td><!-- br -->		<td>DIALOG</td><!-- br -->		<td>A menu-descriptor.<!-- , e.g. 'Menu-1:Sub-Menu-1:Sub-Sub-Menu-1|Sub-Sub-Menu-2;Sub-Menu-2;Menu-2;' --></td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">ORDER</td><!-- br -->		<td>Sets the dialog's z-order on the screen.<br><!-- br -->		<br><!-- br -->		Dialogs can be displayed in the following modes on the z-axis:<br><!-- br -->		<ul><!-- br -->			<li><u>BOTTOM</u><br><!-- br -->			The dialog window is moved behind all visible dialog windows and stays in the background. This option can be left by setting the ORDER-attribute back to &quot;NORMAL&quot; again.</li><!-- br -->			<li><u>TOP</u><br><!-- br -->			The dialog is moved in front of all visible dialog windows and can not be brought into the background. This mode is also used by the build-in INFOBOX-dialog. It can also be left by setting the ORDER-attribute back to &quot;NORMAL&quot;.</li><!-- br -->			<li><u>NORMAL</u> (Standard)<br><!-- br -->			The dialog is set to normal-mode like any standard dialog window. This is also the default value.</li><!-- br -->		</ul></td><!-- br -->		<td>DIALOG</td><!-- br -->		<td>The values &quot;NORMAL&quot; (also, an empty string is possible!), &quot;BOTTOM&quot; or &quot;TOP&quot;</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">POSITION</td><!-- br -->		<td>Sets the position of a widget after its creation. At parent dialog windows, the X-/Y-coordinates are relative to the upper-left corner of the screen, at all other widgets relative to the upper-left corner of the dialog window the widget is dedicated to.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, LABEL, OPTION, RADIO, GROUP, IMAGE, COMBO, STATIC_COMBO, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, PROGRESS</td><!-- br -->		<td>The position must be specified in the following order: &quot;X|Y|Width|Height&quot;<br><br><!-- br -->		<!-- br -->		Each value is specified in pixels.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">PROGRESS</td><!-- br -->		<td>Sets the size of the status bar within a PROGRESS-widget.</td><!-- br -->		<td>PROGRESS</td><!-- br -->		<td>An integer, percentual value between 0 and 100.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">READONLY</td><!-- br -->		<td>Toggles the read-only mode of input-fields.</td><!-- br -->		<td>INPUT, PWD, EDIT, EDIT_LINEWRAP</td><!-- br -->		<td>'0' = read-only mode (text can't be modified)<br /><!-- br -->'-1' = writeable-mode (default value)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">SELECTION</td><!-- br -->		<td>In input-field typed widgets:<br><!-- br -->		Replaces the current selection in the displayed text (if given) with the specified value. If nothing is selected, the value is inserted at the cursor's current position.<br><!-- br -->		<br><!-- br -->		In list-typed widgets:<br><!-- br -->		Sets the selection in the list-field to the next item that fits to the specified value.</td><!-- br -->		<td>INPUT, PWD, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO</td><!-- br -->		<td>A value that should be replaced/inserted at the cursor or the item in a listbox that should be selected.</td><!-- br -->	</tr>	<!-- br -->	<tr><!-- br -->		<td class="attrib_desc">SELINDEX</td><!-- br -->		<td>Highlights the entry (or a list of entries) in a list-typed widget.<br><!-- br -->		If SELINDEX is used with a LIST- or LIST_SORTED-typed widget, a numerical index of the item that should be selected must be specified as the attribute parameter. If SELINDEX is used with LIST_MULTI- or LIST_MULTISORTED-typed widgets, a list of indeces of the items that should be selected must be specified.<!-- br -->		<td>LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED</td><!-- br -->		<td>Index or list of ideces (each sepeated by the standard list separator) that should be selected.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">SELPOS</td><!-- br -->		<td>Sets the cursor position in a input-field typed widget to a desired position and/or selects text.</td><!-- br -->		<td>INPUT, EDIT, EDIT_LINEWRAP, PWD, COMBO</td><!-- br -->		<td>The cursor's position and a possible selection specified in the format: &quot;cursor-position|lenght-of-selection&quot;<br><!-- br -->		<!-- br -->	e.g. the parameter value '1|10' selects the first ten characters of the widget, '15|0' sets the cursor to the fifteenth character in the widget, with no selection.</td><!-- br -->	</tr>	<!-- br -->	<tr><!-- br -->		<td class="attrib_desc">STATUSBAR</td><!-- br -->		<td>Creates a statusbar on a dialog-window.<br><br><!-- br -->		<!-- br -->		Statusbars are used to display status-information about the program state or to output a copyright-message. If only one statusbar-section is required, the attribute can directly be set to the desired status text. Else, if the statusbar should be separated into different parts, use the following format for one part:<!-- br -->		<br><!-- br -->		<br><!-- br -->		&quot;Status-text to be displayed|Size of the statusbar section, in pixels, from the left side of the dialog&quot;<!-- br -->		<br><!-- br -->		<br><!-- br -->		If another part should follow it is simply appended to the first definition.<br><!-- br -->		By setting the STATUSBAR-attribute of a DIALOG to an empty string, it is removed from the dialog. If a statusbar is already existing, it is replaced by the new definition.<br></td><!-- br -->		<td>DIALOG</td><!-- br -->		<td>A statusbar-descriptor.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">STYLE</td><!-- br -->		<td>Sets a dialog-style to a DIALOG-typed widget.<br><!-- br -->		<br><!-- br -->		The following styles can be used:<br><!-- br -->		<ul><!-- br -->			<li><u>STANDARD</u><br><!-- br -->			A dialog-window with close-, minimize- and maximize-button and system menu, scalable</li><!-- br -->			<li><u>DIALOG</u><br><!-- br -->			A dialog-window with close-button and system-menu, static size</li><!-- br -->			<li><u>SINGLE</u><br><!-- br -->			A dialog-window with close-button, minimize-button and system-menu, static size</li><!-- br -->			<li><u>TOOL</u><br><!-- br -->			A dialog-window in the toolwindow-style with close-button, scalable size</li><!-- br -->			<li><u>STATIC_TOOL</u></br><!-- br -->			A dialog-window in the toolwindow-style with close-button, static size</li><!-- br -->		</ul></td><!-- br -->		<td>DIALOG</td><!-- br -->		<td>A style-identifier ('STANDARD', 'DIALOG', 'SINGLE', 'TOOL' or 'STATIC_TOOL').</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">TEXT</td><!-- br -->		<td>Sets the text in the input-area of an input-field typed widget.</td><!-- br -->		<td>EDIT, EDIT_LINEWRAP, INPUT, PWD, COMBO</td><!-- br -->		<td>Any desired text.</td><!-- br -->	</tr>	<!-- br -->	<tr><!-- br -->		<td class="attrib_desc">TOOLTIP</td><!-- br -->		<td>Sets a tooltip to any widget. The tooltip is getting visible if the user moves the mouse over the particular widget. Tooltips have the purpose to provide help information to a control on a dialog window, by describing the purpose of the control.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAGE, PROGRESS</td><!-- br -->		<td>Any desired help text.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">VISIBLE</td><!-- br -->		<td>Switches the visibility of a widget on or off. The widget will completely be set invisible if its visibility is switched off.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAGE, PROGRESS</td><!-- br -->		<td><!-- br -->			'0' = visible<br><!-- br -->			'-1' = invisible</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">WIDTH</td><!-- br -->		<td>Sets a widget's width.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAGE, PWD, PROGRESS</td><!-- br -->		<td>The widget's width, in pixels.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">X</td><!-- br -->		<td>Sets the X-position of a widget. When used on dialog windows, the X-coordinate is relative to the upper-left corner of the screen, at all other widgets, it is relative to the upper-left corner of the dialog window the widget is dedicated to.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAGE, PWD, PROGRESS</td><!-- br -->		<td>The X-position of the widget, in pixels.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">Y</td><!-- br -->		<td>Sets the Y-position of a widget. When used on dialog windows, the Y-coordinate is relative to the upper-left corner of the screen, at all other widgets, it is relative to the upper-left corner of the dialog window the widget is dedicated to.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAGE, PWD, PROGRESS</td><!-- br -->		<td>The Y-position of the widget, in pixels.</td><!-- br -->	</tr><!-- br --></table><!-- br --><br /><!-- br --><!-- br -->Using LETDIALOG, it is also possible to switch events (which can be initiated by the user at the RUNDIALOG-function) on or off. The following table describes the possible events, that are specified as the second-parameter (attribute-identifier) at LETDIALOG, and the widgets supporting the particular event.<!-- br --><br><!-- br --><br><!-- br -->The particular event is switched on by assigning the value '0' as attribute-parameter value and switched off by assigning '-1'. The default-value of each widget for the event is obvious from the value written in brackets.<!-- br --><br><!-- br --><br><!-- br --><!-- br --><table class="std" width="100%"><!-- br -->	<tr><!-- br -->		<td><b>Event-Identifier:</b></td><!-- br -->		<td><b>Description:</b></td><!-- br -->		<td><b>Supported Widgets:</b></td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_CLICK</td><!-- br -->		<td>Event that occurs when the user clicks a widget with the mouse.</td><!-- br -->		<td>DIALOG (-1), BUTTON (0), IMAGEBUTTON (0), LABEL (-1), OPTION (-1), RADIO (-1), IMAGE (-1), MENU (0)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_DBLCLICK</td><!-- br -->		<td>Event that occurs when the user double-clisk a widget with the mouse.</td><!-- br -->		<td>LIST (-1), LIST_SORTED (-1), LIST_MUTLI (-1), LIST_MULTISORTED (-1)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_CHANGE</td><!-- br -->		<td>Event that occurs when a key is pressed in an input-field typed widget.</td><!-- br -->		<td>INPUT (-1), EDIT (-1), EDIT_LINEWRAP (-1) PWD (-1), COMBO (-1), STATIC_COMBO (-1), STATIC_COMBO (-1), LIST (-1), LIST_SORTED (-1), LIST_MULTI (-1), LIST_MULTISORTED (-1)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_CLOSE</td><!-- br -->		<td>Event that occurs when closing a dialog-window.</td><!-- br -->		<td>DIALOG (0)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_SIZE</td><!-- br -->		<td>Event that occurs when a dialog-window is sized, minimized or maximized.</td><!-- br -->		<td>DIALOG (0)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_MOVE</td><!-- br -->		<td>Event that occurs when a dialog window is moved.</td><!-- br -->		<td>DIALOG (-1)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_MOUSEMOVE</td><!-- br -->		<td>Event that occurs when the mouse is moved over a dialog.</td><!-- br -->		<td>DIALOG (-1)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_OK</td><!-- br -->		<td>Event that occurs when the user hits the ENTER-key on the active dialog, aborting it.</td><!-- br -->		<td>DIALOG (-1)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_CANCEL</td><!-- br -->		<td>Event that occurs when the user hits the ESC-key on the active dialog, aborting it.</td><!-- br -->		<td>DIALOG (-1)</td><!-- br -->	</tr><!-- br --></table>§<font color="#808080">rem PLEASE NOTE:</font><br /><!-- br --><font color="#808080">rem All widget labels used in this examples are not created before,</font><br /><!-- br --><font color="#808080">rem so that these examples only have the purpose to show how dialog</font><br /><!-- br --><font color="#808080">rem widget attributes are specified and handled.</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem changing a widget's position and size</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'POSITION'</font>, <font color="#0000ff">'1|1|800|600'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Button1'</font>, <font color="#0000ff">'POSITION'</font>, <font color="#0000ff">'10|10|100|25'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem setting the caption of a dialog and a button</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'CAPTION'</font>, <font color="#0000ff">'This is a caption ;)'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Button1'</font>, <font color="#0000ff">'CAPTION'</font>, <font color="#0000ff">'&Ok'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem setting the content of input-fields</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Name'</font>, <font color="#0000ff">'TEXT'</font>, <font color="#0000ff">'Please enter your name!'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Edit'</font>, <font color="#0000ff">'TEXT'</font>, <font color="#0000ff">'This text is'</font> # <font color="#000080">[new_line]</font> # <font color="#0000ff">'a multi-line text!'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem setting items to LIST-, LIST_SORTED-, LIST_MULTI-, LIST_MULTISORTED and COMBO-typed widgets</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Weekdays'</font>, <font color="#0000ff">'ITEMS'</font>, <font color="#0000ff">'Monday|Tuesday|Wednesday|Thursday|Friday'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem switching the state of an OPTION-, RADIO- or MENU-widget</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Option1'</font>, <font color="#0000ff">'CHECKED'</font>, <font color="#0000ff">'0'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Radio1'</font>, <font color="#0000ff">'CHECKED'</font>, <font color="#0000ff">'-1'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Menu_This is a menu item'</font>, <font color="#0000ff">'CHECKED'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem setting the input focus to a widget</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Name'</font>, <font color="#0000ff">'FOCUS'</font>, <font color="#0000ff">''</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem activating/deactivating dialog widgets</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Name'</font>, <font color="#0000ff">'ENABLED'</font>, <font color="#000080">[false]</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Name'</font>, <font color="#0000ff">'ENABLED'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem adding a tooltip to a widget</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Button1'</font>, <font color="#0000ff">'TOOLTIP'</font>, <font color="#0000ff">'Please feel free and press me!'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem replacing the selection in an input-field or a listbox' selection</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Name'</font>, <font color="#0000ff">'SELECTION'</font>, <font color="#0000ff">'A new text!'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Edit'</font>, <font color="#0000ff">'SELECTION'</font>, <font color="#000080">[clipboard]</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Weekdays'</font>, <font color="#0000ff">'SELECTION'</font>, <font color="#0000ff">'Tuesday'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem setting the cursor's position and selection in input-fields</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Name'</font>, <font color="#0000ff">'SELPOS'</font>, <font color="#0000ff">'1|1'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Edit'</font>, <font color="#0000ff">'SELPOS'</font>, <font color="#0000ff">'10|100'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem setting the selection in a listbox</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Weekdays'</font>, <font color="#0000ff">'SELINDEX'</font>, <font color="#0000ff">'4'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Weekdays_MultiSel'</font>, <font color="#0000ff">'SELINDEX'</font>, <font color="#0000ff">'1|4|10|5'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem setting the font</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Eingabe'</font>, <font color="#0000ff">'FONT'</font>, <font color="#0000ff">'Courier New|12|0'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Button1'</font>, <font color="#0000ff">'FONT'</font>, <font color="#0000ff">'Arial Black|10|2'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem setting the widget's visibility</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'VISIBLE'</font>, <font color="#000080">[true]</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Button1'</font>, <font color="#0000ff">'VISIBLE'</font>, <font color="#000080">[false]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem creating a menu on a dialog window</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'MENU'</font>, <font color="#0000ff">'File:New|Open|Save|Save as ...|-|Exit;;'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem setting a statusbar to a dialog window</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'STATUSBAR'</font>, <font color="#0000ff">'A simple status-bar'</font><br /><!-- br --><br /><!-- br --><font color="#000080">[status]</font> = <font color="#0000ff">'This statusbar|300'</font><br /><!-- br --><font color="#000080">[status]</font> # <font color="#0000ff">'|is separated|500'</font><br /><!-- br --><font color="#000080">[status]</font> # <font color="#0000ff">'|into different parts!|'</font> # <font color="#000080">[ScreenWidth]</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'STATUSBAR'</font>, <font color="#000080">[status]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem switching events off</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Button1'</font>, <font color="#0000ff">'EVENT_CLICK'</font>, <font color="#0000ff">'-1'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'EVENT_CLOSE'</font>, <font color="#000080">[false]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem switching events on</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog:Name'</font>, <font color="#0000ff">'EVENT_CHANGE'</font>, <font color="#0000ff">'0'</font><br /><!-- br -->letdialog <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'EVENT_CLOSE'</font>, <font color="#000080">[true]</font>§In case of an error (e.g. if the widget was not found), [errorcode] gets the value '-1', else '0'.<!-- br --><br><!-- br --><br><!-- br --><!-- br -->To determine widget attributes, use the GETDIALOG-function.
rb5ref_en_6_getdialog.html§GETDIALOG§GETDIALOG attribute-value = widget-label, attribute-identifier§The function GETDIALOG determines the value of a widget-attribute and returns it.<br><!-- br --><br><!-- br -->Next to the widget-label that has been associated with the widget at NEWDIALOG, an attribute-identifier is expected, specifying which attribute GETDIALOG should determine and return. This also means, that the returned value and its format always depends on the corresponding attribute identifier that is specified.<br><!-- br --><br><!-- br --><!-- br -->The following table describes all possible attributes, explains the attribute-value and/or its formatting that is returned and provides information on the supported widgets, where the particular attribute can be determined from.<!-- br --><!-- br --><br><!-- br --><br><!-- br --><!-- br --><table class="std" width="100%"><!-- br -->	<tr><!-- br -->		<td><b>Attribute:</b></td><!-- br -->		<td><b>Description:</b></td><!-- br -->		<td><b>Supported Widgets:</b></td><!-- br -->		<td><b>Returned attribute value:</b></td><!-- br -->	</tr><!-- br --><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">CAPTION</td><!-- br -->		<td>Gets a widget's labeling text.</td><!-- br -->		<td>DIALOG, BUTTON, LABEL, RADIO, OPTION, GROUP, MENU</td><!-- br -->		<td>The widget's caption or labeling.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">CHECKED</td><!-- br -->		<td>Check state of a widget.</td><!-- br -->		<td>RADIO, OPTION, MENU</td><!-- br -->		<td>'0' = checked<br><!-- br -->		'-1' = unchecked</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">ENABLED</td><!-- br -->		<td>Verifies if a widget is activated or deactivated. When a widget is deactivated, it is still visible, but can not be used and is displayed grayed.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, LABEL, OPTION, RADIO, GROUP, IMAGE, COMBO, STATIC_COMBO, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, PROGRESS</td><!-- br -->		<td>'0' = activated<br><!-- br -->		'-1' = deactivated (grayed)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">FOCUS</td><!-- br -->		<td>Verifies if a widget has the focus.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, OPTION, RADIO, COMBO, STATIC_COMBO, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTUSORTED</td><!-- br -->		<td>'0' = widget has the focus<br><!-- br -->		'-1' = widget hasn't the focus</td><!-- br -->	</tr>	<!-- br -->	<tr><!-- br -->		<td class="attrib_desc">FONT</td><!-- br -->		<td>Determines the customized font-descriptor of a widget.<!-- br -->		</td>		<!-- br -->		<td>BUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, LABEL, OPTION, RADIO, GROUP, COMBO, STATIC_COMBO, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED</td><!-- br -->		<td>The font-type, font-size and font-style in the format<br><br><!-- br -->		&quot;Font-Type|Font-Size|Font-Style&quot;<br><!-- br -->		<br><!-- br -->		e.g. &quot;Courier New|10|2&quot; for font &quot;Courier New&quot;, 10 pixels, bold.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">HEIGHT</td><!-- br -->		<td>Determines the height of a widget.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAEG, PWD, PROGRESS</td><!-- br -->		<td>The widget's height, in pixels.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">HWND</td><!-- br -->		<td>Returns a widget's internal window handle identifier.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAEG, PWD, PROGRESS</td><!-- br -->		<td>The internal Windows ID of the widget.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">ICON</td><!-- br -->		<td>Retrieves the filename of an alternative icon that is set to a dialog-window. This attribute returns an empty-string if no alternative dialog window icon is assigned.</td><!-- br -->		<td>DIALOG</td><!-- br -->		<td>Relative or abolute path of an external icon-resource (.ICO extension), or an empty-string.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">IMAGE</td><!-- br -->		<td>Retrieves the filename of an external bitmap-image that is associated with an image-supporting widget.</td><!-- br -->		<td>IMAGEBUTTON, IMAGE</td><!-- br -->		<td>Relative or absolute path of an external bitmap-file (.BMP extension).</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">IMAGE_TRANSPARENT</td><!-- br -->		<td>Retrieves the filename of an external bitmap-image that is associated with an image-supporting widget as transparent image.</td><!-- br -->		<td>IMAGEBUTTON, IMAGE</td><!-- br -->		<td>Relative or absolute path of an external bitmap-file (.BMP extension).</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">ITEMS</td><!-- br -->		<td>List of values in a list-typed widget.</td><!-- br -->		<td>LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO</td><!-- br -->		<td>A list of items, where each item is seperated by the separation character defined in [std_sep] (by default the &quot;|&quot; pipe-character).<br><!-- br -->Example: "Item 1|Item 2|Item 3"</td><!-- br -->	</tr>		<!-- br -->	<!-- br -->	<tr><!-- br -->		<td class="attrib_desc">MENU</td><!-- br -->		<td>Determines the descriptor of a menu-bar that has been assigned to a dialog window.</td><!-- br -->		<td>DIALOG</td><!-- br -->		<td>The menu-bar descriptor.<!-- , e.g. 'Menu-1:Sub-Menu-1:Sub-Sub-Menu-1|Sub-Sub-Menu-2;Sub-Menu-2;Menu-2;' --></td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">ORDER</td><!-- br -->		<td>Determines a dialog's z-order on the screen.<br><!-- br -->		<br><!-- br -->		Dialogs can be displayed in the following modes on the z-axis:<br><!-- br -->		<ul><!-- br -->			<li><u>BOTTOM</u><br><!-- br -->			The dialog window is moved behind all visible dialog windows and stays in the background. This option can be left by setting the ORDER-attribute back to &quot;NORMAL&quot; again.</li><!-- br -->			<li><u>TOP</u><br><!-- br -->			The dialog is moved in front of all visible dialog windows and can not be brought into the background. This mode is also used by the build-in INFOBOX-dialog. It can also be left by setting the ORDER-attribute back to &quot;NORMAL&quot;.</li><!-- br -->			<li><u>NORMAL</u> (Standard)<br><!-- br -->			The dialog is set to normal-mode like any standard dialog window. This is also the default value.</li></td><!-- br -->		<td>DIALOG</td><!-- br -->		<td>The values emptystring (for 'NORMAL', this is the default!), 'TOP' or 'BOTTOM'.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">POSITION</td><!-- br -->		<td>Gets the position of a widget. At parent dialog windows, the X-/Y-coordinates are relative to the upper-left corner of the screen, at all other widgets they are relative to the upper-left corner of the parent dialog-window the widget is dedicated to.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, LABEL, OPTION, RADIO, GROUP, IMAGE, COMBO, STATIC_COMBO, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, PROGRESS</td><!-- br -->		<td>The position is returned in the following format: &quot;X|Y|Width|Height&quot;<br><br><!-- br -->		<!-- br -->		The values are available in pixels.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">PROGRESS</td><!-- br -->		<td>Determines the current size of a PROGRESS-widget's status bar.</td><!-- br -->		<td>PROGRESS</td><!-- br -->		<td>A percentual size-value between 0 and 100.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">READONLY</td><!-- br -->		<td>Determines if the read-only mode of an edit-field is toggled on or off.</td><!-- br -->		<td>INPUT, PWD, EDIT, EDIT_LINEWRAP</td><!-- br -->		<td><!-- br -->			'0' = read-only (text can't be modified)<br><!-- br -->			'-1' = writeable (default)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">SELECTION</td><!-- br -->		<td>In input-field typed widgets:<br><!-- br -->		Returns the currently selected/highlighted text, if available.<br><!-- br -->		<br><!-- br -->		In list-typed widgets:<br><!-- br -->		Returns the currently selected item(s).</td><!-- br -->		<td>INPUT, PWD, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO</td><!-- br -->		<td>The selected value or entries.</td><!-- br -->	</tr>	<!-- br -->	<tr><!-- br -->		<td class="attrib_desc">SELINDEX</td><!-- br -->		<td>Returns the position(s) of the highglighted item(s) from a LIST-typed widget (and its derivations LIST_SORTED, LIST_MUTLI and LIST_MULTISORTED).<br><!-- br -->		If SELINDEX is used with LIST_MUTLI and LIST_MULTISORTED, a list of selected indeces is returned (if more than one item is selected).<!-- br -->		<td>LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED</td><!-- br -->		<td>Index or list of ideces (each sepeated by the standard list separator) that are selected.</td><!-- br -->	</tr><!-- br --><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">SELPOS</td><!-- br -->		<td>Determines the cursor's position and its length in a input-field typed widget.</td><!-- br -->		<td>INPUT, EDIT, EDIT_LINEWRAP, PWD, COMBO</td><!-- br -->		<td>The cursor's position and its selection length specified in the format: &quot;cursor-position|lenght-of-selection&quot;<br><!-- br -->	e.g. the value '1|10' tells that the cursor is in front of the first character and selects the next 10 characters. The value '15|0' tells, that the cursor is in front of the 15th character of the value in the input-typed widget and has no selection.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">STATUSBAR</td><!-- br -->		<td>Determines the statusbar-descriptor that was assigned to a parent dialog window. The descriptor is returned the same way as it was specified at LETDIALOG.</td><!-- br -->		<td>DIALOG</td><!-- br -->		<td>The dialog's statusbar-descriptor, or empty-string if no one is given.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">STYLE</td><!-- br -->		<td>Retrieves the dialog-style of a DIALOG-typed widget.<br><!-- br -->		<br><!-- br -->		The following styles are be returned, if set:<br><!-- br -->		<ul><!-- br -->			<li><u>DIALOG</u><br><!-- br -->			A dialog-window with close-button and system-menu, static size</li><!-- br -->			<li><u>DIALOG</u><br><!-- br -->			A dialog-window with close-button and system-menu, static size</li><!-- br -->			<li><u>SINGLE</u><br><!-- br -->			A dialog-window with close-button, minimize-button and system-menu, static size</li><!-- br -->			<li><u>TOOL</u><br><!-- br -->			A dialog-window in the toolwindow-style with close-button, scalable size</li><!-- br -->			<li><u>STATIC_TOOL</u></br><!-- br -->			A dialog-window in the toolwindow-style with close-button, static size</li><!-- br -->		</ul></td><!-- br -->		<td>DIALOG</td><!-- br -->		<td>A style-identifier ('STANDARD', 'DIALOG', 'SINGLE', 'TOOL' or 'STATIC_TOOL').</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">TEXT</td><!-- br -->		<td>Gets the text from the input-area of an input-field typed widget.</td><!-- br -->		<td>EDIT, EDIT_LINEWRAP, INPUT, PWD, COMBO</td><!-- br -->		<td>The value of the field.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">TOOLTIP</td><!-- br -->		<td>Retrieves the tooltip of a widget. Tooltips have the purpose to provide help information to a control on a dialog window, by describing the purpose of the control.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAGE, PROGRESS</td><!-- br -->		<td>The preassigned tooltip text.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">TYPE</td><!-- br -->		<td>Returns a widget's type as a string.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAEG, PWD, PROGRESS</td><!-- br -->		<td>The widget's type, e.g. &quot;BUTTON&quot; or &quot;DIALOG&quot;. Note: When applicating TYPE to LIST-susbets, e.g. LIST_SORTED, only &quot;LIST&quot; is returned, because LIST subset types are internally handled as LIST-widgets.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">VISIBLE</td><!-- br -->		<td>Determines the visibility of a widget, if it is switched on or off.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, PWD, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAGE, PROGRESS</td><!-- br -->		<td><!-- br -->			'0' = visible<br><!-- br -->			'-1' = invisible</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">WIDTH</td><!-- br -->		<td>Determines the width of a widget.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAGE, PWD, PROGRESS</td><!-- br -->		<td>The widget's width, in pixels.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">X</td><!-- br -->		<td>Determines the X-position of a widget. When used on dialog windows, the X-coordinate is relative to the upper-left corner of the screen, at all other widgets, it is relative to the upper-left corner of the dialog window the widget is dedicated to.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAGE, PWD, PROGRESS</td><!-- br -->		<td>The X-position of the widget, in pixels.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">Y</td><!-- br -->		<td>Determines the Y-position of a widget. When used on dialog windows, the Y-coordinate is relative to the upper-left corner of the screen, at all other widgets, it is relative to the upper-left corner of the dialog window the widget is dedicated to.</td><!-- br -->		<td>DIALOG, BUTTON, IMAGEBUTTON, INPUT, EDIT, EDIT_LINEWRAP, LIST, LIST_SORTED, LIST_MULTI, LIST_MULTISORTED, COMBO, STATIC_COMBO, RADIO, OPTION, GROUP, IMAGE, PWD, PROGRESS</td><!-- br -->		<td>The Y-position of the widget, in pixels.</td><!-- br -->	</tr><!-- br --></table><!-- br --><br /><!-- br --><!-- br -->Same as at LETDIALOG, GETDIALOG is able to determine if a widget's event, which can be initated by the user at a RUNDIALOG-call, is switched on or off. The following table describes the possible events that can be specified as the <i>attribute-identifier</i>-parameter at LETDIALOG, and the widgets supporting the particular event.<!-- br --><br><!-- br --><br><!-- br -->The particular event is switched on if the returned value is '0', else the returned value will be '-1'. The default-value of each widget for the event is obvious from the value written in brackets.<!-- br --><br><!-- br --><br><!-- br --><!-- br --><table class="std" width="100%"><!-- br -->	<tr><!-- br -->		<td><b>Event-Identifier:</b></td><!-- br -->		<td><b>Description:</b></td><!-- br -->		<td><b>Supported Widgets:</b></td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_CLICK</td><!-- br -->		<td>Event that occurs when the user clicks a widget with the mouse.</td><!-- br -->		<td>DIALOG (-1), BUTTON (0), IMAGEBUTTON (0), LABEL (-1), OPTION (-1), RADIO (-1), IMAGE (-1), MENU (0)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_DBLCLICK</td><!-- br -->		<td>Event that occurs when the user double-clisk a widget with the mouse.</td><!-- br -->		<td>LIST (-1), LIST_SORTED (-1), LIST_MUTLI (-1), LIST_MULTISORTED (-1)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_CHANGE</td><!-- br -->		<td>Event that occurs when a key is pressed in an input-field typed widget.</td><!-- br -->		<td>INPUT (-1), EDIT (-1), EDIT_LINEWRAP (-1) PWD (-1), COMBO (-1), STATIC_COMBO (-1), STATIC_COMBO (-1), LIST (-1), LIST_SORTED (-1), LIST_MULTI (-1), LIST_MULTISORTED (-1)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_CLOSE</td><!-- br -->		<td>Event that occurs when closing a dialog-window.</td><!-- br -->		<td>DIALOG (0)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_SIZE</td><!-- br -->		<td>Event that occurs when a dialog-window is sized, minimized or maximized.</td><!-- br -->		<td>DIALOG (0)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_MOVE</td><!-- br -->		<td>Event that occurs when a dialog window is moved.</td><!-- br -->		<td>DIALOG (-1)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_MOUSEMOVE</td><!-- br -->		<td>Event that occurs when the mouse is moved over a dialog.</td><!-- br -->		<td>DIALOG (-1)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_OK</td><!-- br -->		<td>Event that occurs when the user hits the ENTER-key on the active dialog, aborting it.</td><!-- br -->		<td>DIALOG (-1)</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td class="attrib_desc">EVENT_CANCEL</td><!-- br -->		<td>Event that occurs when the user hits the ESC-key on the active dialog, aborting it.</td><!-- br -->		<td>DIALOG (-1)</td><!-- br -->	</tr><!-- br --></table>§<font color="#808080">rem PLEASE NOTE:</font><br /><!-- br --><font color="#808080">rem All widget labels used in this examples are not created before,</font><br /><!-- br --><font color="#808080">rem so that these examples only have the purpose to show how dialog</font><br /><!-- br --><font color="#808080">rem widget attributes are determined and handled.</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem retrieving and evaluating a widget's position</font><br /><!-- br -->getdialog <font color="#000080">[pos]</font> = <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'POSITION'</font><br /><!-- br --><br /><!-- br -->gettok <font color="#000080">[x]</font> = <font color="#000080">[pos]</font>, <font color="#000080">[std_sep]</font>, <font color="#0000ff">'1'</font><br /><!-- br -->gettok <font color="#000080">[y]</font> = <font color="#000080">[pos]</font>, <font color="#000080">[std_sep]</font>, <font color="#0000ff">'2'</font><br /><!-- br -->gettok <font color="#000080">[width]</font> = <font color="#000080">[pos]</font>, <font color="#000080">[std_sep]</font>, <font color="#0000ff">'3'</font><br /><!-- br -->gettok <font color="#000080">[height]</font> = <font color="#000080">[pos]</font>, <font color="#000080">[std_sep]</font>, <font color="#0000ff">'4'</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'X: '</font> # <font color="#000080">[x]</font> # <font color="#0000ff">' Y: '</font> # <font color="#000080">[y]</font><br /><!-- br -->echo <font color="#0000ff">'Width: '</font> # <font color="#000080">[width]</font> # <font color="#0000ff">' Height: '</font> # <font color="#000080">[height]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem determining a widget's caption</font><br /><!-- br -->getdialog <font color="#000080">[caption]</font> = <font color="#0000ff">'myDialog'</font>, <font color="#0000ff">'CAPTION'</font><br /><!-- br -->echo <font color="#0000ff">'The caption is: '</font> # <font color="#000080">[caption]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem reading the content of an input-field</font><br /><!-- br -->getdialog <font color="#000080">[text]</font> = <font color="#0000ff">'myDialog:Input1'</font>, <font color="#0000ff">'TEXT'</font><br /><!-- br -->echo <font color="#0000ff">'The text you entered is: '</font> # <font color="#000080">[text]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem determine a listbox's item list</font><br /><!-- br -->getdialog <font color="#000080">[list_items]</font> = <font color="#0000ff">'myDialog:List1'</font>, <font color="#0000ff">'ITEMS'</font><br /><!-- br -->replacevar <font color="#000080">[list_items]</font> = <font color="#000080">[list_items]</font>, <font color="#000080">[std_sep]</font>, <font color="#000080">[new_line]</font><br /><!-- br -->echo <font color="#000080">[list_items]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem check state of a checkbox</font><br /><!-- br -->getdialog <font color="#000080">[state]</font> = <font color="#0000ff">'myDialog:Option1'</font>, <font color="#0000ff">'CHECKED'</font><br /><!-- br --><b>if</b> <font color="#000080">[state]</font> = <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The option is selected!'</font><br /><!-- br --><b>else</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The option is not selected.'</font><br /><!-- br --><b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem verify if a widget has the focus or not</font><br /><!-- br -->getdialog <font color="#000080">[hasfocus]</font> = <font color="#0000ff">'myDialog:Input1'</font>, <font color="#0000ff">'FOCUS'</font><br /><!-- br --><b>if</b> <font color="#000080">[hasfocus]</font> = <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The input-field has the focus!'</font><br /><!-- br --><b>else</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The input-field does not have the focus.'</font><br /><!-- br --><b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem verify if a widget is enabled or disabled</font><br /><!-- br -->getdialog <font color="#000080">[isenabled]</font> = <font color="#0000ff">'myDialog:Option2'</font>, <font color="#0000ff">'ENABLED'</font><br /><!-- br --><b>if</b> <font color="#000080">[isenabled]</font> = <font color="#000080">[true]</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The widget is enabled.'</font><br /><!-- br --><b>else</b><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'The widget is disabled.'</font><br /><!-- br --><b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">rem selection from an input-field and in a listbox</font><br /><!-- br -->getdialog <font color="#000080">[seltext]</font> = <font color="#0000ff">'myDialog:Input1'</font>, <font color="#0000ff">'SELECTION'</font><br /><!-- br -->echo <font color="#0000ff">'The text you selected is: '</font> # <font color="#000080">[seltext]</font><br /><!-- br --><br /><!-- br -->getdialog <font color="#000080">[items]</font> = <font color="#0000ff">'myDialog:List2'</font>, <font color="#0000ff">'SELECTION'</font><br /><!-- br -->replacevar <font color="#000080">[items]</font> = <font color="#000080">[items]</font>, <font color="#000080">[std_sep]</font>, <font color="#000080">[new_line]</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'The item(s) you selected:'</font> # <font color="#000080">[new_line]</font> # <font color="#000080">[items]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem retrieving the cursor's position and selection length</font><br /><!-- br --><font color="#808080">rem from an input-field widget</font><br /><!-- br -->getdialog <font color="#000080">[selpos]</font> = <font color="#0000ff">'myDialog:Input1'</font>, <font color="#0000ff">'SELPOS'</font><br /><!-- br -->gettok <font color="#000080">[pos]</font> = <font color="#000080">[selpos]</font>, <font color="#000080">[std_sep]</font>, <font color="#0000ff">'1'</font><br /><!-- br -->gettok <font color="#000080">[len]</font> = <font color="#000080">[selpos]</font>, <font color="#000080">[std_sep]</font>, <font color="#0000ff">'2'</font><br /><!-- br --><br /><!-- br -->echo <font color="#0000ff">'The cursor is at '</font> # <font color="#000080">[pos]</font> # <font color="#0000ff">' and selects '</font> # <font color="#000080">[len]</font> <font color="#0000ff">' chars'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem retrieving the image file of an IMAGE-typed widget</font><br /><!-- br -->getdialog <font color="#000080">[imagefile]</font> = <font color="#0000ff">'myDialog:Image1'</font>, <font color="#0000ff">'IMAGE'</font><br /><!-- br -->echo <font color="#0000ff">'The image file is located at: '</font> # <font color="#000080">[imagefile]</font>§GETDIALOG is assigning '-1' to [errorcode], if an error is detected (e.g. an attribute is determined from a wrong or unsupported widget), else '0'.
rb5ref_en_6_rundialog.html§RUNDIALOG§RUNDIALOG event-string = timeout§Holds the script-execution until an event initiated by the user occurs in the current script-instance.<br><br><!-- br --><!-- br -->As <i>timeout</i>-value, a number of milliseconds can be specified, defining a timeout when the function continues the script-execution automatically. This parameter is optional, and can be set to '0', causing RUNDIALOG to wait until a real user-initiated event happens, without any timeout.<br><!-- br -->The function's return value is a so called event-string if a user-initiated event was recognized or an empty-string, if the timeout occured.<br><!-- br --><!-- br -->If an event-string is returned, it is always based on the following format below:<!-- br --><!-- br --><br><!-- br --><br><!-- br --><i>event-identifier</i>_<i>widget-label</i><!-- br --><br><!-- br --><br><!-- br --><!-- br -->The value at <i>event-identifier</i> can be one of the following values, <i>widget-label</i> is the label of the widget that received the user-initiated event.<!-- br --><!-- br --><br><br><!-- br --><!-- br --><table class="std" width="100%"><!-- br -->	<tr><!-- br -->		<td><b>Event-Identifier:</b></td><!-- br -->		<td><b>Description:</b></td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>click</td><!-- br -->		<td>A widget has been single-clicked left.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>dblclick</td><!-- br -->		<td>A widget has been double-clicked left.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>change</td><!-- br -->		<td>A widget's content has been changed (e.g. the value of an input-field).</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>close</td><!-- br -->		<td>The dialog's close button has been clicked.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>size</td><!-- br -->		<td>The dialog-window was scaled.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>move</td><!-- br -->		<td>The dialog-window's position has changed (when it is moved over the screen).</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>mousemove</td><!-- br -->		<td>The mouse is moved over a dialog's client area.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>cancel</td><!-- br -->		<td>The ESC-key has been pressed on the dialog.</td><!-- br -->	</tr><!-- br -->	<tr><!-- br -->		<td>ok</td><!-- br -->		<td>The ENTER-key has been pressed on the dialog.</td><!-- br -->	</tr><!-- br --></table><!-- br --><!-- br --><br><!-- br -->RUNDIALOG recognizes all activated events of all visible widgets that belong to the script-instance you script is running in.<!-- br --><br><br><!-- br -->With the event-string RUNDIALOG returns, corresponding code for each event and widget can be executed by switching to the particular code via an IF...ELSEIF...ENDIF-construction or a dynamic GOTO- or GOSUB-call to a label. The example below uses a simple IF to run the block of code that belongs to the event &quot;click_Window:Button&quot;.§<font color="#808080">rem creating a simple dialog</font><br /><!-- br -->newdialog <font color="#0000ff">'Window'</font>, <font color="#0000ff">'dialog'</font>, <font color="#0000ff">'1|1|200|100'</font><br /><!-- br -->newdialog <font color="#0000ff">'Window:Button'</font>, <font color="#0000ff">'button'</font>, <font color="#0000ff">'2|2|192|72'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem set the button's caption</font><br /><!-- br -->letdialog <font color="#0000ff">'Window:Button'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'Hello World'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem make the window visible</font><br /><!-- br -->letdialog <font color="#0000ff">'Window'</font>, <font color="#0000ff">'visible'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><b>repeat</b><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem hold the script, wait for user-initiated events</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem (no timeout!)</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;rundialog <font color="#000080">[event]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem analyzing the event-string</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <font color="#000080">[event]</font> = <font color="#0000ff">'click_Window:Button'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo <font color="#0000ff">'You clicked the button!'</font><br /><!-- br -->&nbsp;&nbsp;&nbsp;&nbsp;<b>endif</b><br /><!-- br --><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem if the dialog's close button was clicked, the</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem corresponding event-string must also be analyzed</font><br /><!-- br --><font color="#808080">&nbsp;&nbsp;&nbsp;&nbsp;rem to break the loop</font><br /><!-- br --><b>until</b> <font color="#000080">[event]</font> = <font color="#0000ff">'close_Window'</font><!-- br -->§none
rb5ref_en_6_deldialog.html§DELDIALOG§DELDIALOG widget-label§Removes a widget from the memory.<br><br><!-- br -->If the widget-label of a dialog window is specified, the complete dialog including all child-elements is removed from the memory. A removed widget can not be used anymore after a DELDIALOG-call.§<font color="#808080">rem creating a dialog window</font><br /><!-- br -->newdialog <font color="#0000ff">'Window'</font>, <font color="#0000ff">'dialog'</font>, <font color="#0000ff">'1|1|640|480'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem setting the dialog's title and make it visible</font><br /><!-- br -->letdialog <font color="#0000ff">'Window'</font>, <font color="#0000ff">'caption'</font>, <font color="#0000ff">'This is a simple dialog'</font><br /><!-- br -->letdialog <font color="#0000ff">'Window'</font>, <font color="#0000ff">'visible'</font>, <font color="#000080">[true]</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem hold until the user hits the dialog's close button</font><br /><!-- br -->rundialog <font color="#000080">[null]</font> = <font color="#0000ff">'0'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem removing the dialog again from the memory</font><br /><!-- br -->deldialog <font color="#0000ff">'Window'</font><br /><!-- br --><br /><!-- br --><font color="#808080">rem trying to access the dialog's caption</font><br /><!-- br -->getdialog <font color="#000080">[titel]</font> = <font color="#0000ff">'Window'</font>, <font color="#0000ff">'caption'</font><br /><!-- br --><br /><!-- br --><b>if</b> <font color="#000080">[errorcode]</font> = <font color="#000080">[false]</font><br /><!-- br -->    echo <font color="#0000ff">'Oops, the dialog is not existing anymore!'</font><br /><!-- br --><b>else</b><br /><!-- br -->    echo <font color="#0000ff">'This message will never be displayed.'</font><br /><!-- br --><b>endif</b>§If DELDIALOG fails, [errorcode] receives the value '-1', else '0'.<br><br><!-- br --><!-- br -->The DELDIALOG-instruction has the only purpose to remove dialogs from the memory when they are (maybe) created a second time if required. When implementing own dialogs in libraries or functions, DELDIALOG can (and should!) be used to remove the complete dialog from the memory and system again when it was executed and the library-procedure or function returns to the main-script again. It is not recommended to use DELDIALOG for a dialog that is only be used for one time (e.g. a main window of an application you wrote). In this case, the dialog is automatically be removed by RapidBATCH at script termiation.
